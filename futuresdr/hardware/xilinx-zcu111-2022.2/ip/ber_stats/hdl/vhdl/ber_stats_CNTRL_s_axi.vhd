-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity ber_stats_CNTRL_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 12;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    clk                   :in   STD_LOGIC;
    rst                   :in   STD_LOGIC;
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    k_address0            :in   STD_LOGIC_VECTOR(4 downto 0);
    k_ce0                 :in   STD_LOGIC;
    k_q0                  :out  STD_LOGIC_VECTOR(31 downto 0);
    n_address0            :in   STD_LOGIC_VECTOR(4 downto 0);
    n_ce0                 :in   STD_LOGIC;
    n_q0                  :out  STD_LOGIC_VECTOR(31 downto 0);
    mask_V_address0       :in   STD_LOGIC_VECTOR(4 downto 0);
    mask_V_ce0            :in   STD_LOGIC;
    mask_V_q0             :out  STD_LOGIC_VECTOR(127 downto 0);
    block_def_cfg_address0 :in   STD_LOGIC_VECTOR(5 downto 0);
    block_def_cfg_ce0     :in   STD_LOGIC;
    block_def_cfg_q0      :out  STD_LOGIC_VECTOR(31 downto 0);
    block_def_cnt_address0 :in   STD_LOGIC_VECTOR(5 downto 0);
    block_def_cnt_ce0     :in   STD_LOGIC;
    block_def_cnt_q0      :out  STD_LOGIC_VECTOR(31 downto 0);
    num_defs              :out  STD_LOGIC_VECTOR(31 downto 0);
    num_blocks            :out  STD_LOGIC_VECTOR(31 downto 0);
    ber_stats_raw_berr_address0 :in   STD_LOGIC_VECTOR(4 downto 0);
    ber_stats_raw_berr_ce0 :in   STD_LOGIC;
    ber_stats_raw_berr_we0 :in   STD_LOGIC;
    ber_stats_raw_berr_d0 :in   STD_LOGIC_VECTOR(31 downto 0);
    ber_stats_raw_berr_q0 :out  STD_LOGIC_VECTOR(31 downto 0);
    ber_stats_cor_berr_address0 :in   STD_LOGIC_VECTOR(4 downto 0);
    ber_stats_cor_berr_ce0 :in   STD_LOGIC;
    ber_stats_cor_berr_we0 :in   STD_LOGIC;
    ber_stats_cor_berr_d0 :in   STD_LOGIC_VECTOR(31 downto 0);
    ber_stats_cor_berr_q0 :out  STD_LOGIC_VECTOR(31 downto 0);
    ber_stats_cor_blerr_address0 :in   STD_LOGIC_VECTOR(4 downto 0);
    ber_stats_cor_blerr_ce0 :in   STD_LOGIC;
    ber_stats_cor_blerr_we0 :in   STD_LOGIC;
    ber_stats_cor_blerr_d0 :in   STD_LOGIC_VECTOR(31 downto 0);
    ber_stats_cor_blerr_q0 :out  STD_LOGIC_VECTOR(31 downto 0);
    ber_stats_iter_cnt_address0 :in   STD_LOGIC_VECTOR(4 downto 0);
    ber_stats_iter_cnt_ce0 :in   STD_LOGIC;
    ber_stats_iter_cnt_we0 :in   STD_LOGIC;
    ber_stats_iter_cnt_d0 :in   STD_LOGIC_VECTOR(31 downto 0);
    ber_stats_iter_cnt_q0 :out  STD_LOGIC_VECTOR(31 downto 0);
    ber_stats_block_cnt_address0 :in   STD_LOGIC_VECTOR(4 downto 0);
    ber_stats_block_cnt_ce0 :in   STD_LOGIC;
    ber_stats_block_cnt_we0 :in   STD_LOGIC;
    ber_stats_block_cnt_d0 :in   STD_LOGIC_VECTOR(31 downto 0);
    ber_stats_block_cnt_q0 :out  STD_LOGIC_VECTOR(31 downto 0)
);
end entity ber_stats_CNTRL_s_axi;

-- ------------------------Address Info-------------------
-- 0x000 : Control signals
--         bit 0  - ap_start (Read/Write/COH)
--         bit 1  - ap_done (Read/COR)
--         bit 2  - ap_idle (Read)
--         bit 3  - ap_ready (Read)
--         bit 7  - auto_restart (Read/Write)
--         others - reserved
-- 0x004 : Global Interrupt Enable Register
--         bit 0  - Global Interrupt Enable (Read/Write)
--         others - reserved
-- 0x008 : IP Interrupt Enable Register (Read/Write)
--         bit 0  - Channel 0 (ap_done)
--         bit 1  - Channel 1 (ap_ready)
--         others - reserved
-- 0x00c : IP Interrupt Status Register (Read/TOW)
--         bit 0  - Channel 0 (ap_done)
--         bit 1  - Channel 1 (ap_ready)
--         others - reserved
-- 0x600 : Data signal of num_defs
--         bit 31~0 - num_defs[31:0] (Read/Write)
-- 0x604 : reserved
-- 0x608 : Data signal of num_blocks
--         bit 31~0 - num_blocks[31:0] (Read/Write)
-- 0x60c : reserved
-- 0x080 ~
-- 0x0ff : Memory 'k' (32 * 32b)
--         Word n : bit [31:0] - k[n]
-- 0x100 ~
-- 0x17f : Memory 'n' (32 * 32b)
--         Word n : bit [31:0] - n[n]
-- 0x200 ~
-- 0x3ff : Memory 'mask_V' (32 * 128b)
--         Word 4n   : bit [31:0] - mask_V[n][31: 0]
--         Word 4n+1 : bit [31:0] - mask_V[n][63:32]
--         Word 4n+2 : bit [31:0] - mask_V[n][95:64]
--         Word 4n+3 : bit [31:0] - mask_V[n][127:96]
-- 0x400 ~
-- 0x4ff : Memory 'block_def_cfg' (64 * 32b)
--         Word n : bit [31:0] - block_def_cfg[n]
-- 0x500 ~
-- 0x5ff : Memory 'block_def_cnt' (64 * 32b)
--         Word n : bit [31:0] - block_def_cnt[n]
-- 0x680 ~
-- 0x6ff : Memory 'ber_stats_raw_berr' (32 * 32b)
--         Word n : bit [31:0] - ber_stats_raw_berr[n]
-- 0x700 ~
-- 0x77f : Memory 'ber_stats_cor_berr' (32 * 32b)
--         Word n : bit [31:0] - ber_stats_cor_berr[n]
-- 0x780 ~
-- 0x7ff : Memory 'ber_stats_cor_blerr' (32 * 32b)
--         Word n : bit [31:0] - ber_stats_cor_blerr[n]
-- 0x800 ~
-- 0x87f : Memory 'ber_stats_iter_cnt' (32 * 32b)
--         Word n : bit [31:0] - ber_stats_iter_cnt[n]
-- 0x880 ~
-- 0x8ff : Memory 'ber_stats_block_cnt' (32 * 32b)
--         Word n : bit [31:0] - ber_stats_block_cnt[n]
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of ber_stats_CNTRL_s_axi is
    type states is (wridle, wrdata, wrresp, wrreset, rdidle, rddata, rdreset);  -- read and write fsm states
    signal wstate  : states := wrreset;
    signal rstate  : states := rdreset;
    signal wnext, rnext: states;
    constant ADDR_AP_CTRL                  : INTEGER := 16#000#;
    constant ADDR_GIE                      : INTEGER := 16#004#;
    constant ADDR_IER                      : INTEGER := 16#008#;
    constant ADDR_ISR                      : INTEGER := 16#00c#;
    constant ADDR_NUM_DEFS_DATA_0          : INTEGER := 16#600#;
    constant ADDR_NUM_DEFS_CTRL            : INTEGER := 16#604#;
    constant ADDR_NUM_BLOCKS_DATA_0        : INTEGER := 16#608#;
    constant ADDR_NUM_BLOCKS_CTRL          : INTEGER := 16#60c#;
    constant ADDR_K_BASE                   : INTEGER := 16#080#;
    constant ADDR_K_HIGH                   : INTEGER := 16#0ff#;
    constant ADDR_N_BASE                   : INTEGER := 16#100#;
    constant ADDR_N_HIGH                   : INTEGER := 16#17f#;
    constant ADDR_MASK_V_BASE              : INTEGER := 16#200#;
    constant ADDR_MASK_V_HIGH              : INTEGER := 16#3ff#;
    constant ADDR_BLOCK_DEF_CFG_BASE       : INTEGER := 16#400#;
    constant ADDR_BLOCK_DEF_CFG_HIGH       : INTEGER := 16#4ff#;
    constant ADDR_BLOCK_DEF_CNT_BASE       : INTEGER := 16#500#;
    constant ADDR_BLOCK_DEF_CNT_HIGH       : INTEGER := 16#5ff#;
    constant ADDR_BER_STATS_RAW_BERR_BASE  : INTEGER := 16#680#;
    constant ADDR_BER_STATS_RAW_BERR_HIGH  : INTEGER := 16#6ff#;
    constant ADDR_BER_STATS_COR_BERR_BASE  : INTEGER := 16#700#;
    constant ADDR_BER_STATS_COR_BERR_HIGH  : INTEGER := 16#77f#;
    constant ADDR_BER_STATS_COR_BLERR_BASE : INTEGER := 16#780#;
    constant ADDR_BER_STATS_COR_BLERR_HIGH : INTEGER := 16#7ff#;
    constant ADDR_BER_STATS_ITER_CNT_BASE  : INTEGER := 16#800#;
    constant ADDR_BER_STATS_ITER_CNT_HIGH  : INTEGER := 16#87f#;
    constant ADDR_BER_STATS_BLOCK_CNT_BASE : INTEGER := 16#880#;
    constant ADDR_BER_STATS_BLOCK_CNT_HIGH : INTEGER := 16#8ff#;
    constant ADDR_BITS         : INTEGER := 12;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC := '0';
    signal ap_done_get         : STD_LOGIC;
    signal ap_done_ext         : STD_LOGIC;
    signal int_ap_start        : STD_LOGIC := '0';
    signal ap_start_set        : STD_LOGIC;
    signal ap_start_mask       : STD_LOGIC;
    signal int_auto_restart    : STD_LOGIC := '0';
    signal auto_restart_set    : STD_LOGIC;
    signal int_gie             : STD_LOGIC := '0';
    signal int_ier             : UNSIGNED(1 downto 0) := (others => '0');
    signal ier_toggle          : STD_LOGIC;
    signal ier_mask            : STD_LOGIC;
    signal int_isr             : UNSIGNED(1 downto 0) := (others => '0');
    signal isr_toggle          : STD_LOGIC;
    signal isr_mask            : STD_LOGIC;
    signal int_num_defs        : UNSIGNED(31 downto 0) := (others => '0');
    signal int_num_blocks      : UNSIGNED(31 downto 0) := (others => '0');
    -- memory signals
    signal int_k_address0      : UNSIGNED(4 downto 0);
    signal int_k_ce0           : STD_LOGIC;
    signal int_k_we0           : STD_LOGIC;
    signal int_k_be0           : UNSIGNED(3 downto 0);
    signal int_k_d0            : UNSIGNED(31 downto 0);
    signal int_k_q0            : UNSIGNED(31 downto 0);
    signal int_k_address1      : UNSIGNED(4 downto 0);
    signal int_k_ce1           : STD_LOGIC;
    signal int_k_we1           : STD_LOGIC;
    signal int_k_be1           : UNSIGNED(3 downto 0);
    signal int_k_d1            : UNSIGNED(31 downto 0);
    signal int_k_q1            : UNSIGNED(31 downto 0);
    signal int_k_read          : STD_LOGIC;
    signal int_k_write         : STD_LOGIC;
    signal int_n_address0      : UNSIGNED(4 downto 0);
    signal int_n_ce0           : STD_LOGIC;
    signal int_n_we0           : STD_LOGIC;
    signal int_n_be0           : UNSIGNED(3 downto 0);
    signal int_n_d0            : UNSIGNED(31 downto 0);
    signal int_n_q0            : UNSIGNED(31 downto 0);
    signal int_n_address1      : UNSIGNED(4 downto 0);
    signal int_n_ce1           : STD_LOGIC;
    signal int_n_we1           : STD_LOGIC;
    signal int_n_be1           : UNSIGNED(3 downto 0);
    signal int_n_d1            : UNSIGNED(31 downto 0);
    signal int_n_q1            : UNSIGNED(31 downto 0);
    signal int_n_read          : STD_LOGIC;
    signal int_n_write         : STD_LOGIC;
    signal int_mask_V_address0 : UNSIGNED(4 downto 0);
    signal int_mask_V_ce0      : STD_LOGIC;
    signal int_mask_V_we0      : STD_LOGIC;
    signal int_mask_V_be0      : UNSIGNED(15 downto 0);
    signal int_mask_V_d0       : UNSIGNED(127 downto 0);
    signal int_mask_V_q0       : UNSIGNED(127 downto 0);
    signal int_mask_V_address1 : UNSIGNED(4 downto 0);
    signal int_mask_V_ce1      : STD_LOGIC;
    signal int_mask_V_we1      : STD_LOGIC;
    signal int_mask_V_be1      : UNSIGNED(15 downto 0);
    signal int_mask_V_d1       : UNSIGNED(127 downto 0);
    signal int_mask_V_q1       : UNSIGNED(127 downto 0);
    signal int_mask_V_read     : STD_LOGIC;
    signal int_mask_V_write    : STD_LOGIC;
    signal int_mask_V_shift    : UNSIGNED(1 downto 0);
    signal int_block_def_cfg_address0 : UNSIGNED(5 downto 0);
    signal int_block_def_cfg_ce0 : STD_LOGIC;
    signal int_block_def_cfg_we0 : STD_LOGIC;
    signal int_block_def_cfg_be0 : UNSIGNED(3 downto 0);
    signal int_block_def_cfg_d0 : UNSIGNED(31 downto 0);
    signal int_block_def_cfg_q0 : UNSIGNED(31 downto 0);
    signal int_block_def_cfg_address1 : UNSIGNED(5 downto 0);
    signal int_block_def_cfg_ce1 : STD_LOGIC;
    signal int_block_def_cfg_we1 : STD_LOGIC;
    signal int_block_def_cfg_be1 : UNSIGNED(3 downto 0);
    signal int_block_def_cfg_d1 : UNSIGNED(31 downto 0);
    signal int_block_def_cfg_q1 : UNSIGNED(31 downto 0);
    signal int_block_def_cfg_read : STD_LOGIC;
    signal int_block_def_cfg_write : STD_LOGIC;
    signal int_block_def_cnt_address0 : UNSIGNED(5 downto 0);
    signal int_block_def_cnt_ce0 : STD_LOGIC;
    signal int_block_def_cnt_we0 : STD_LOGIC;
    signal int_block_def_cnt_be0 : UNSIGNED(3 downto 0);
    signal int_block_def_cnt_d0 : UNSIGNED(31 downto 0);
    signal int_block_def_cnt_q0 : UNSIGNED(31 downto 0);
    signal int_block_def_cnt_address1 : UNSIGNED(5 downto 0);
    signal int_block_def_cnt_ce1 : STD_LOGIC;
    signal int_block_def_cnt_we1 : STD_LOGIC;
    signal int_block_def_cnt_be1 : UNSIGNED(3 downto 0);
    signal int_block_def_cnt_d1 : UNSIGNED(31 downto 0);
    signal int_block_def_cnt_q1 : UNSIGNED(31 downto 0);
    signal int_block_def_cnt_read : STD_LOGIC;
    signal int_block_def_cnt_write : STD_LOGIC;
    signal int_ber_stats_raw_berr_address0 : UNSIGNED(4 downto 0);
    signal int_ber_stats_raw_berr_ce0 : STD_LOGIC;
    signal int_ber_stats_raw_berr_we0 : STD_LOGIC;
    signal int_ber_stats_raw_berr_be0 : UNSIGNED(3 downto 0);
    signal int_ber_stats_raw_berr_d0 : UNSIGNED(31 downto 0);
    signal int_ber_stats_raw_berr_q0 : UNSIGNED(31 downto 0);
    signal int_ber_stats_raw_berr_address1 : UNSIGNED(4 downto 0);
    signal int_ber_stats_raw_berr_ce1 : STD_LOGIC;
    signal int_ber_stats_raw_berr_we1 : STD_LOGIC;
    signal int_ber_stats_raw_berr_be1 : UNSIGNED(3 downto 0);
    signal int_ber_stats_raw_berr_d1 : UNSIGNED(31 downto 0);
    signal int_ber_stats_raw_berr_q1 : UNSIGNED(31 downto 0);
    signal int_ber_stats_raw_berr_read : STD_LOGIC;
    signal int_ber_stats_raw_berr_write : STD_LOGIC;
    signal int_ber_stats_cor_berr_address0 : UNSIGNED(4 downto 0);
    signal int_ber_stats_cor_berr_ce0 : STD_LOGIC;
    signal int_ber_stats_cor_berr_we0 : STD_LOGIC;
    signal int_ber_stats_cor_berr_be0 : UNSIGNED(3 downto 0);
    signal int_ber_stats_cor_berr_d0 : UNSIGNED(31 downto 0);
    signal int_ber_stats_cor_berr_q0 : UNSIGNED(31 downto 0);
    signal int_ber_stats_cor_berr_address1 : UNSIGNED(4 downto 0);
    signal int_ber_stats_cor_berr_ce1 : STD_LOGIC;
    signal int_ber_stats_cor_berr_we1 : STD_LOGIC;
    signal int_ber_stats_cor_berr_be1 : UNSIGNED(3 downto 0);
    signal int_ber_stats_cor_berr_d1 : UNSIGNED(31 downto 0);
    signal int_ber_stats_cor_berr_q1 : UNSIGNED(31 downto 0);
    signal int_ber_stats_cor_berr_read : STD_LOGIC;
    signal int_ber_stats_cor_berr_write : STD_LOGIC;
    signal int_ber_stats_cor_blerr_address0 : UNSIGNED(4 downto 0);
    signal int_ber_stats_cor_blerr_ce0 : STD_LOGIC;
    signal int_ber_stats_cor_blerr_we0 : STD_LOGIC;
    signal int_ber_stats_cor_blerr_be0 : UNSIGNED(3 downto 0);
    signal int_ber_stats_cor_blerr_d0 : UNSIGNED(31 downto 0);
    signal int_ber_stats_cor_blerr_q0 : UNSIGNED(31 downto 0);
    signal int_ber_stats_cor_blerr_address1 : UNSIGNED(4 downto 0);
    signal int_ber_stats_cor_blerr_ce1 : STD_LOGIC;
    signal int_ber_stats_cor_blerr_we1 : STD_LOGIC;
    signal int_ber_stats_cor_blerr_be1 : UNSIGNED(3 downto 0);
    signal int_ber_stats_cor_blerr_d1 : UNSIGNED(31 downto 0);
    signal int_ber_stats_cor_blerr_q1 : UNSIGNED(31 downto 0);
    signal int_ber_stats_cor_blerr_read : STD_LOGIC;
    signal int_ber_stats_cor_blerr_write : STD_LOGIC;
    signal int_ber_stats_iter_cnt_address0 : UNSIGNED(4 downto 0);
    signal int_ber_stats_iter_cnt_ce0 : STD_LOGIC;
    signal int_ber_stats_iter_cnt_we0 : STD_LOGIC;
    signal int_ber_stats_iter_cnt_be0 : UNSIGNED(3 downto 0);
    signal int_ber_stats_iter_cnt_d0 : UNSIGNED(31 downto 0);
    signal int_ber_stats_iter_cnt_q0 : UNSIGNED(31 downto 0);
    signal int_ber_stats_iter_cnt_address1 : UNSIGNED(4 downto 0);
    signal int_ber_stats_iter_cnt_ce1 : STD_LOGIC;
    signal int_ber_stats_iter_cnt_we1 : STD_LOGIC;
    signal int_ber_stats_iter_cnt_be1 : UNSIGNED(3 downto 0);
    signal int_ber_stats_iter_cnt_d1 : UNSIGNED(31 downto 0);
    signal int_ber_stats_iter_cnt_q1 : UNSIGNED(31 downto 0);
    signal int_ber_stats_iter_cnt_read : STD_LOGIC;
    signal int_ber_stats_iter_cnt_write : STD_LOGIC;
    signal int_ber_stats_block_cnt_address0 : UNSIGNED(4 downto 0);
    signal int_ber_stats_block_cnt_ce0 : STD_LOGIC;
    signal int_ber_stats_block_cnt_we0 : STD_LOGIC;
    signal int_ber_stats_block_cnt_be0 : UNSIGNED(3 downto 0);
    signal int_ber_stats_block_cnt_d0 : UNSIGNED(31 downto 0);
    signal int_ber_stats_block_cnt_q0 : UNSIGNED(31 downto 0);
    signal int_ber_stats_block_cnt_address1 : UNSIGNED(4 downto 0);
    signal int_ber_stats_block_cnt_ce1 : STD_LOGIC;
    signal int_ber_stats_block_cnt_we1 : STD_LOGIC;
    signal int_ber_stats_block_cnt_be1 : UNSIGNED(3 downto 0);
    signal int_ber_stats_block_cnt_d1 : UNSIGNED(31 downto 0);
    signal int_ber_stats_block_cnt_q1 : UNSIGNED(31 downto 0);
    signal int_ber_stats_block_cnt_read : STD_LOGIC;
    signal int_ber_stats_block_cnt_write : STD_LOGIC;

    component ber_stats_CNTRL_s_axi_ram is
        generic (
            BYTES   : INTEGER :=4;
            DEPTH   : INTEGER :=256;
            AWIDTH  : INTEGER :=8);
        port (
            clk0    : in  STD_LOGIC;
            address0: in  UNSIGNED(AWIDTH-1 downto 0);
            ce0     : in  STD_LOGIC;
            we0     : in  STD_LOGIC;
            be0     : in  UNSIGNED(BYTES-1 downto 0);
            d0      : in  UNSIGNED(BYTES*8-1 downto 0);
            q0      : out UNSIGNED(BYTES*8-1 downto 0);
            clk1    : in  STD_LOGIC;
            address1: in  UNSIGNED(AWIDTH-1 downto 0);
            ce1     : in  STD_LOGIC;
            we1     : in  STD_LOGIC;
            be1     : in  UNSIGNED(BYTES-1 downto 0);
            d1      : in  UNSIGNED(BYTES*8-1 downto 0);
            q1      : out UNSIGNED(BYTES*8-1 downto 0));
    end component ber_stats_CNTRL_s_axi_ram;

    function log2 (x : INTEGER) return INTEGER is
        variable n, m : INTEGER;
    begin
        n := 1;
        m := 2;
        while m < x loop
            n := n + 1;
            m := m * 2;
        end loop;
        return n;
    end function log2;

begin
-- ----------------------- Instantiation------------------
-- int_k
int_k : ber_stats_CNTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 32,
     AWIDTH   => log2(32))
port map (
     clk0     => ACLK,
     address0 => int_k_address0,
     ce0      => int_k_ce0,
     we0      => int_k_we0,
     be0      => int_k_be0,
     d0       => int_k_d0,
     q0       => int_k_q0,
     clk1     => clk,
     address1 => int_k_address1,
     ce1      => int_k_ce1,
     we1      => int_k_we1,
     be1      => int_k_be1,
     d1       => int_k_d1,
     q1       => int_k_q1);
-- int_n
int_n : ber_stats_CNTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 32,
     AWIDTH   => log2(32))
port map (
     clk0     => ACLK,
     address0 => int_n_address0,
     ce0      => int_n_ce0,
     we0      => int_n_we0,
     be0      => int_n_be0,
     d0       => int_n_d0,
     q0       => int_n_q0,
     clk1     => clk,
     address1 => int_n_address1,
     ce1      => int_n_ce1,
     we1      => int_n_we1,
     be1      => int_n_be1,
     d1       => int_n_d1,
     q1       => int_n_q1);
-- int_mask_V
int_mask_V : ber_stats_CNTRL_s_axi_ram
generic map (
     BYTES    => 16,
     DEPTH    => 32,
     AWIDTH   => log2(32))
port map (
     clk0     => ACLK,
     address0 => int_mask_V_address0,
     ce0      => int_mask_V_ce0,
     we0      => int_mask_V_we0,
     be0      => int_mask_V_be0,
     d0       => int_mask_V_d0,
     q0       => int_mask_V_q0,
     clk1     => clk,
     address1 => int_mask_V_address1,
     ce1      => int_mask_V_ce1,
     we1      => int_mask_V_we1,
     be1      => int_mask_V_be1,
     d1       => int_mask_V_d1,
     q1       => int_mask_V_q1);
-- int_block_def_cfg
int_block_def_cfg : ber_stats_CNTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 64,
     AWIDTH   => log2(64))
port map (
     clk0     => ACLK,
     address0 => int_block_def_cfg_address0,
     ce0      => int_block_def_cfg_ce0,
     we0      => int_block_def_cfg_we0,
     be0      => int_block_def_cfg_be0,
     d0       => int_block_def_cfg_d0,
     q0       => int_block_def_cfg_q0,
     clk1     => clk,
     address1 => int_block_def_cfg_address1,
     ce1      => int_block_def_cfg_ce1,
     we1      => int_block_def_cfg_we1,
     be1      => int_block_def_cfg_be1,
     d1       => int_block_def_cfg_d1,
     q1       => int_block_def_cfg_q1);
-- int_block_def_cnt
int_block_def_cnt : ber_stats_CNTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 64,
     AWIDTH   => log2(64))
port map (
     clk0     => ACLK,
     address0 => int_block_def_cnt_address0,
     ce0      => int_block_def_cnt_ce0,
     we0      => int_block_def_cnt_we0,
     be0      => int_block_def_cnt_be0,
     d0       => int_block_def_cnt_d0,
     q0       => int_block_def_cnt_q0,
     clk1     => clk,
     address1 => int_block_def_cnt_address1,
     ce1      => int_block_def_cnt_ce1,
     we1      => int_block_def_cnt_we1,
     be1      => int_block_def_cnt_be1,
     d1       => int_block_def_cnt_d1,
     q1       => int_block_def_cnt_q1);
-- int_ber_stats_raw_berr
int_ber_stats_raw_berr : ber_stats_CNTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 32,
     AWIDTH   => log2(32))
port map (
     clk0     => ACLK,
     address0 => int_ber_stats_raw_berr_address0,
     ce0      => int_ber_stats_raw_berr_ce0,
     we0      => int_ber_stats_raw_berr_we0,
     be0      => int_ber_stats_raw_berr_be0,
     d0       => int_ber_stats_raw_berr_d0,
     q0       => int_ber_stats_raw_berr_q0,
     clk1     => clk,
     address1 => int_ber_stats_raw_berr_address1,
     ce1      => int_ber_stats_raw_berr_ce1,
     we1      => int_ber_stats_raw_berr_we1,
     be1      => int_ber_stats_raw_berr_be1,
     d1       => int_ber_stats_raw_berr_d1,
     q1       => int_ber_stats_raw_berr_q1);
-- int_ber_stats_cor_berr
int_ber_stats_cor_berr : ber_stats_CNTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 32,
     AWIDTH   => log2(32))
port map (
     clk0     => ACLK,
     address0 => int_ber_stats_cor_berr_address0,
     ce0      => int_ber_stats_cor_berr_ce0,
     we0      => int_ber_stats_cor_berr_we0,
     be0      => int_ber_stats_cor_berr_be0,
     d0       => int_ber_stats_cor_berr_d0,
     q0       => int_ber_stats_cor_berr_q0,
     clk1     => clk,
     address1 => int_ber_stats_cor_berr_address1,
     ce1      => int_ber_stats_cor_berr_ce1,
     we1      => int_ber_stats_cor_berr_we1,
     be1      => int_ber_stats_cor_berr_be1,
     d1       => int_ber_stats_cor_berr_d1,
     q1       => int_ber_stats_cor_berr_q1);
-- int_ber_stats_cor_blerr
int_ber_stats_cor_blerr : ber_stats_CNTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 32,
     AWIDTH   => log2(32))
port map (
     clk0     => ACLK,
     address0 => int_ber_stats_cor_blerr_address0,
     ce0      => int_ber_stats_cor_blerr_ce0,
     we0      => int_ber_stats_cor_blerr_we0,
     be0      => int_ber_stats_cor_blerr_be0,
     d0       => int_ber_stats_cor_blerr_d0,
     q0       => int_ber_stats_cor_blerr_q0,
     clk1     => clk,
     address1 => int_ber_stats_cor_blerr_address1,
     ce1      => int_ber_stats_cor_blerr_ce1,
     we1      => int_ber_stats_cor_blerr_we1,
     be1      => int_ber_stats_cor_blerr_be1,
     d1       => int_ber_stats_cor_blerr_d1,
     q1       => int_ber_stats_cor_blerr_q1);
-- int_ber_stats_iter_cnt
int_ber_stats_iter_cnt : ber_stats_CNTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 32,
     AWIDTH   => log2(32))
port map (
     clk0     => ACLK,
     address0 => int_ber_stats_iter_cnt_address0,
     ce0      => int_ber_stats_iter_cnt_ce0,
     we0      => int_ber_stats_iter_cnt_we0,
     be0      => int_ber_stats_iter_cnt_be0,
     d0       => int_ber_stats_iter_cnt_d0,
     q0       => int_ber_stats_iter_cnt_q0,
     clk1     => clk,
     address1 => int_ber_stats_iter_cnt_address1,
     ce1      => int_ber_stats_iter_cnt_ce1,
     we1      => int_ber_stats_iter_cnt_we1,
     be1      => int_ber_stats_iter_cnt_be1,
     d1       => int_ber_stats_iter_cnt_d1,
     q1       => int_ber_stats_iter_cnt_q1);
-- int_ber_stats_block_cnt
int_ber_stats_block_cnt : ber_stats_CNTRL_s_axi_ram
generic map (
     BYTES    => 4,
     DEPTH    => 32,
     AWIDTH   => log2(32))
port map (
     clk0     => ACLK,
     address0 => int_ber_stats_block_cnt_address0,
     ce0      => int_ber_stats_block_cnt_ce0,
     we0      => int_ber_stats_block_cnt_we0,
     be0      => int_ber_stats_block_cnt_be0,
     d0       => int_ber_stats_block_cnt_d0,
     q0       => int_ber_stats_block_cnt_q0,
     clk1     => clk,
     address1 => int_ber_stats_block_cnt_address1,
     ce1      => int_ber_stats_block_cnt_ce1,
     we1      => int_ber_stats_block_cnt_we1,
     be1      => int_ber_stats_block_cnt_be1,
     d1       => int_ber_stats_block_cnt_d1,
     q1       => int_ber_stats_block_cnt_q1);

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                wstate <= wrreset;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) and (int_k_read = '0') and (int_n_read = '0') and (int_mask_V_read = '0') and (int_block_def_cfg_read = '0') and (int_block_def_cnt_read = '0') and (int_ber_stats_raw_berr_read = '0') and (int_ber_stats_cor_berr_read = '0') and (int_ber_stats_cor_blerr_read = '0') and (int_ber_stats_iter_cnt_read = '0') and (int_ber_stats_block_cnt_read = '0') else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                rstate <= rdreset;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_AP_CTRL =>
                        rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                    when ADDR_GIE =>
                        rdata_data <= (0 => int_gie, others => '0');
                    when ADDR_IER =>
                        rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                    when ADDR_ISR =>
                        rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                    when ADDR_NUM_DEFS_DATA_0 =>
                        rdata_data <= RESIZE(int_num_defs(31 downto 0), 32);
                    when ADDR_NUM_BLOCKS_DATA_0 =>
                        rdata_data <= RESIZE(int_num_blocks(31 downto 0), 32);
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                elsif (int_k_read = '1') then
                    rdata_data <= int_k_q1;
                elsif (int_n_read = '1') then
                    rdata_data <= int_n_q1;
                elsif (int_mask_V_read = '1') then
                    rdata_data <= RESIZE(SHIFT_RIGHT(int_mask_V_q1, TO_INTEGER(int_mask_V_shift)*32), 32);
                elsif (int_block_def_cfg_read = '1') then
                    rdata_data <= int_block_def_cfg_q1;
                elsif (int_block_def_cnt_read = '1') then
                    rdata_data <= int_block_def_cnt_q1;
                elsif (int_ber_stats_raw_berr_read = '1') then
                    rdata_data <= int_ber_stats_raw_berr_q1;
                elsif (int_ber_stats_cor_berr_read = '1') then
                    rdata_data <= int_ber_stats_cor_berr_q1;
                elsif (int_ber_stats_cor_blerr_read = '1') then
                    rdata_data <= int_ber_stats_cor_blerr_q1;
                elsif (int_ber_stats_iter_cnt_read = '1') then
                    rdata_data <= int_ber_stats_iter_cnt_q1;
                elsif (int_ber_stats_block_cnt_read = '1') then
                    rdata_data <= int_ber_stats_block_cnt_q1;
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;
    ap_start_set         <= '1' when w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1' else '0';
    ap_done_get          <= '1' when ar_hs = '1' and raddr = ADDR_AP_CTRL else '0';
    int_ap_idle          <= ap_idle;
    int_ap_ready         <= ap_ready;
    auto_restart_set     <= '1' when w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' else '0';
    isr_toggle           <= '1' when w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1' else '0';
    num_defs             <= STD_LOGIC_VECTOR(int_num_defs);
    num_blocks           <= STD_LOGIC_VECTOR(int_num_blocks);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (rst = '1') then
                ap_start_mask <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    ap_start_mask <= ap_start_set;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (rst = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_start_set = '1' and ap_start_mask = '0') then
                    int_ap_start <= '1';
                elsif (int_ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (rst = '1') then
                ap_done_ext <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    ap_done_ext <= ap_done_get;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (rst = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ap_done_get = '0' and ap_done_ext = '1') then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (rst = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (auto_restart_set = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (rst = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (rst = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (rst = '1') then
                isr_mask <= '1';
            elsif (ACLK_EN = '1') then
                if (true) then
                    isr_mask <= isr_toggle;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (rst = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (isr_toggle = '1' and isr_mask = '0') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (rst = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (isr_toggle = '1' and isr_mask = '0') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_NUM_DEFS_DATA_0) then
                    int_num_defs(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_num_defs(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_NUM_BLOCKS_DATA_0) then
                    int_num_blocks(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_num_blocks(31 downto 0));
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------
    -- k
    int_k_address0       <= UNSIGNED(k_address0);
    int_k_ce0            <= k_ce0;
    int_k_we0            <= '0';
    int_k_be0            <= (others => '0');
    int_k_d0             <= (others => '0');
    k_q0                 <= STD_LOGIC_VECTOR(RESIZE(int_k_q0, 32));
    int_k_address1       <= raddr(6 downto 2) when ar_hs = '1' else waddr(6 downto 2);
    int_k_ce1            <= '1' when ar_hs = '1' or (int_k_write = '1' and WVALID  = '1') else '0';
    int_k_we1            <= '1' when int_k_write = '1' and WVALID = '1' else '0';
    int_k_be1            <= UNSIGNED(WSTRB);
    int_k_d1             <= UNSIGNED(WDATA);
    -- n
    int_n_address0       <= UNSIGNED(n_address0);
    int_n_ce0            <= n_ce0;
    int_n_we0            <= '0';
    int_n_be0            <= (others => '0');
    int_n_d0             <= (others => '0');
    n_q0                 <= STD_LOGIC_VECTOR(RESIZE(int_n_q0, 32));
    int_n_address1       <= raddr(6 downto 2) when ar_hs = '1' else waddr(6 downto 2);
    int_n_ce1            <= '1' when ar_hs = '1' or (int_n_write = '1' and WVALID  = '1') else '0';
    int_n_we1            <= '1' when int_n_write = '1' and WVALID = '1' else '0';
    int_n_be1            <= UNSIGNED(WSTRB);
    int_n_d1             <= UNSIGNED(WDATA);
    -- mask_V
    int_mask_V_address0  <= UNSIGNED(mask_V_address0);
    int_mask_V_ce0       <= mask_V_ce0;
    int_mask_V_we0       <= '0';
    int_mask_V_be0       <= (others => '0');
    int_mask_V_d0        <= (others => '0');
    mask_V_q0            <= STD_LOGIC_VECTOR(RESIZE(int_mask_V_q0, 128));
    int_mask_V_address1  <= raddr(8 downto 4) when ar_hs = '1' else waddr(8 downto 4);
    int_mask_V_ce1       <= '1' when ar_hs = '1' or (int_mask_V_write = '1' and WVALID  = '1') else '0';
    int_mask_V_we1       <= '1' when int_mask_V_write = '1' and WVALID = '1' else '0';
    int_mask_V_be1       <= SHIFT_LEFT(RESIZE(UNSIGNED(WSTRB), 16), TO_INTEGER(waddr(3 downto 2)) * 4);
    int_mask_V_d1        <= RESIZE(UNSIGNED(WDATA) & UNSIGNED(WDATA) & UNSIGNED(WDATA) & UNSIGNED(WDATA), 128);
    -- block_def_cfg
    int_block_def_cfg_address0 <= UNSIGNED(block_def_cfg_address0);
    int_block_def_cfg_ce0 <= block_def_cfg_ce0;
    int_block_def_cfg_we0 <= '0';
    int_block_def_cfg_be0 <= (others => '0');
    int_block_def_cfg_d0 <= (others => '0');
    block_def_cfg_q0     <= STD_LOGIC_VECTOR(RESIZE(int_block_def_cfg_q0, 32));
    int_block_def_cfg_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_block_def_cfg_ce1 <= '1' when ar_hs = '1' or (int_block_def_cfg_write = '1' and WVALID  = '1') else '0';
    int_block_def_cfg_we1 <= '1' when int_block_def_cfg_write = '1' and WVALID = '1' else '0';
    int_block_def_cfg_be1 <= UNSIGNED(WSTRB);
    int_block_def_cfg_d1 <= UNSIGNED(WDATA);
    -- block_def_cnt
    int_block_def_cnt_address0 <= UNSIGNED(block_def_cnt_address0);
    int_block_def_cnt_ce0 <= block_def_cnt_ce0;
    int_block_def_cnt_we0 <= '0';
    int_block_def_cnt_be0 <= (others => '0');
    int_block_def_cnt_d0 <= (others => '0');
    block_def_cnt_q0     <= STD_LOGIC_VECTOR(RESIZE(int_block_def_cnt_q0, 32));
    int_block_def_cnt_address1 <= raddr(7 downto 2) when ar_hs = '1' else waddr(7 downto 2);
    int_block_def_cnt_ce1 <= '1' when ar_hs = '1' or (int_block_def_cnt_write = '1' and WVALID  = '1') else '0';
    int_block_def_cnt_we1 <= '1' when int_block_def_cnt_write = '1' and WVALID = '1' else '0';
    int_block_def_cnt_be1 <= UNSIGNED(WSTRB);
    int_block_def_cnt_d1 <= UNSIGNED(WDATA);
    -- ber_stats_raw_berr
    int_ber_stats_raw_berr_address0 <= UNSIGNED(ber_stats_raw_berr_address0);
    int_ber_stats_raw_berr_ce0 <= ber_stats_raw_berr_ce0;
    int_ber_stats_raw_berr_we0 <= ber_stats_raw_berr_we0;
    int_ber_stats_raw_berr_be0 <= (others => ber_stats_raw_berr_we0);
    int_ber_stats_raw_berr_d0 <= RESIZE(UNSIGNED(ber_stats_raw_berr_d0), 32);
    ber_stats_raw_berr_q0 <= STD_LOGIC_VECTOR(RESIZE(int_ber_stats_raw_berr_q0, 32));
    int_ber_stats_raw_berr_address1 <= raddr(6 downto 2) when ar_hs = '1' else waddr(6 downto 2);
    int_ber_stats_raw_berr_ce1 <= '1' when ar_hs = '1' or (int_ber_stats_raw_berr_write = '1' and WVALID  = '1') else '0';
    int_ber_stats_raw_berr_we1 <= '1' when int_ber_stats_raw_berr_write = '1' and WVALID = '1' else '0';
    int_ber_stats_raw_berr_be1 <= UNSIGNED(WSTRB);
    int_ber_stats_raw_berr_d1 <= UNSIGNED(WDATA);
    -- ber_stats_cor_berr
    int_ber_stats_cor_berr_address0 <= UNSIGNED(ber_stats_cor_berr_address0);
    int_ber_stats_cor_berr_ce0 <= ber_stats_cor_berr_ce0;
    int_ber_stats_cor_berr_we0 <= ber_stats_cor_berr_we0;
    int_ber_stats_cor_berr_be0 <= (others => ber_stats_cor_berr_we0);
    int_ber_stats_cor_berr_d0 <= RESIZE(UNSIGNED(ber_stats_cor_berr_d0), 32);
    ber_stats_cor_berr_q0 <= STD_LOGIC_VECTOR(RESIZE(int_ber_stats_cor_berr_q0, 32));
    int_ber_stats_cor_berr_address1 <= raddr(6 downto 2) when ar_hs = '1' else waddr(6 downto 2);
    int_ber_stats_cor_berr_ce1 <= '1' when ar_hs = '1' or (int_ber_stats_cor_berr_write = '1' and WVALID  = '1') else '0';
    int_ber_stats_cor_berr_we1 <= '1' when int_ber_stats_cor_berr_write = '1' and WVALID = '1' else '0';
    int_ber_stats_cor_berr_be1 <= UNSIGNED(WSTRB);
    int_ber_stats_cor_berr_d1 <= UNSIGNED(WDATA);
    -- ber_stats_cor_blerr
    int_ber_stats_cor_blerr_address0 <= UNSIGNED(ber_stats_cor_blerr_address0);
    int_ber_stats_cor_blerr_ce0 <= ber_stats_cor_blerr_ce0;
    int_ber_stats_cor_blerr_we0 <= ber_stats_cor_blerr_we0;
    int_ber_stats_cor_blerr_be0 <= (others => ber_stats_cor_blerr_we0);
    int_ber_stats_cor_blerr_d0 <= RESIZE(UNSIGNED(ber_stats_cor_blerr_d0), 32);
    ber_stats_cor_blerr_q0 <= STD_LOGIC_VECTOR(RESIZE(int_ber_stats_cor_blerr_q0, 32));
    int_ber_stats_cor_blerr_address1 <= raddr(6 downto 2) when ar_hs = '1' else waddr(6 downto 2);
    int_ber_stats_cor_blerr_ce1 <= '1' when ar_hs = '1' or (int_ber_stats_cor_blerr_write = '1' and WVALID  = '1') else '0';
    int_ber_stats_cor_blerr_we1 <= '1' when int_ber_stats_cor_blerr_write = '1' and WVALID = '1' else '0';
    int_ber_stats_cor_blerr_be1 <= UNSIGNED(WSTRB);
    int_ber_stats_cor_blerr_d1 <= UNSIGNED(WDATA);
    -- ber_stats_iter_cnt
    int_ber_stats_iter_cnt_address0 <= UNSIGNED(ber_stats_iter_cnt_address0);
    int_ber_stats_iter_cnt_ce0 <= ber_stats_iter_cnt_ce0;
    int_ber_stats_iter_cnt_we0 <= ber_stats_iter_cnt_we0;
    int_ber_stats_iter_cnt_be0 <= (others => ber_stats_iter_cnt_we0);
    int_ber_stats_iter_cnt_d0 <= RESIZE(UNSIGNED(ber_stats_iter_cnt_d0), 32);
    ber_stats_iter_cnt_q0 <= STD_LOGIC_VECTOR(RESIZE(int_ber_stats_iter_cnt_q0, 32));
    int_ber_stats_iter_cnt_address1 <= raddr(6 downto 2) when ar_hs = '1' else waddr(6 downto 2);
    int_ber_stats_iter_cnt_ce1 <= '1' when ar_hs = '1' or (int_ber_stats_iter_cnt_write = '1' and WVALID  = '1') else '0';
    int_ber_stats_iter_cnt_we1 <= '1' when int_ber_stats_iter_cnt_write = '1' and WVALID = '1' else '0';
    int_ber_stats_iter_cnt_be1 <= UNSIGNED(WSTRB);
    int_ber_stats_iter_cnt_d1 <= UNSIGNED(WDATA);
    -- ber_stats_block_cnt
    int_ber_stats_block_cnt_address0 <= UNSIGNED(ber_stats_block_cnt_address0);
    int_ber_stats_block_cnt_ce0 <= ber_stats_block_cnt_ce0;
    int_ber_stats_block_cnt_we0 <= ber_stats_block_cnt_we0;
    int_ber_stats_block_cnt_be0 <= (others => ber_stats_block_cnt_we0);
    int_ber_stats_block_cnt_d0 <= RESIZE(UNSIGNED(ber_stats_block_cnt_d0), 32);
    ber_stats_block_cnt_q0 <= STD_LOGIC_VECTOR(RESIZE(int_ber_stats_block_cnt_q0, 32));
    int_ber_stats_block_cnt_address1 <= raddr(6 downto 2) when ar_hs = '1' else waddr(6 downto 2);
    int_ber_stats_block_cnt_ce1 <= '1' when ar_hs = '1' or (int_ber_stats_block_cnt_write = '1' and WVALID  = '1') else '0';
    int_ber_stats_block_cnt_we1 <= '1' when int_ber_stats_block_cnt_write = '1' and WVALID = '1' else '0';
    int_ber_stats_block_cnt_be1 <= UNSIGNED(WSTRB);
    int_ber_stats_block_cnt_d1 <= UNSIGNED(WDATA);

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_k_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_K_BASE and raddr <= ADDR_K_HIGH) then
                    int_k_read <= '1';
                else
                    int_k_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_k_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_K_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_K_HIGH) then
                    int_k_write <= '1';
                elsif (WVALID = '1') then
                    int_k_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_n_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_N_BASE and raddr <= ADDR_N_HIGH) then
                    int_n_read <= '1';
                else
                    int_n_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_n_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_N_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_N_HIGH) then
                    int_n_write <= '1';
                elsif (WVALID = '1') then
                    int_n_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_mask_V_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_MASK_V_BASE and raddr <= ADDR_MASK_V_HIGH) then
                    int_mask_V_read <= '1';
                else
                    int_mask_V_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_mask_V_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_MASK_V_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_MASK_V_HIGH) then
                    int_mask_V_write <= '1';
                elsif (WVALID = '1') then
                    int_mask_V_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    int_mask_V_shift <= raddr(3 downto 2);
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_block_def_cfg_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BLOCK_DEF_CFG_BASE and raddr <= ADDR_BLOCK_DEF_CFG_HIGH) then
                    int_block_def_cfg_read <= '1';
                else
                    int_block_def_cfg_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_block_def_cfg_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BLOCK_DEF_CFG_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BLOCK_DEF_CFG_HIGH) then
                    int_block_def_cfg_write <= '1';
                elsif (WVALID = '1') then
                    int_block_def_cfg_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_block_def_cnt_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BLOCK_DEF_CNT_BASE and raddr <= ADDR_BLOCK_DEF_CNT_HIGH) then
                    int_block_def_cnt_read <= '1';
                else
                    int_block_def_cnt_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_block_def_cnt_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BLOCK_DEF_CNT_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BLOCK_DEF_CNT_HIGH) then
                    int_block_def_cnt_write <= '1';
                elsif (WVALID = '1') then
                    int_block_def_cnt_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_ber_stats_raw_berr_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BER_STATS_RAW_BERR_BASE and raddr <= ADDR_BER_STATS_RAW_BERR_HIGH) then
                    int_ber_stats_raw_berr_read <= '1';
                else
                    int_ber_stats_raw_berr_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_ber_stats_raw_berr_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BER_STATS_RAW_BERR_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BER_STATS_RAW_BERR_HIGH) then
                    int_ber_stats_raw_berr_write <= '1';
                elsif (WVALID = '1') then
                    int_ber_stats_raw_berr_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_ber_stats_cor_berr_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BER_STATS_COR_BERR_BASE and raddr <= ADDR_BER_STATS_COR_BERR_HIGH) then
                    int_ber_stats_cor_berr_read <= '1';
                else
                    int_ber_stats_cor_berr_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_ber_stats_cor_berr_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BER_STATS_COR_BERR_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BER_STATS_COR_BERR_HIGH) then
                    int_ber_stats_cor_berr_write <= '1';
                elsif (WVALID = '1') then
                    int_ber_stats_cor_berr_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_ber_stats_cor_blerr_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BER_STATS_COR_BLERR_BASE and raddr <= ADDR_BER_STATS_COR_BLERR_HIGH) then
                    int_ber_stats_cor_blerr_read <= '1';
                else
                    int_ber_stats_cor_blerr_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_ber_stats_cor_blerr_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BER_STATS_COR_BLERR_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BER_STATS_COR_BLERR_HIGH) then
                    int_ber_stats_cor_blerr_write <= '1';
                elsif (WVALID = '1') then
                    int_ber_stats_cor_blerr_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_ber_stats_iter_cnt_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BER_STATS_ITER_CNT_BASE and raddr <= ADDR_BER_STATS_ITER_CNT_HIGH) then
                    int_ber_stats_iter_cnt_read <= '1';
                else
                    int_ber_stats_iter_cnt_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_ber_stats_iter_cnt_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BER_STATS_ITER_CNT_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BER_STATS_ITER_CNT_HIGH) then
                    int_ber_stats_iter_cnt_write <= '1';
                elsif (WVALID = '1') then
                    int_ber_stats_iter_cnt_write <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_ber_stats_block_cnt_read <= '0';
            elsif (ACLK_EN = '1') then
                if (ar_hs = '1' and raddr >= ADDR_BER_STATS_BLOCK_CNT_BASE and raddr <= ADDR_BER_STATS_BLOCK_CNT_HIGH) then
                    int_ber_stats_block_cnt_read <= '1';
                else
                    int_ber_stats_block_cnt_read <= '0';
                end if;
            end if;
        end if;
    end process;

    process (clk)
    begin
        if (clk'event and clk = '1') then
            if (ARESET = '1') then
                int_ber_stats_block_cnt_write <= '0';
            elsif (ACLK_EN = '1') then
                if (aw_hs = '1' and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) >= ADDR_BER_STATS_BLOCK_CNT_BASE and UNSIGNED(AWADDR(ADDR_BITS-1 downto 0)) <= ADDR_BER_STATS_BLOCK_CNT_HIGH) then
                    int_ber_stats_block_cnt_write <= '1';
                elsif (WVALID = '1') then
                    int_ber_stats_block_cnt_write <= '0';
                end if;
            end if;
        end if;
    end process;


end architecture behave;

library IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.all;

entity ber_stats_CNTRL_s_axi_ram is
    generic (
        BYTES   : INTEGER :=4;
        DEPTH   : INTEGER :=256;
        AWIDTH  : INTEGER :=8);
    port (
        clk0    : in  STD_LOGIC;
        address0: in  UNSIGNED(AWIDTH-1 downto 0);
        ce0     : in  STD_LOGIC;
        we0     : in  STD_LOGIC;
        be0     : in  UNSIGNED(BYTES-1 downto 0);
        d0      : in  UNSIGNED(BYTES*8-1 downto 0);
        q0      : out UNSIGNED(BYTES*8-1 downto 0);
        clk1    : in  STD_LOGIC;
        address1: in  UNSIGNED(AWIDTH-1 downto 0);
        ce1     : in  STD_LOGIC;
        we1     : in  STD_LOGIC;
        be1     : in  UNSIGNED(BYTES-1 downto 0);
        d1      : in  UNSIGNED(BYTES*8-1 downto 0);
        q1      : out UNSIGNED(BYTES*8-1 downto 0));

end entity ber_stats_CNTRL_s_axi_ram;

architecture behave of ber_stats_CNTRL_s_axi_ram is
    signal address0_tmp : UNSIGNED(AWIDTH-1 downto 0);
    signal address1_tmp : UNSIGNED(AWIDTH-1 downto 0);
    type RAM_T is array (0 to DEPTH - 1) of UNSIGNED(BYTES*8 - 1 downto 0);
    shared variable mem : RAM_T := (others => (others => '0'));
begin

    process (address0)
    begin
    address0_tmp <= address0;
    --synthesis translate_off
          if (address0 > DEPTH-1) then
              address0_tmp <= (others => '0');
          else
              address0_tmp <= address0;
          end if;
    --synthesis translate_on
    end process;

    process (address1)
    begin
    address1_tmp <= address1;
    --synthesis translate_off
          if (address1 > DEPTH-1) then
              address1_tmp <= (others => '0');
          else
              address1_tmp <= address1;
          end if;
    --synthesis translate_on
    end process;

    --read port 0
    process (clk0) begin
        if (clk0'event and clk0 = '1') then
            if (ce0 = '1') then
                q0 <= mem(to_integer(address0_tmp));
            end if;
        end if;
    end process;

    --read port 1
    process (clk1) begin
        if (clk1'event and clk1 = '1') then
            if (ce1 = '1') then
                q1 <= mem(to_integer(address1_tmp));
            end if;
        end if;
    end process;

    gen_write : for i in 0 to BYTES - 1 generate
    begin
        --write port 0
        process (clk0)
        begin
            if (clk0'event and clk0 = '1') then
                if (ce0 = '1' and we0 = '1' and be0(i) = '1') then
                    mem(to_integer(address0_tmp))(8*i+7 downto 8*i) := d0(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

        --write port 1
        process (clk1)
        begin
            if (clk1'event and clk1 = '1') then
                if (ce1 = '1' and we1 = '1' and be1(i) = '1') then
                    mem(to_integer(address1_tmp))(8*i+7 downto 8*i) := d1(8*i+7 downto 8*i);
                end if;
            end if;
        end process;

    end generate;

end architecture behave;


