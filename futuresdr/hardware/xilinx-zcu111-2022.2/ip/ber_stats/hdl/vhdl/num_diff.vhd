-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity num_diff is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    in1_V : IN STD_LOGIC_VECTOR (127 downto 0);
    in2_V : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of num_diff is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal bit_cnt_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce0 : STD_LOGIC;
    signal bit_cnt_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce1 : STD_LOGIC;
    signal bit_cnt_V_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce2 : STD_LOGIC;
    signal bit_cnt_V_q2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce3 : STD_LOGIC;
    signal bit_cnt_V_q3 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_225 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal reg_230 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_241_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_reg_618 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_reg_628 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_reg_633 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_reg_638 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_reg_643 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_8_reg_648 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_reg_653 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_reg_658 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_10_reg_663 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_11_reg_668 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_12_reg_673 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_13_reg_678 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter1_p_Result_13_reg_678 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_reg_683 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter1_p_Result_14_reg_683 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_load_2_reg_708 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_3_reg_713 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_6_reg_738 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_7_reg_743 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_fu_451_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_reg_768 : STD_LOGIC_VECTOR (4 downto 0);
    signal bit_cnt_V_load_8_reg_773 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_9_reg_778 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_10_reg_783 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_11_reg_788 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_2_fu_480_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_2_reg_803 : STD_LOGIC_VECTOR (5 downto 0);
    signal bit_cnt_V_load_12_reg_808 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_13_reg_813 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_4_fu_503_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_4_reg_818 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_6_fu_520_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_6_reg_823 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_8_fu_541_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_8_reg_828 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_11_fu_566_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_11_reg_843 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_13_fu_583_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_13_reg_848 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal tmp_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_403_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_461_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_551_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_16_fu_235_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal rhs_V_cast_fu_447_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_cast_fu_443_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_V_1_cast_fu_468_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_1_cast_fu_465_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_2_cast_fu_477_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_1_fu_471_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_3_cast_fu_489_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lhs_V_3_cast_fu_486_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_4_cast_fu_499_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_3_fu_493_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_5_cast_fu_509_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_6_cast_fu_517_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_5_fu_512_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_7_cast_fu_529_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_7_cast_fu_526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_8_cast_fu_538_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_7_fu_532_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_9_cast_fu_555_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_10_cast_fu_563_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_9_fu_558_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_11_cast_fu_572_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_12_cast_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_12_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_13_cast_fu_589_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_14_cast_fu_598_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_14_fu_593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component num_diff_bit_cnt_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    bit_cnt_V_U : component num_diff_bit_cnt_V
    generic map (
        DataWidth => 4,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit_cnt_V_address0,
        ce0 => bit_cnt_V_ce0,
        q0 => bit_cnt_V_q0,
        address1 => bit_cnt_V_address1,
        ce1 => bit_cnt_V_ce1,
        q1 => bit_cnt_V_q1,
        address2 => bit_cnt_V_address2,
        ce2 => bit_cnt_V_ce2,
        q2 => bit_cnt_V_q2,
        address3 => bit_cnt_V_address3,
        ce3 => bit_cnt_V_ce3,
        q3 => bit_cnt_V_q3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_ce = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_ce = ap_const_logic_1)) then
                    if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
                        ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                reg_225 <= bit_cnt_V_q2;
            elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_ce = ap_const_logic_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                reg_225 <= bit_cnt_V_q0;
            end if; 
        end if;
    end process;

    reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
                reg_230 <= bit_cnt_V_q3;
            elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_ce = ap_const_logic_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                reg_230 <= bit_cnt_V_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))))) then
                ap_reg_pp0_iter1_p_Result_13_reg_678 <= p_Result_13_reg_678;
                ap_reg_pp0_iter1_p_Result_14_reg_683 <= p_Result_14_reg_683;
                p_Result_10_reg_663 <= r_V_16_fu_235_p2(95 downto 88);
                p_Result_11_reg_668 <= r_V_16_fu_235_p2(103 downto 96);
                p_Result_12_reg_673 <= r_V_16_fu_235_p2(111 downto 104);
                p_Result_13_reg_678 <= r_V_16_fu_235_p2(119 downto 112);
                p_Result_14_reg_683 <= r_V_16_fu_235_p2(127 downto 120);
                p_Result_1_reg_613 <= r_V_16_fu_235_p2(15 downto 8);
                p_Result_2_reg_618 <= r_V_16_fu_235_p2(23 downto 16);
                p_Result_3_reg_623 <= r_V_16_fu_235_p2(31 downto 24);
                p_Result_4_reg_628 <= r_V_16_fu_235_p2(39 downto 32);
                p_Result_5_reg_633 <= r_V_16_fu_235_p2(47 downto 40);
                p_Result_6_reg_638 <= r_V_16_fu_235_p2(55 downto 48);
                p_Result_7_reg_643 <= r_V_16_fu_235_p2(63 downto 56);
                p_Result_8_reg_648 <= r_V_16_fu_235_p2(71 downto 64);
                p_Result_9_reg_653 <= r_V_16_fu_235_p2(79 downto 72);
                p_Result_s_reg_658 <= r_V_16_fu_235_p2(87 downto 80);
                r_V_11_reg_843 <= r_V_11_fu_566_p2;
                r_V_2_reg_803 <= r_V_2_fu_480_p2;
                tmp_15_reg_608 <= tmp_15_fu_241_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                bit_cnt_V_load_10_reg_783 <= bit_cnt_V_q2;
                bit_cnt_V_load_11_reg_788 <= bit_cnt_V_q3;
                bit_cnt_V_load_8_reg_773 <= bit_cnt_V_q0;
                bit_cnt_V_load_9_reg_778 <= bit_cnt_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then
                bit_cnt_V_load_12_reg_808 <= bit_cnt_V_q0;
                bit_cnt_V_load_13_reg_813 <= bit_cnt_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                bit_cnt_V_load_2_reg_708 <= bit_cnt_V_q2;
                bit_cnt_V_load_3_reg_713 <= bit_cnt_V_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_ce = ap_const_logic_1))) then
                bit_cnt_V_load_6_reg_738 <= bit_cnt_V_q2;
                bit_cnt_V_load_7_reg_743 <= bit_cnt_V_q3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                r_V_13_reg_848 <= r_V_13_fu_583_p2;
                r_V_4_reg_818 <= r_V_4_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                r_V_6_reg_823 <= r_V_6_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_ce = ap_const_logic_1))) then
                r_V_8_reg_828 <= r_V_8_fu_541_p2;
                r_V_reg_768 <= r_V_fu_451_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_ce, ap_idle_pp0_1to2, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_ce = ap_const_logic_0) or ((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_1to2))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_ce = ap_const_logic_1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_ce = ap_const_logic_1) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_reset_idle_pp0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_ce = ap_const_logic_1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_ce, ap_CS_fsm_pp0_stage2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_ce = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_0to1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(rhs_V_14_cast_fu_598_p1) + unsigned(r_V_14_fu_593_p2));

    bit_cnt_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, tmp_fu_395_p1, tmp_4_fu_411_p1, tmp_8_fu_427_p1, tmp_11_fu_457_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            bit_cnt_V_address0 <= tmp_11_fu_457_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            bit_cnt_V_address0 <= tmp_8_fu_427_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            bit_cnt_V_address0 <= tmp_4_fu_411_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bit_cnt_V_address0 <= tmp_fu_395_p1(8 - 1 downto 0);
        else 
            bit_cnt_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    bit_cnt_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, tmp_1_fu_399_p1, tmp_5_fu_415_p1, tmp_9_fu_431_p1, tmp_12_fu_461_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            bit_cnt_V_address1 <= tmp_12_fu_461_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            bit_cnt_V_address1 <= tmp_9_fu_431_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            bit_cnt_V_address1 <= tmp_5_fu_415_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bit_cnt_V_address1 <= tmp_1_fu_399_p1(8 - 1 downto 0);
        else 
            bit_cnt_V_address1 <= "XXXXXXXX";
        end if; 
    end process;


    bit_cnt_V_address2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, tmp_2_fu_403_p1, tmp_6_fu_419_p1, tmp_s_fu_435_p1, tmp_13_fu_547_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            bit_cnt_V_address2 <= tmp_13_fu_547_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            bit_cnt_V_address2 <= tmp_s_fu_435_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            bit_cnt_V_address2 <= tmp_6_fu_419_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bit_cnt_V_address2 <= tmp_2_fu_403_p1(8 - 1 downto 0);
        else 
            bit_cnt_V_address2 <= "XXXXXXXX";
        end if; 
    end process;


    bit_cnt_V_address3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, tmp_3_fu_407_p1, tmp_7_fu_423_p1, tmp_10_fu_439_p1, tmp_14_fu_551_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            bit_cnt_V_address3 <= tmp_14_fu_551_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            bit_cnt_V_address3 <= tmp_10_fu_439_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            bit_cnt_V_address3 <= tmp_7_fu_423_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bit_cnt_V_address3 <= tmp_3_fu_407_p1(8 - 1 downto 0);
        else 
            bit_cnt_V_address3 <= "XXXXXXXX";
        end if; 
    end process;


    bit_cnt_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_ce = ap_const_logic_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            bit_cnt_V_ce0 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_ce = ap_const_logic_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            bit_cnt_V_ce1 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce2_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_ce = ap_const_logic_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))))) then 
            bit_cnt_V_ce2 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce3_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_ce, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_ce = ap_const_logic_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))))) then 
            bit_cnt_V_ce3 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_1_cast_fu_465_p1 <= std_logic_vector(resize(unsigned(r_V_reg_768),6));
    lhs_V_3_cast_fu_486_p1 <= std_logic_vector(resize(unsigned(r_V_2_reg_803),7));
    lhs_V_7_cast_fu_526_p1 <= std_logic_vector(resize(unsigned(r_V_6_reg_823),8));
    lhs_V_cast_fu_443_p1 <= std_logic_vector(resize(unsigned(reg_225),5));
    r_V_11_fu_566_p2 <= std_logic_vector(unsigned(rhs_V_10_cast_fu_563_p1) + unsigned(r_V_9_fu_558_p2));
    r_V_12_fu_575_p2 <= std_logic_vector(unsigned(rhs_V_11_cast_fu_572_p1) + unsigned(r_V_11_reg_843));
    r_V_13_fu_583_p2 <= std_logic_vector(unsigned(rhs_V_12_cast_fu_580_p1) + unsigned(r_V_12_fu_575_p2));
    r_V_14_fu_593_p2 <= std_logic_vector(unsigned(rhs_V_13_cast_fu_589_p1) + unsigned(r_V_13_reg_848));
    r_V_16_fu_235_p2 <= (in2_V xor in1_V);
    r_V_1_fu_471_p2 <= std_logic_vector(unsigned(rhs_V_1_cast_fu_468_p1) + unsigned(lhs_V_1_cast_fu_465_p1));
    r_V_2_fu_480_p2 <= std_logic_vector(unsigned(rhs_V_2_cast_fu_477_p1) + unsigned(r_V_1_fu_471_p2));
    r_V_3_fu_493_p2 <= std_logic_vector(unsigned(rhs_V_3_cast_fu_489_p1) + unsigned(lhs_V_3_cast_fu_486_p1));
    r_V_4_fu_503_p2 <= std_logic_vector(unsigned(rhs_V_4_cast_fu_499_p1) + unsigned(r_V_3_fu_493_p2));
    r_V_5_fu_512_p2 <= std_logic_vector(unsigned(rhs_V_5_cast_fu_509_p1) + unsigned(r_V_4_reg_818));
    r_V_6_fu_520_p2 <= std_logic_vector(unsigned(rhs_V_6_cast_fu_517_p1) + unsigned(r_V_5_fu_512_p2));
    r_V_7_fu_532_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_fu_529_p1) + unsigned(lhs_V_7_cast_fu_526_p1));
    r_V_8_fu_541_p2 <= std_logic_vector(unsigned(rhs_V_8_cast_fu_538_p1) + unsigned(r_V_7_fu_532_p2));
    r_V_9_fu_558_p2 <= std_logic_vector(unsigned(rhs_V_9_cast_fu_555_p1) + unsigned(r_V_8_reg_828));
    r_V_fu_451_p2 <= std_logic_vector(unsigned(rhs_V_cast_fu_447_p1) + unsigned(lhs_V_cast_fu_443_p1));
    rhs_V_10_cast_fu_563_p1 <= std_logic_vector(resize(unsigned(bit_cnt_V_load_11_reg_788),8));
    rhs_V_11_cast_fu_572_p1 <= std_logic_vector(resize(unsigned(bit_cnt_V_load_12_reg_808),8));
    rhs_V_12_cast_fu_580_p1 <= std_logic_vector(resize(unsigned(bit_cnt_V_load_13_reg_813),8));
    rhs_V_13_cast_fu_589_p1 <= std_logic_vector(resize(unsigned(reg_225),8));
    rhs_V_14_cast_fu_598_p1 <= std_logic_vector(resize(unsigned(reg_230),8));
    rhs_V_1_cast_fu_468_p1 <= std_logic_vector(resize(unsigned(bit_cnt_V_load_2_reg_708),6));
    rhs_V_2_cast_fu_477_p1 <= std_logic_vector(resize(unsigned(bit_cnt_V_load_3_reg_713),6));
    rhs_V_3_cast_fu_489_p1 <= std_logic_vector(resize(unsigned(reg_225),7));
    rhs_V_4_cast_fu_499_p1 <= std_logic_vector(resize(unsigned(reg_230),7));
    rhs_V_5_cast_fu_509_p1 <= std_logic_vector(resize(unsigned(bit_cnt_V_load_6_reg_738),7));
    rhs_V_6_cast_fu_517_p1 <= std_logic_vector(resize(unsigned(bit_cnt_V_load_7_reg_743),7));
    rhs_V_7_cast_fu_529_p1 <= std_logic_vector(resize(unsigned(bit_cnt_V_load_8_reg_773),8));
    rhs_V_8_cast_fu_538_p1 <= std_logic_vector(resize(unsigned(bit_cnt_V_load_9_reg_778),8));
    rhs_V_9_cast_fu_555_p1 <= std_logic_vector(resize(unsigned(bit_cnt_V_load_10_reg_783),8));
    rhs_V_cast_fu_447_p1 <= std_logic_vector(resize(unsigned(reg_230),5));
    tmp_10_fu_439_p1 <= std_logic_vector(resize(unsigned(p_Result_10_reg_663),64));
    tmp_11_fu_457_p1 <= std_logic_vector(resize(unsigned(p_Result_11_reg_668),64));
    tmp_12_fu_461_p1 <= std_logic_vector(resize(unsigned(p_Result_12_reg_673),64));
    tmp_13_fu_547_p1 <= std_logic_vector(resize(unsigned(ap_reg_pp0_iter1_p_Result_13_reg_678),64));
    tmp_14_fu_551_p1 <= std_logic_vector(resize(unsigned(ap_reg_pp0_iter1_p_Result_14_reg_683),64));
    tmp_15_fu_241_p1 <= r_V_16_fu_235_p2(8 - 1 downto 0);
    tmp_1_fu_399_p1 <= std_logic_vector(resize(unsigned(p_Result_1_reg_613),64));
    tmp_2_fu_403_p1 <= std_logic_vector(resize(unsigned(p_Result_2_reg_618),64));
    tmp_3_fu_407_p1 <= std_logic_vector(resize(unsigned(p_Result_3_reg_623),64));
    tmp_4_fu_411_p1 <= std_logic_vector(resize(unsigned(p_Result_4_reg_628),64));
    tmp_5_fu_415_p1 <= std_logic_vector(resize(unsigned(p_Result_5_reg_633),64));
    tmp_6_fu_419_p1 <= std_logic_vector(resize(unsigned(p_Result_6_reg_638),64));
    tmp_7_fu_423_p1 <= std_logic_vector(resize(unsigned(p_Result_7_reg_643),64));
    tmp_8_fu_427_p1 <= std_logic_vector(resize(unsigned(p_Result_8_reg_648),64));
    tmp_9_fu_431_p1 <= std_logic_vector(resize(unsigned(p_Result_9_reg_653),64));
    tmp_fu_395_p1 <= std_logic_vector(resize(unsigned(tmp_15_reg_608),64));
    tmp_s_fu_435_p1 <= std_logic_vector(resize(unsigned(p_Result_s_reg_658),64));
end behav;
