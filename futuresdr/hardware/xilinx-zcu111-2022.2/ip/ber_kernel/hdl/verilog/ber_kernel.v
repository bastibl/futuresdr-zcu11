// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ber_kernel,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e-es1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=38,HLS_SYN_DSP=24,HLS_SYN_FF=10303,HLS_SYN_LUT=11594}" *)

module ber_kernel (
        ap_clk,
        ap_rst_n,
        src_data_V_V_TDATA,
        src_data_V_V_TVALID,
        src_data_V_V_TREADY,
        soft_data_TDATA,
        soft_data_TVALID,
        soft_data_TREADY,
        soft_data_TLAST,
        soft_words_TDATA,
        soft_words_TVALID,
        soft_words_TREADY,
        soft_words_TLAST,
        fe_ctrl_V_V_TDATA,
        fe_ctrl_V_V_TVALID,
        fe_ctrl_V_V_TREADY,
        hard_words_TDATA,
        hard_words_TVALID,
        hard_words_TREADY,
        hard_words_TLAST,
        s_axi_CNTRL_AWVALID,
        s_axi_CNTRL_AWREADY,
        s_axi_CNTRL_AWADDR,
        s_axi_CNTRL_WVALID,
        s_axi_CNTRL_WREADY,
        s_axi_CNTRL_WDATA,
        s_axi_CNTRL_WSTRB,
        s_axi_CNTRL_ARVALID,
        s_axi_CNTRL_ARREADY,
        s_axi_CNTRL_ARADDR,
        s_axi_CNTRL_RVALID,
        s_axi_CNTRL_RREADY,
        s_axi_CNTRL_RDATA,
        s_axi_CNTRL_RRESP,
        s_axi_CNTRL_BVALID,
        s_axi_CNTRL_BREADY,
        s_axi_CNTRL_BRESP,
        interrupt,
        cntrl_aclk,
        ap_rst_n_cntrl_aclk
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    C_S_AXI_CNTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CNTRL_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CNTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [127:0] src_data_V_V_TDATA;
output   src_data_V_V_TVALID;
input   src_data_V_V_TREADY;
output  [127:0] soft_data_TDATA;
output   soft_data_TVALID;
input   soft_data_TREADY;
output  [0:0] soft_data_TLAST;
output  [7:0] soft_words_TDATA;
output   soft_words_TVALID;
input   soft_words_TREADY;
output  [0:0] soft_words_TLAST;
output  [31:0] fe_ctrl_V_V_TDATA;
output   fe_ctrl_V_V_TVALID;
input   fe_ctrl_V_V_TREADY;
output  [7:0] hard_words_TDATA;
output   hard_words_TVALID;
input   hard_words_TREADY;
output  [0:0] hard_words_TLAST;
input   s_axi_CNTRL_AWVALID;
output   s_axi_CNTRL_AWREADY;
input  [C_S_AXI_CNTRL_ADDR_WIDTH - 1:0] s_axi_CNTRL_AWADDR;
input   s_axi_CNTRL_WVALID;
output   s_axi_CNTRL_WREADY;
input  [C_S_AXI_CNTRL_DATA_WIDTH - 1:0] s_axi_CNTRL_WDATA;
input  [C_S_AXI_CNTRL_WSTRB_WIDTH - 1:0] s_axi_CNTRL_WSTRB;
input   s_axi_CNTRL_ARVALID;
output   s_axi_CNTRL_ARREADY;
input  [C_S_AXI_CNTRL_ADDR_WIDTH - 1:0] s_axi_CNTRL_ARADDR;
output   s_axi_CNTRL_RVALID;
input   s_axi_CNTRL_RREADY;
output  [C_S_AXI_CNTRL_DATA_WIDTH - 1:0] s_axi_CNTRL_RDATA;
output  [1:0] s_axi_CNTRL_RRESP;
output   s_axi_CNTRL_BVALID;
input   s_axi_CNTRL_BREADY;
output  [1:0] s_axi_CNTRL_BRESP;
output   interrupt;
input   cntrl_aclk;
input   ap_rst_n_cntrl_aclk;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [4:0] block_cfg_code_address0;
reg    block_cfg_code_ce0;
wire   [31:0] block_cfg_code_q0;
wire   [4:0] block_cfg_n_address0;
reg    block_cfg_n_ce0;
wire   [31:0] block_cfg_n_q0;
wire   [4:0] block_cfg_k_address0;
reg    block_cfg_k_ce0;
wire   [31:0] block_cfg_k_q0;
wire   [4:0] block_cfg_term_on_pass_address0;
reg    block_cfg_term_on_pass_ce0;
wire   [31:0] block_cfg_term_on_pass_q0;
wire   [4:0] block_cfg_max_iterations_address0;
reg    block_cfg_max_iterations_ce0;
wire   [31:0] block_cfg_max_iterations_q0;
wire   [4:0] block_cfg_crc_type_address0;
reg    block_cfg_crc_type_ce0;
wire   [31:0] block_cfg_crc_type_q0;
wire   [4:0] block_cfg_skip_channel_address0;
reg    block_cfg_skip_channel_ce0;
wire   [31:0] block_cfg_skip_channel_q0;
wire   [4:0] block_cfg_mod_type_address0;
reg    block_cfg_mod_type_ce0;
wire   [31:0] block_cfg_mod_type_q0;
wire   [4:0] block_cfg_snr_V_address0;
reg    block_cfg_snr_V_ce0;
wire   [16:0] block_cfg_snr_V_q0;
wire   [4:0] block_cfg_inv_sigma_sq_V_address0;
reg    block_cfg_inv_sigma_sq_V_ce0;
wire   [16:0] block_cfg_inv_sigma_sq_V_q0;
wire   [4:0] block_cfg_outputs_address0;
reg    block_cfg_outputs_ce0;
wire   [31:0] block_cfg_outputs_q0;
wire   [31:0] fec_type;
wire   [31:0] soft_words_tx;
wire   [31:0] hard_words_tx;
wire   [5:0] block_def_cfg_address0;
reg    block_def_cfg_ce0;
wire   [31:0] block_def_cfg_q0;
wire   [5:0] block_def_cnt_address0;
reg    block_def_cnt_ce0;
wire   [31:0] block_def_cnt_q0;
wire   [31:0] num_defs;
wire   [31:0] num_blocks;
reg   [127:0] src_data_V_V_1_data_out;
wire    src_data_V_V_1_vld_in;
wire    src_data_V_V_1_vld_out;
wire    src_data_V_V_1_ack_in;
wire    src_data_V_V_1_ack_out;
reg   [127:0] src_data_V_V_1_payload_A;
reg   [127:0] src_data_V_V_1_payload_B;
reg    src_data_V_V_1_sel_rd;
reg    src_data_V_V_1_sel_wr;
wire    src_data_V_V_1_sel;
wire    src_data_V_V_1_load_A;
wire    src_data_V_V_1_load_B;
reg   [1:0] src_data_V_V_1_state;
wire    src_data_V_V_1_state_cmp_full;
reg   [127:0] soft_data_V_data_V_1_data_out;
wire    soft_data_V_data_V_1_vld_in;
wire    soft_data_V_data_V_1_vld_out;
wire    soft_data_V_data_V_1_ack_in;
wire    soft_data_V_data_V_1_ack_out;
reg   [127:0] soft_data_V_data_V_1_payload_A;
reg   [127:0] soft_data_V_data_V_1_payload_B;
reg    soft_data_V_data_V_1_sel_rd;
reg    soft_data_V_data_V_1_sel_wr;
wire    soft_data_V_data_V_1_sel;
wire    soft_data_V_data_V_1_load_A;
wire    soft_data_V_data_V_1_load_B;
reg   [1:0] soft_data_V_data_V_1_state;
wire    soft_data_V_data_V_1_state_cmp_full;
reg   [0:0] soft_data_V_last_V_1_data_out;
wire    soft_data_V_last_V_1_vld_in;
wire    soft_data_V_last_V_1_vld_out;
wire    soft_data_V_last_V_1_ack_in;
wire    soft_data_V_last_V_1_ack_out;
reg   [0:0] soft_data_V_last_V_1_payload_A;
reg   [0:0] soft_data_V_last_V_1_payload_B;
reg    soft_data_V_last_V_1_sel_rd;
reg    soft_data_V_last_V_1_sel_wr;
wire    soft_data_V_last_V_1_sel;
wire    soft_data_V_last_V_1_load_A;
wire    soft_data_V_last_V_1_load_B;
reg   [1:0] soft_data_V_last_V_1_state;
wire    soft_data_V_last_V_1_state_cmp_full;
reg   [7:0] soft_words_V_data_V_1_data_out;
wire    soft_words_V_data_V_1_vld_in;
wire    soft_words_V_data_V_1_vld_out;
wire    soft_words_V_data_V_1_ack_in;
wire    soft_words_V_data_V_1_ack_out;
reg   [7:0] soft_words_V_data_V_1_payload_A;
reg   [7:0] soft_words_V_data_V_1_payload_B;
reg    soft_words_V_data_V_1_sel_rd;
reg    soft_words_V_data_V_1_sel_wr;
wire    soft_words_V_data_V_1_sel;
wire    soft_words_V_data_V_1_load_A;
wire    soft_words_V_data_V_1_load_B;
reg   [1:0] soft_words_V_data_V_1_state;
wire    soft_words_V_data_V_1_state_cmp_full;
reg   [0:0] soft_words_V_last_V_1_data_out;
wire    soft_words_V_last_V_1_vld_in;
wire    soft_words_V_last_V_1_vld_out;
wire    soft_words_V_last_V_1_ack_in;
wire    soft_words_V_last_V_1_ack_out;
reg   [0:0] soft_words_V_last_V_1_payload_A;
reg   [0:0] soft_words_V_last_V_1_payload_B;
reg    soft_words_V_last_V_1_sel_rd;
reg    soft_words_V_last_V_1_sel_wr;
wire    soft_words_V_last_V_1_sel;
wire    soft_words_V_last_V_1_load_A;
wire    soft_words_V_last_V_1_load_B;
reg   [1:0] soft_words_V_last_V_1_state;
wire    soft_words_V_last_V_1_state_cmp_full;
reg   [31:0] fe_ctrl_V_V_1_data_out;
wire    fe_ctrl_V_V_1_vld_in;
wire    fe_ctrl_V_V_1_vld_out;
wire    fe_ctrl_V_V_1_ack_in;
wire    fe_ctrl_V_V_1_ack_out;
reg   [31:0] fe_ctrl_V_V_1_payload_A;
reg   [31:0] fe_ctrl_V_V_1_payload_B;
reg    fe_ctrl_V_V_1_sel_rd;
reg    fe_ctrl_V_V_1_sel_wr;
wire    fe_ctrl_V_V_1_sel;
wire    fe_ctrl_V_V_1_load_A;
wire    fe_ctrl_V_V_1_load_B;
reg   [1:0] fe_ctrl_V_V_1_state;
wire    fe_ctrl_V_V_1_state_cmp_full;
reg   [7:0] hard_words_V_data_V_1_data_out;
wire    hard_words_V_data_V_1_vld_in;
wire    hard_words_V_data_V_1_vld_out;
wire    hard_words_V_data_V_1_ack_in;
wire    hard_words_V_data_V_1_ack_out;
reg   [7:0] hard_words_V_data_V_1_payload_A;
reg   [7:0] hard_words_V_data_V_1_payload_B;
reg    hard_words_V_data_V_1_sel_rd;
reg    hard_words_V_data_V_1_sel_wr;
wire    hard_words_V_data_V_1_sel;
wire    hard_words_V_data_V_1_load_A;
wire    hard_words_V_data_V_1_load_B;
reg   [1:0] hard_words_V_data_V_1_state;
wire    hard_words_V_data_V_1_state_cmp_full;
reg   [0:0] hard_words_V_last_V_1_data_out;
wire    hard_words_V_last_V_1_vld_in;
wire    hard_words_V_last_V_1_vld_out;
wire    hard_words_V_last_V_1_ack_in;
wire    hard_words_V_last_V_1_ack_out;
reg   [0:0] hard_words_V_last_V_1_payload_A;
reg   [0:0] hard_words_V_last_V_1_payload_B;
reg    hard_words_V_last_V_1_sel_rd;
reg    hard_words_V_last_V_1_sel_wr;
wire    hard_words_V_last_V_1_sel;
wire    hard_words_V_last_V_1_load_A;
wire    hard_words_V_last_V_1_load_B;
reg   [1:0] hard_words_V_last_V_1_state;
wire    hard_words_V_last_V_1_state_cmp_full;
reg    ap_rst_n_cntrl_aclk_inv;
reg   [31:0] num_blocks_read_reg_614;
reg   [31:0] num_defs_read_reg_619;
reg   [31:0] hard_words_tx_read_reg_624;
reg   [31:0] soft_words_tx_read_reg_629;
reg   [31:0] fec_type_read_reg_634;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_489_p2;
wire   [7:0] def_i_1_fu_500_p2;
reg   [7:0] def_i_1_reg_652;
wire   [0:0] tmp_s_fu_506_p2;
reg   [0:0] tmp_s_reg_658;
wire    ap_CS_fsm_state3;
reg   [31:0] def_cfg_reg_664;
reg   [31:0] def_cnt_reg_669;
wire   [0:0] tmp_14_fu_515_p2;
reg   [0:0] tmp_14_reg_674;
wire   [31:0] def_cnt_1_fu_526_p3;
reg   [31:0] def_cnt_1_reg_679;
wire    ap_CS_fsm_state4;
wire   [31:0] def_cfg_1_fu_532_p3;
reg   [31:0] def_cfg_1_reg_685;
wire   [31:0] b_i_1_fu_538_p2;
reg   [31:0] b_i_1_reg_690;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_12_fu_568_p2;
reg   [0:0] tmp_12_reg_751;
wire   [31:0] total_blocks_1_fu_572_p2;
reg   [31:0] total_blocks_1_reg_758;
reg   [31:0] block_cfg_code_load_reg_763;
wire    ap_CS_fsm_state6;
reg   [31:0] block_cfg_n_load_reg_768;
reg   [31:0] block_cfg_k_load_reg_773;
reg   [31:0] block_cfg_term_on_pa_2_reg_778;
reg   [31:0] block_cfg_max_iterat_2_reg_783;
reg   [31:0] block_cfg_crc_type_l_reg_788;
reg   [31:0] block_cfg_skip_chann_2_reg_793;
reg   [31:0] block_cfg_mod_type_l_reg_798;
reg   [16:0] block_cfg_snr_V_load_reg_803;
reg   [16:0] block_cfg_inv_sigma_2_reg_808;
reg   [31:0] block_cfg_outputs_lo_reg_813;
wire   [7:0] def_i_be_fu_583_p3;
reg   [7:0] def_i_be_reg_818;
wire   [31:0] b_i_be_fu_590_p3;
reg   [31:0] b_i_be_reg_823;
wire   [31:0] total_blocks_2_fu_596_p3;
reg   [31:0] total_blocks_2_reg_828;
wire   [127:0] grp_run_ber_fu_398_src_data_V_V_TDATA;
wire   [127:0] grp_run_ber_fu_398_soft_data_TDATA;
wire   [0:0] grp_run_ber_fu_398_soft_data_TLAST;
wire   [7:0] grp_run_ber_fu_398_soft_words_TDATA;
wire   [0:0] grp_run_ber_fu_398_soft_words_TLAST;
wire   [31:0] grp_run_ber_fu_398_fe_ctrl_V_V_TDATA;
wire   [7:0] grp_run_ber_fu_398_hard_words_TDATA;
wire   [0:0] grp_run_ber_fu_398_hard_words_TLAST;
wire    grp_run_ber_fu_398_soft_words_TVALID;
wire    grp_run_ber_fu_398_soft_words_TREADY;
wire    grp_run_ber_fu_398_soft_data_TVALID;
wire    grp_run_ber_fu_398_soft_data_TREADY;
wire    grp_run_ber_fu_398_ap_done;
wire    grp_run_ber_fu_398_fe_ctrl_V_V_TVALID;
wire    grp_run_ber_fu_398_fe_ctrl_V_V_TREADY;
wire    grp_run_ber_fu_398_src_data_V_V_TVALID;
wire    grp_run_ber_fu_398_src_data_V_V_TREADY;
wire    grp_run_ber_fu_398_hard_words_TVALID;
wire    grp_run_ber_fu_398_hard_words_TREADY;
wire    grp_run_ber_fu_398_ap_start;
wire    grp_run_ber_fu_398_ap_ready;
wire    grp_run_ber_fu_398_ap_idle;
reg    grp_run_ber_fu_398_ap_continue;
reg   [7:0] def_i_reg_362;
wire    ap_CS_fsm_state7;
reg   [31:0] b_i_reg_374;
reg   [31:0] total_blocks_reg_386;
reg    ap_reg_grp_run_ber_fu_398_ap_start;
reg    ap_sync_reg_grp_run_ber_fu_398_ap_ready;
reg    ap_sync_grp_run_ber_fu_398_ap_ready;
wire   [63:0] tmp_10_fu_494_p1;
wire   [63:0] tmp_11_fu_554_p1;
reg   [31:0] def_cfg_2_fu_168;
reg   [31:0] def_cnt_2_fu_172;
wire   [31:0] tmp_13_fu_512_p1;
wire   [7:0] p_s_fu_577_p3;
wire    ap_CS_fsm_state8;
reg    ap_block_state8;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 src_data_V_V_1_sel_rd = 1'b0;
#0 src_data_V_V_1_sel_wr = 1'b0;
#0 src_data_V_V_1_state = 2'd0;
#0 soft_data_V_data_V_1_sel_rd = 1'b0;
#0 soft_data_V_data_V_1_sel_wr = 1'b0;
#0 soft_data_V_data_V_1_state = 2'd0;
#0 soft_data_V_last_V_1_sel_rd = 1'b0;
#0 soft_data_V_last_V_1_sel_wr = 1'b0;
#0 soft_data_V_last_V_1_state = 2'd0;
#0 soft_words_V_data_V_1_sel_rd = 1'b0;
#0 soft_words_V_data_V_1_sel_wr = 1'b0;
#0 soft_words_V_data_V_1_state = 2'd0;
#0 soft_words_V_last_V_1_sel_rd = 1'b0;
#0 soft_words_V_last_V_1_sel_wr = 1'b0;
#0 soft_words_V_last_V_1_state = 2'd0;
#0 fe_ctrl_V_V_1_sel_rd = 1'b0;
#0 fe_ctrl_V_V_1_sel_wr = 1'b0;
#0 fe_ctrl_V_V_1_state = 2'd0;
#0 hard_words_V_data_V_1_sel_rd = 1'b0;
#0 hard_words_V_data_V_1_sel_wr = 1'b0;
#0 hard_words_V_data_V_1_state = 2'd0;
#0 hard_words_V_last_V_1_sel_rd = 1'b0;
#0 hard_words_V_last_V_1_sel_wr = 1'b0;
#0 hard_words_V_last_V_1_state = 2'd0;
#0 ap_reg_grp_run_ber_fu_398_ap_start = 1'b0;
#0 ap_sync_reg_grp_run_ber_fu_398_ap_ready = 1'b0;
end

ber_kernel_CNTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CNTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CNTRL_DATA_WIDTH ))
ber_kernel_CNTRL_s_axi_U(
    .AWVALID(s_axi_CNTRL_AWVALID),
    .AWREADY(s_axi_CNTRL_AWREADY),
    .AWADDR(s_axi_CNTRL_AWADDR),
    .WVALID(s_axi_CNTRL_WVALID),
    .WREADY(s_axi_CNTRL_WREADY),
    .WDATA(s_axi_CNTRL_WDATA),
    .WSTRB(s_axi_CNTRL_WSTRB),
    .ARVALID(s_axi_CNTRL_ARVALID),
    .ARREADY(s_axi_CNTRL_ARREADY),
    .ARADDR(s_axi_CNTRL_ARADDR),
    .RVALID(s_axi_CNTRL_RVALID),
    .RREADY(s_axi_CNTRL_RREADY),
    .RDATA(s_axi_CNTRL_RDATA),
    .RRESP(s_axi_CNTRL_RRESP),
    .BVALID(s_axi_CNTRL_BVALID),
    .BREADY(s_axi_CNTRL_BREADY),
    .BRESP(s_axi_CNTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .block_cfg_code_address0(block_cfg_code_address0),
    .block_cfg_code_ce0(block_cfg_code_ce0),
    .block_cfg_code_q0(block_cfg_code_q0),
    .block_cfg_n_address0(block_cfg_n_address0),
    .block_cfg_n_ce0(block_cfg_n_ce0),
    .block_cfg_n_q0(block_cfg_n_q0),
    .block_cfg_k_address0(block_cfg_k_address0),
    .block_cfg_k_ce0(block_cfg_k_ce0),
    .block_cfg_k_q0(block_cfg_k_q0),
    .block_cfg_term_on_pass_address0(block_cfg_term_on_pass_address0),
    .block_cfg_term_on_pass_ce0(block_cfg_term_on_pass_ce0),
    .block_cfg_term_on_pass_q0(block_cfg_term_on_pass_q0),
    .block_cfg_max_iterations_address0(block_cfg_max_iterations_address0),
    .block_cfg_max_iterations_ce0(block_cfg_max_iterations_ce0),
    .block_cfg_max_iterations_q0(block_cfg_max_iterations_q0),
    .block_cfg_crc_type_address0(block_cfg_crc_type_address0),
    .block_cfg_crc_type_ce0(block_cfg_crc_type_ce0),
    .block_cfg_crc_type_q0(block_cfg_crc_type_q0),
    .block_cfg_skip_channel_address0(block_cfg_skip_channel_address0),
    .block_cfg_skip_channel_ce0(block_cfg_skip_channel_ce0),
    .block_cfg_skip_channel_q0(block_cfg_skip_channel_q0),
    .block_cfg_mod_type_address0(block_cfg_mod_type_address0),
    .block_cfg_mod_type_ce0(block_cfg_mod_type_ce0),
    .block_cfg_mod_type_q0(block_cfg_mod_type_q0),
    .block_cfg_snr_V_address0(block_cfg_snr_V_address0),
    .block_cfg_snr_V_ce0(block_cfg_snr_V_ce0),
    .block_cfg_snr_V_q0(block_cfg_snr_V_q0),
    .block_cfg_inv_sigma_sq_V_address0(block_cfg_inv_sigma_sq_V_address0),
    .block_cfg_inv_sigma_sq_V_ce0(block_cfg_inv_sigma_sq_V_ce0),
    .block_cfg_inv_sigma_sq_V_q0(block_cfg_inv_sigma_sq_V_q0),
    .block_cfg_outputs_address0(block_cfg_outputs_address0),
    .block_cfg_outputs_ce0(block_cfg_outputs_ce0),
    .block_cfg_outputs_q0(block_cfg_outputs_q0),
    .fec_type(fec_type),
    .soft_words_tx(soft_words_tx),
    .hard_words_tx(hard_words_tx),
    .block_def_cfg_address0(block_def_cfg_address0),
    .block_def_cfg_ce0(block_def_cfg_ce0),
    .block_def_cfg_q0(block_def_cfg_q0),
    .block_def_cnt_address0(block_def_cnt_address0),
    .block_def_cnt_ce0(block_def_cnt_ce0),
    .block_def_cnt_q0(block_def_cnt_q0),
    .num_defs(num_defs),
    .num_blocks(num_blocks),
    .clk(cntrl_aclk),
    .rst(ap_rst_n_cntrl_aclk_inv)
);

run_ber grp_run_ber_fu_398(
    .block_cfg_code(block_cfg_code_load_reg_763),
    .block_cfg_n(block_cfg_n_load_reg_768),
    .block_cfg_k(block_cfg_k_load_reg_773),
    .block_cfg_term_on_pass(block_cfg_term_on_pa_2_reg_778),
    .block_cfg_max_iterations(block_cfg_max_iterat_2_reg_783),
    .block_cfg_crc_type(block_cfg_crc_type_l_reg_788),
    .block_cfg_skip_channel(block_cfg_skip_chann_2_reg_793),
    .block_cfg_mod_type(block_cfg_mod_type_l_reg_798),
    .block_cfg_snr_V(block_cfg_snr_V_load_reg_803),
    .block_cfg_inv_sigma_sq_V(block_cfg_inv_sigma_2_reg_808),
    .block_cfg_outputs(block_cfg_outputs_lo_reg_813),
    .fec_type(fec_type_read_reg_634),
    .soft_words_tx(soft_words_tx_read_reg_629),
    .hard_words_tx(hard_words_tx_read_reg_624),
    .src_data_V_V_TDATA(grp_run_ber_fu_398_src_data_V_V_TDATA),
    .soft_data_TDATA(grp_run_ber_fu_398_soft_data_TDATA),
    .soft_data_TLAST(grp_run_ber_fu_398_soft_data_TLAST),
    .soft_words_TDATA(grp_run_ber_fu_398_soft_words_TDATA),
    .soft_words_TLAST(grp_run_ber_fu_398_soft_words_TLAST),
    .fe_ctrl_V_V_TDATA(grp_run_ber_fu_398_fe_ctrl_V_V_TDATA),
    .hard_words_TDATA(grp_run_ber_fu_398_hard_words_TDATA),
    .hard_words_TLAST(grp_run_ber_fu_398_hard_words_TLAST),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .block_cfg_code_ap_vld(1'b1),
    .block_cfg_n_ap_vld(1'b1),
    .block_cfg_k_ap_vld(1'b1),
    .block_cfg_term_on_pass_ap_vld(1'b1),
    .block_cfg_max_iterations_ap_vld(1'b1),
    .block_cfg_crc_type_ap_vld(1'b1),
    .block_cfg_skip_channel_ap_vld(1'b1),
    .block_cfg_mod_type_ap_vld(1'b1),
    .block_cfg_snr_V_ap_vld(1'b1),
    .block_cfg_inv_sigma_sq_V_ap_vld(1'b1),
    .block_cfg_outputs_ap_vld(1'b1),
    .fec_type_ap_vld(1'b1),
    .soft_words_tx_ap_vld(1'b1),
    .hard_words_tx_ap_vld(1'b1),
    .soft_words_TVALID(grp_run_ber_fu_398_soft_words_TVALID),
    .soft_words_TREADY(grp_run_ber_fu_398_soft_words_TREADY),
    .soft_data_TVALID(grp_run_ber_fu_398_soft_data_TVALID),
    .soft_data_TREADY(grp_run_ber_fu_398_soft_data_TREADY),
    .ap_done(grp_run_ber_fu_398_ap_done),
    .fe_ctrl_V_V_TVALID(grp_run_ber_fu_398_fe_ctrl_V_V_TVALID),
    .fe_ctrl_V_V_TREADY(grp_run_ber_fu_398_fe_ctrl_V_V_TREADY),
    .src_data_V_V_TVALID(grp_run_ber_fu_398_src_data_V_V_TVALID),
    .src_data_V_V_TREADY(grp_run_ber_fu_398_src_data_V_V_TREADY),
    .hard_words_TVALID(grp_run_ber_fu_398_hard_words_TVALID),
    .hard_words_TREADY(grp_run_ber_fu_398_hard_words_TREADY),
    .ap_start(grp_run_ber_fu_398_ap_start),
    .ap_ready(grp_run_ber_fu_398_ap_ready),
    .ap_idle(grp_run_ber_fu_398_ap_idle),
    .ap_continue(grp_run_ber_fu_398_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_run_ber_fu_398_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_sync_grp_run_ber_fu_398_ap_ready)))) begin
            ap_reg_grp_run_ber_fu_398_ap_start <= 1'b1;
        end else if ((1'b1 == grp_run_ber_fu_398_ap_ready)) begin
            ap_reg_grp_run_ber_fu_398_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_run_ber_fu_398_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if ((grp_run_ber_fu_398_ap_done == 1'b1)) begin
                ap_sync_reg_grp_run_ber_fu_398_ap_ready <= 1'b0;
            end else if ((1'b1 == grp_run_ber_fu_398_ap_ready)) begin
                ap_sync_reg_grp_run_ber_fu_398_ap_ready <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fe_ctrl_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == fe_ctrl_V_V_1_ack_out) & (1'b1 == fe_ctrl_V_V_1_vld_out))) begin
            fe_ctrl_V_V_1_sel_rd <= ~fe_ctrl_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fe_ctrl_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == fe_ctrl_V_V_1_vld_in) & (1'b1 == fe_ctrl_V_V_1_ack_in))) begin
            fe_ctrl_V_V_1_sel_wr <= ~fe_ctrl_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fe_ctrl_V_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == fe_ctrl_V_V_1_vld_in) & (1'b1 == fe_ctrl_V_V_1_ack_out) & (2'd3 == fe_ctrl_V_V_1_state)) | ((1'b0 == fe_ctrl_V_V_1_vld_in) & (2'd2 == fe_ctrl_V_V_1_state)))) begin
            fe_ctrl_V_V_1_state <= 2'd2;
        end else if ((((1'b1 == fe_ctrl_V_V_1_vld_in) & (1'b0 == fe_ctrl_V_V_1_ack_out) & (2'd3 == fe_ctrl_V_V_1_state)) | ((1'b0 == fe_ctrl_V_V_1_ack_out) & (2'd1 == fe_ctrl_V_V_1_state)))) begin
            fe_ctrl_V_V_1_state <= 2'd1;
        end else if ((((1'b1 == fe_ctrl_V_V_1_vld_in) & (2'd2 == fe_ctrl_V_V_1_state)) | ((1'b1 == fe_ctrl_V_V_1_ack_out) & (2'd1 == fe_ctrl_V_V_1_state)) | ((2'd3 == fe_ctrl_V_V_1_state) & ~((1'b1 == fe_ctrl_V_V_1_vld_in) & (1'b0 == fe_ctrl_V_V_1_ack_out)) & ~((1'b0 == fe_ctrl_V_V_1_vld_in) & (1'b1 == fe_ctrl_V_V_1_ack_out))))) begin
            fe_ctrl_V_V_1_state <= 2'd3;
        end else begin
            fe_ctrl_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_words_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == hard_words_V_data_V_1_ack_out) & (1'b1 == hard_words_V_data_V_1_vld_out))) begin
            hard_words_V_data_V_1_sel_rd <= ~hard_words_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_words_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == hard_words_V_data_V_1_vld_in) & (1'b1 == hard_words_V_data_V_1_ack_in))) begin
            hard_words_V_data_V_1_sel_wr <= ~hard_words_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_words_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == hard_words_V_data_V_1_vld_in) & (1'b1 == hard_words_V_data_V_1_ack_out) & (2'd3 == hard_words_V_data_V_1_state)) | ((1'b0 == hard_words_V_data_V_1_vld_in) & (2'd2 == hard_words_V_data_V_1_state)))) begin
            hard_words_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == hard_words_V_data_V_1_vld_in) & (1'b0 == hard_words_V_data_V_1_ack_out) & (2'd3 == hard_words_V_data_V_1_state)) | ((1'b0 == hard_words_V_data_V_1_ack_out) & (2'd1 == hard_words_V_data_V_1_state)))) begin
            hard_words_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == hard_words_V_data_V_1_vld_in) & (2'd2 == hard_words_V_data_V_1_state)) | ((1'b1 == hard_words_V_data_V_1_ack_out) & (2'd1 == hard_words_V_data_V_1_state)) | ((2'd3 == hard_words_V_data_V_1_state) & ~((1'b1 == hard_words_V_data_V_1_vld_in) & (1'b0 == hard_words_V_data_V_1_ack_out)) & ~((1'b0 == hard_words_V_data_V_1_vld_in) & (1'b1 == hard_words_V_data_V_1_ack_out))))) begin
            hard_words_V_data_V_1_state <= 2'd3;
        end else begin
            hard_words_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_words_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == hard_words_V_last_V_1_ack_out) & (1'b1 == hard_words_V_last_V_1_vld_out))) begin
            hard_words_V_last_V_1_sel_rd <= ~hard_words_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_words_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == hard_words_V_last_V_1_vld_in) & (1'b1 == hard_words_V_last_V_1_ack_in))) begin
            hard_words_V_last_V_1_sel_wr <= ~hard_words_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_words_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == hard_words_V_last_V_1_vld_in) & (1'b1 == hard_words_V_last_V_1_ack_out) & (2'd3 == hard_words_V_last_V_1_state)) | ((1'b0 == hard_words_V_last_V_1_vld_in) & (2'd2 == hard_words_V_last_V_1_state)))) begin
            hard_words_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == hard_words_V_last_V_1_vld_in) & (1'b0 == hard_words_V_last_V_1_ack_out) & (2'd3 == hard_words_V_last_V_1_state)) | ((1'b0 == hard_words_V_last_V_1_ack_out) & (2'd1 == hard_words_V_last_V_1_state)))) begin
            hard_words_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == hard_words_V_last_V_1_vld_in) & (2'd2 == hard_words_V_last_V_1_state)) | ((1'b1 == hard_words_V_last_V_1_ack_out) & (2'd1 == hard_words_V_last_V_1_state)) | ((2'd3 == hard_words_V_last_V_1_state) & ~((1'b1 == hard_words_V_last_V_1_vld_in) & (1'b0 == hard_words_V_last_V_1_ack_out)) & ~((1'b0 == hard_words_V_last_V_1_vld_in) & (1'b1 == hard_words_V_last_V_1_ack_out))))) begin
            hard_words_V_last_V_1_state <= 2'd3;
        end else begin
            hard_words_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_data_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == soft_data_V_data_V_1_ack_out) & (1'b1 == soft_data_V_data_V_1_vld_out))) begin
            soft_data_V_data_V_1_sel_rd <= ~soft_data_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_data_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == soft_data_V_data_V_1_vld_in) & (1'b1 == soft_data_V_data_V_1_ack_in))) begin
            soft_data_V_data_V_1_sel_wr <= ~soft_data_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_data_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == soft_data_V_data_V_1_vld_in) & (1'b1 == soft_data_V_data_V_1_ack_out) & (2'd3 == soft_data_V_data_V_1_state)) | ((1'b0 == soft_data_V_data_V_1_vld_in) & (2'd2 == soft_data_V_data_V_1_state)))) begin
            soft_data_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == soft_data_V_data_V_1_vld_in) & (1'b0 == soft_data_V_data_V_1_ack_out) & (2'd3 == soft_data_V_data_V_1_state)) | ((1'b0 == soft_data_V_data_V_1_ack_out) & (2'd1 == soft_data_V_data_V_1_state)))) begin
            soft_data_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == soft_data_V_data_V_1_vld_in) & (2'd2 == soft_data_V_data_V_1_state)) | ((1'b1 == soft_data_V_data_V_1_ack_out) & (2'd1 == soft_data_V_data_V_1_state)) | ((2'd3 == soft_data_V_data_V_1_state) & ~((1'b1 == soft_data_V_data_V_1_vld_in) & (1'b0 == soft_data_V_data_V_1_ack_out)) & ~((1'b0 == soft_data_V_data_V_1_vld_in) & (1'b1 == soft_data_V_data_V_1_ack_out))))) begin
            soft_data_V_data_V_1_state <= 2'd3;
        end else begin
            soft_data_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_data_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == soft_data_V_last_V_1_ack_out) & (1'b1 == soft_data_V_last_V_1_vld_out))) begin
            soft_data_V_last_V_1_sel_rd <= ~soft_data_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_data_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == soft_data_V_last_V_1_vld_in) & (1'b1 == soft_data_V_last_V_1_ack_in))) begin
            soft_data_V_last_V_1_sel_wr <= ~soft_data_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_data_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == soft_data_V_last_V_1_vld_in) & (1'b1 == soft_data_V_last_V_1_ack_out) & (2'd3 == soft_data_V_last_V_1_state)) | ((1'b0 == soft_data_V_last_V_1_vld_in) & (2'd2 == soft_data_V_last_V_1_state)))) begin
            soft_data_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == soft_data_V_last_V_1_vld_in) & (1'b0 == soft_data_V_last_V_1_ack_out) & (2'd3 == soft_data_V_last_V_1_state)) | ((1'b0 == soft_data_V_last_V_1_ack_out) & (2'd1 == soft_data_V_last_V_1_state)))) begin
            soft_data_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == soft_data_V_last_V_1_vld_in) & (2'd2 == soft_data_V_last_V_1_state)) | ((1'b1 == soft_data_V_last_V_1_ack_out) & (2'd1 == soft_data_V_last_V_1_state)) | ((2'd3 == soft_data_V_last_V_1_state) & ~((1'b1 == soft_data_V_last_V_1_vld_in) & (1'b0 == soft_data_V_last_V_1_ack_out)) & ~((1'b0 == soft_data_V_last_V_1_vld_in) & (1'b1 == soft_data_V_last_V_1_ack_out))))) begin
            soft_data_V_last_V_1_state <= 2'd3;
        end else begin
            soft_data_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_words_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == soft_words_V_data_V_1_ack_out) & (1'b1 == soft_words_V_data_V_1_vld_out))) begin
            soft_words_V_data_V_1_sel_rd <= ~soft_words_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_words_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == soft_words_V_data_V_1_vld_in) & (1'b1 == soft_words_V_data_V_1_ack_in))) begin
            soft_words_V_data_V_1_sel_wr <= ~soft_words_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_words_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == soft_words_V_data_V_1_vld_in) & (1'b1 == soft_words_V_data_V_1_ack_out) & (2'd3 == soft_words_V_data_V_1_state)) | ((1'b0 == soft_words_V_data_V_1_vld_in) & (2'd2 == soft_words_V_data_V_1_state)))) begin
            soft_words_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == soft_words_V_data_V_1_vld_in) & (1'b0 == soft_words_V_data_V_1_ack_out) & (2'd3 == soft_words_V_data_V_1_state)) | ((1'b0 == soft_words_V_data_V_1_ack_out) & (2'd1 == soft_words_V_data_V_1_state)))) begin
            soft_words_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == soft_words_V_data_V_1_vld_in) & (2'd2 == soft_words_V_data_V_1_state)) | ((1'b1 == soft_words_V_data_V_1_ack_out) & (2'd1 == soft_words_V_data_V_1_state)) | ((2'd3 == soft_words_V_data_V_1_state) & ~((1'b1 == soft_words_V_data_V_1_vld_in) & (1'b0 == soft_words_V_data_V_1_ack_out)) & ~((1'b0 == soft_words_V_data_V_1_vld_in) & (1'b1 == soft_words_V_data_V_1_ack_out))))) begin
            soft_words_V_data_V_1_state <= 2'd3;
        end else begin
            soft_words_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_words_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == soft_words_V_last_V_1_ack_out) & (1'b1 == soft_words_V_last_V_1_vld_out))) begin
            soft_words_V_last_V_1_sel_rd <= ~soft_words_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_words_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == soft_words_V_last_V_1_vld_in) & (1'b1 == soft_words_V_last_V_1_ack_in))) begin
            soft_words_V_last_V_1_sel_wr <= ~soft_words_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        soft_words_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == soft_words_V_last_V_1_vld_in) & (1'b1 == soft_words_V_last_V_1_ack_out) & (2'd3 == soft_words_V_last_V_1_state)) | ((1'b0 == soft_words_V_last_V_1_vld_in) & (2'd2 == soft_words_V_last_V_1_state)))) begin
            soft_words_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == soft_words_V_last_V_1_vld_in) & (1'b0 == soft_words_V_last_V_1_ack_out) & (2'd3 == soft_words_V_last_V_1_state)) | ((1'b0 == soft_words_V_last_V_1_ack_out) & (2'd1 == soft_words_V_last_V_1_state)))) begin
            soft_words_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == soft_words_V_last_V_1_vld_in) & (2'd2 == soft_words_V_last_V_1_state)) | ((1'b1 == soft_words_V_last_V_1_ack_out) & (2'd1 == soft_words_V_last_V_1_state)) | ((2'd3 == soft_words_V_last_V_1_state) & ~((1'b1 == soft_words_V_last_V_1_vld_in) & (1'b0 == soft_words_V_last_V_1_ack_out)) & ~((1'b0 == soft_words_V_last_V_1_vld_in) & (1'b1 == soft_words_V_last_V_1_ack_out))))) begin
            soft_words_V_last_V_1_state <= 2'd3;
        end else begin
            soft_words_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_data_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_data_V_V_1_ack_out) & (1'b1 == src_data_V_V_1_vld_out))) begin
            src_data_V_V_1_sel_rd <= ~src_data_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_data_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_data_V_V_1_vld_in) & (1'b1 == src_data_V_V_1_ack_in))) begin
            src_data_V_V_1_sel_wr <= ~src_data_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_data_V_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == src_data_V_V_1_vld_in) & (1'b1 == src_data_V_V_1_ack_out) & (src_data_V_V_1_state == 2'd3)) | ((1'b0 == src_data_V_V_1_vld_in) & (src_data_V_V_1_state == 2'd2)))) begin
            src_data_V_V_1_state <= 2'd2;
        end else if ((((1'b1 == src_data_V_V_1_vld_in) & (1'b0 == src_data_V_V_1_ack_out) & (src_data_V_V_1_state == 2'd3)) | ((1'b0 == src_data_V_V_1_ack_out) & (src_data_V_V_1_state == 2'd1)))) begin
            src_data_V_V_1_state <= 2'd1;
        end else if ((((1'b1 == src_data_V_V_1_vld_in) & (src_data_V_V_1_state == 2'd2)) | ((1'b1 == src_data_V_V_1_ack_out) & (src_data_V_V_1_state == 2'd1)) | ((src_data_V_V_1_state == 2'd3) & ~((1'b1 == src_data_V_V_1_vld_in) & (1'b0 == src_data_V_V_1_ack_out)) & ~((1'b0 == src_data_V_V_1_vld_in) & (1'b1 == src_data_V_V_1_ack_out))))) begin
            src_data_V_V_1_state <= 2'd3;
        end else begin
            src_data_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_run_ber_fu_398_ap_done == 1'b1))) begin
        b_i_reg_374 <= b_i_be_reg_823;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_i_reg_374 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_run_ber_fu_398_ap_done == 1'b1))) begin
        def_i_reg_362 <= def_i_be_reg_818;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        def_i_reg_362 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_run_ber_fu_398_ap_done == 1'b1))) begin
        total_blocks_reg_386 <= total_blocks_2_reg_828;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        total_blocks_reg_386 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_i_1_reg_690 <= b_i_1_fu_538_p2;
        def_cfg_1_reg_685 <= def_cfg_1_fu_532_p3;
        def_cfg_2_fu_168 <= def_cfg_1_fu_532_p3;
        def_cnt_1_reg_679 <= def_cnt_1_fu_526_p3;
        def_cnt_2_fu_172 <= def_cnt_1_fu_526_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b_i_be_reg_823 <= b_i_be_fu_590_p3;
        block_cfg_code_load_reg_763 <= block_cfg_code_q0;
        block_cfg_crc_type_l_reg_788 <= block_cfg_crc_type_q0;
        block_cfg_inv_sigma_2_reg_808 <= block_cfg_inv_sigma_sq_V_q0;
        block_cfg_k_load_reg_773 <= block_cfg_k_q0;
        block_cfg_max_iterat_2_reg_783 <= block_cfg_max_iterations_q0;
        block_cfg_mod_type_l_reg_798 <= block_cfg_mod_type_q0;
        block_cfg_n_load_reg_768 <= block_cfg_n_q0;
        block_cfg_outputs_lo_reg_813 <= block_cfg_outputs_q0;
        block_cfg_skip_chann_2_reg_793 <= block_cfg_skip_channel_q0;
        block_cfg_snr_V_load_reg_803 <= block_cfg_snr_V_q0;
        block_cfg_term_on_pa_2_reg_778 <= block_cfg_term_on_pass_q0;
        def_i_be_reg_818 <= def_i_be_fu_583_p3;
        total_blocks_2_reg_828 <= total_blocks_2_fu_596_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        def_cfg_reg_664 <= block_def_cfg_q0;
        def_cnt_reg_669 <= block_def_cnt_q0;
        tmp_14_reg_674 <= tmp_14_fu_515_p2;
        tmp_s_reg_658 <= tmp_s_fu_506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_489_p2))) begin
        def_i_1_reg_652 <= def_i_1_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == fe_ctrl_V_V_1_load_A)) begin
        fe_ctrl_V_V_1_payload_A <= grp_run_ber_fu_398_fe_ctrl_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == fe_ctrl_V_V_1_load_B)) begin
        fe_ctrl_V_V_1_payload_B <= grp_run_ber_fu_398_fe_ctrl_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        fec_type_read_reg_634 <= fec_type;
        hard_words_tx_read_reg_624 <= hard_words_tx;
        num_blocks_read_reg_614 <= num_blocks;
        num_defs_read_reg_619 <= num_defs;
        soft_words_tx_read_reg_629 <= soft_words_tx;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == hard_words_V_data_V_1_load_A)) begin
        hard_words_V_data_V_1_payload_A <= grp_run_ber_fu_398_hard_words_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == hard_words_V_data_V_1_load_B)) begin
        hard_words_V_data_V_1_payload_B <= grp_run_ber_fu_398_hard_words_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == hard_words_V_last_V_1_load_A)) begin
        hard_words_V_last_V_1_payload_A <= grp_run_ber_fu_398_hard_words_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == hard_words_V_last_V_1_load_B)) begin
        hard_words_V_last_V_1_payload_B <= grp_run_ber_fu_398_hard_words_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == soft_data_V_data_V_1_load_A)) begin
        soft_data_V_data_V_1_payload_A <= grp_run_ber_fu_398_soft_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == soft_data_V_data_V_1_load_B)) begin
        soft_data_V_data_V_1_payload_B <= grp_run_ber_fu_398_soft_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == soft_data_V_last_V_1_load_A)) begin
        soft_data_V_last_V_1_payload_A <= grp_run_ber_fu_398_soft_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == soft_data_V_last_V_1_load_B)) begin
        soft_data_V_last_V_1_payload_B <= grp_run_ber_fu_398_soft_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == soft_words_V_data_V_1_load_A)) begin
        soft_words_V_data_V_1_payload_A <= grp_run_ber_fu_398_soft_words_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == soft_words_V_data_V_1_load_B)) begin
        soft_words_V_data_V_1_payload_B <= grp_run_ber_fu_398_soft_words_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == soft_words_V_last_V_1_load_A)) begin
        soft_words_V_last_V_1_payload_A <= grp_run_ber_fu_398_soft_words_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == soft_words_V_last_V_1_load_B)) begin
        soft_words_V_last_V_1_payload_B <= grp_run_ber_fu_398_soft_words_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_data_V_V_1_load_A)) begin
        src_data_V_V_1_payload_A <= grp_run_ber_fu_398_src_data_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_data_V_V_1_load_B)) begin
        src_data_V_V_1_payload_B <= grp_run_ber_fu_398_src_data_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_12_reg_751 <= tmp_12_fu_568_p2;
        total_blocks_1_reg_758 <= total_blocks_1_fu_572_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (ap_block_state8 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (ap_block_state8 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_sync_reg_grp_run_ber_fu_398_ap_ready)) begin
        ap_sync_grp_run_ber_fu_398_ap_ready = grp_run_ber_fu_398_ap_ready;
    end else begin
        ap_sync_grp_run_ber_fu_398_ap_ready = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_code_ce0 = 1'b1;
    end else begin
        block_cfg_code_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_crc_type_ce0 = 1'b1;
    end else begin
        block_cfg_crc_type_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_inv_sigma_sq_V_ce0 = 1'b1;
    end else begin
        block_cfg_inv_sigma_sq_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_k_ce0 = 1'b1;
    end else begin
        block_cfg_k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_max_iterations_ce0 = 1'b1;
    end else begin
        block_cfg_max_iterations_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_mod_type_ce0 = 1'b1;
    end else begin
        block_cfg_mod_type_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_n_ce0 = 1'b1;
    end else begin
        block_cfg_n_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_outputs_ce0 = 1'b1;
    end else begin
        block_cfg_outputs_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_skip_channel_ce0 = 1'b1;
    end else begin
        block_cfg_skip_channel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_snr_V_ce0 = 1'b1;
    end else begin
        block_cfg_snr_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        block_cfg_term_on_pass_ce0 = 1'b1;
    end else begin
        block_cfg_term_on_pass_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        block_def_cfg_ce0 = 1'b1;
    end else begin
        block_def_cfg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        block_def_cnt_ce0 = 1'b1;
    end else begin
        block_def_cnt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == fe_ctrl_V_V_1_sel)) begin
        fe_ctrl_V_V_1_data_out = fe_ctrl_V_V_1_payload_B;
    end else begin
        fe_ctrl_V_V_1_data_out = fe_ctrl_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (grp_run_ber_fu_398_ap_done == 1'b1))) begin
        grp_run_ber_fu_398_ap_continue = 1'b1;
    end else begin
        grp_run_ber_fu_398_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == hard_words_V_data_V_1_sel)) begin
        hard_words_V_data_V_1_data_out = hard_words_V_data_V_1_payload_B;
    end else begin
        hard_words_V_data_V_1_data_out = hard_words_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == hard_words_V_last_V_1_sel)) begin
        hard_words_V_last_V_1_data_out = hard_words_V_last_V_1_payload_B;
    end else begin
        hard_words_V_last_V_1_data_out = hard_words_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == soft_data_V_data_V_1_sel)) begin
        soft_data_V_data_V_1_data_out = soft_data_V_data_V_1_payload_B;
    end else begin
        soft_data_V_data_V_1_data_out = soft_data_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == soft_data_V_last_V_1_sel)) begin
        soft_data_V_last_V_1_data_out = soft_data_V_last_V_1_payload_B;
    end else begin
        soft_data_V_last_V_1_data_out = soft_data_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == soft_words_V_data_V_1_sel)) begin
        soft_words_V_data_V_1_data_out = soft_words_V_data_V_1_payload_B;
    end else begin
        soft_words_V_data_V_1_data_out = soft_words_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == soft_words_V_last_V_1_sel)) begin
        soft_words_V_last_V_1_data_out = soft_words_V_last_V_1_payload_B;
    end else begin
        soft_words_V_last_V_1_data_out = soft_words_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == src_data_V_V_1_sel)) begin
        src_data_V_V_1_data_out = src_data_V_V_1_payload_B;
    end else begin
        src_data_V_V_1_data_out = src_data_V_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((ap_start == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((1'd0 == tmp_fu_489_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if ((grp_run_ber_fu_398_ap_done == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((ap_block_state8 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state8 = ((1'b0 == src_data_V_V_1_ack_in) | (1'b0 == soft_data_V_data_V_1_ack_in) | (1'b0 == soft_data_V_last_V_1_ack_in) | (1'b0 == soft_words_V_data_V_1_ack_in) | (1'b0 == soft_words_V_last_V_1_ack_in) | (1'b0 == fe_ctrl_V_V_1_ack_in) | (1'b0 == hard_words_V_data_V_1_ack_in) | (1'b0 == hard_words_V_last_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_cntrl_aclk_inv = ~ap_rst_n_cntrl_aclk;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_i_1_fu_538_p2 = (b_i_reg_374 + 32'd1);

assign b_i_be_fu_590_p3 = ((tmp_12_reg_751[0:0] === 1'b1) ? 32'd0 : b_i_1_reg_690);

assign block_cfg_code_address0 = tmp_11_fu_554_p1;

assign block_cfg_crc_type_address0 = tmp_11_fu_554_p1;

assign block_cfg_inv_sigma_sq_V_address0 = tmp_11_fu_554_p1;

assign block_cfg_k_address0 = tmp_11_fu_554_p1;

assign block_cfg_max_iterations_address0 = tmp_11_fu_554_p1;

assign block_cfg_mod_type_address0 = tmp_11_fu_554_p1;

assign block_cfg_n_address0 = tmp_11_fu_554_p1;

assign block_cfg_outputs_address0 = tmp_11_fu_554_p1;

assign block_cfg_skip_channel_address0 = tmp_11_fu_554_p1;

assign block_cfg_snr_V_address0 = tmp_11_fu_554_p1;

assign block_cfg_term_on_pass_address0 = tmp_11_fu_554_p1;

assign block_def_cfg_address0 = tmp_10_fu_494_p1;

assign block_def_cnt_address0 = tmp_10_fu_494_p1;

assign def_cfg_1_fu_532_p3 = ((tmp_s_reg_658[0:0] === 1'b1) ? def_cfg_reg_664 : def_cfg_2_fu_168);

assign def_cnt_1_fu_526_p3 = ((tmp_s_reg_658[0:0] === 1'b1) ? def_cnt_reg_669 : def_cnt_2_fu_172);

assign def_i_1_fu_500_p2 = (def_i_reg_362 + 8'd1);

assign def_i_be_fu_583_p3 = ((tmp_12_reg_751[0:0] === 1'b1) ? p_s_fu_577_p3 : def_i_reg_362);

assign fe_ctrl_V_V_1_ack_in = fe_ctrl_V_V_1_state[1'd1];

assign fe_ctrl_V_V_1_ack_out = fe_ctrl_V_V_TREADY;

assign fe_ctrl_V_V_1_load_A = (fe_ctrl_V_V_1_state_cmp_full & ~fe_ctrl_V_V_1_sel_wr);

assign fe_ctrl_V_V_1_load_B = (fe_ctrl_V_V_1_sel_wr & fe_ctrl_V_V_1_state_cmp_full);

assign fe_ctrl_V_V_1_sel = fe_ctrl_V_V_1_sel_rd;

assign fe_ctrl_V_V_1_state_cmp_full = ((fe_ctrl_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign fe_ctrl_V_V_1_vld_in = grp_run_ber_fu_398_fe_ctrl_V_V_TVALID;

assign fe_ctrl_V_V_1_vld_out = fe_ctrl_V_V_1_state[1'd0];

assign fe_ctrl_V_V_TDATA = fe_ctrl_V_V_1_data_out;

assign fe_ctrl_V_V_TVALID = fe_ctrl_V_V_1_state[1'd0];

assign grp_run_ber_fu_398_ap_start = ap_reg_grp_run_ber_fu_398_ap_start;

assign grp_run_ber_fu_398_fe_ctrl_V_V_TREADY = fe_ctrl_V_V_1_state[1'd1];

assign grp_run_ber_fu_398_hard_words_TREADY = hard_words_V_last_V_1_state[1'd1];

assign grp_run_ber_fu_398_soft_data_TREADY = soft_data_V_last_V_1_state[1'd1];

assign grp_run_ber_fu_398_soft_words_TREADY = soft_words_V_last_V_1_state[1'd1];

assign grp_run_ber_fu_398_src_data_V_V_TREADY = src_data_V_V_1_state[1'd1];

assign hard_words_TDATA = hard_words_V_data_V_1_data_out;

assign hard_words_TLAST = hard_words_V_last_V_1_data_out;

assign hard_words_TVALID = hard_words_V_last_V_1_state[1'd0];

assign hard_words_V_data_V_1_ack_in = hard_words_V_data_V_1_state[1'd1];

assign hard_words_V_data_V_1_ack_out = hard_words_TREADY;

assign hard_words_V_data_V_1_load_A = (hard_words_V_data_V_1_state_cmp_full & ~hard_words_V_data_V_1_sel_wr);

assign hard_words_V_data_V_1_load_B = (hard_words_V_data_V_1_sel_wr & hard_words_V_data_V_1_state_cmp_full);

assign hard_words_V_data_V_1_sel = hard_words_V_data_V_1_sel_rd;

assign hard_words_V_data_V_1_state_cmp_full = ((hard_words_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign hard_words_V_data_V_1_vld_in = grp_run_ber_fu_398_hard_words_TVALID;

assign hard_words_V_data_V_1_vld_out = hard_words_V_data_V_1_state[1'd0];

assign hard_words_V_last_V_1_ack_in = hard_words_V_last_V_1_state[1'd1];

assign hard_words_V_last_V_1_ack_out = hard_words_TREADY;

assign hard_words_V_last_V_1_load_A = (hard_words_V_last_V_1_state_cmp_full & ~hard_words_V_last_V_1_sel_wr);

assign hard_words_V_last_V_1_load_B = (hard_words_V_last_V_1_sel_wr & hard_words_V_last_V_1_state_cmp_full);

assign hard_words_V_last_V_1_sel = hard_words_V_last_V_1_sel_rd;

assign hard_words_V_last_V_1_state_cmp_full = ((hard_words_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign hard_words_V_last_V_1_vld_in = grp_run_ber_fu_398_hard_words_TVALID;

assign hard_words_V_last_V_1_vld_out = hard_words_V_last_V_1_state[1'd0];

assign p_s_fu_577_p3 = ((tmp_14_reg_674[0:0] === 1'b1) ? 8'd0 : def_i_1_reg_652);

assign soft_data_TDATA = soft_data_V_data_V_1_data_out;

assign soft_data_TLAST = soft_data_V_last_V_1_data_out;

assign soft_data_TVALID = soft_data_V_last_V_1_state[1'd0];

assign soft_data_V_data_V_1_ack_in = soft_data_V_data_V_1_state[1'd1];

assign soft_data_V_data_V_1_ack_out = soft_data_TREADY;

assign soft_data_V_data_V_1_load_A = (soft_data_V_data_V_1_state_cmp_full & ~soft_data_V_data_V_1_sel_wr);

assign soft_data_V_data_V_1_load_B = (soft_data_V_data_V_1_sel_wr & soft_data_V_data_V_1_state_cmp_full);

assign soft_data_V_data_V_1_sel = soft_data_V_data_V_1_sel_rd;

assign soft_data_V_data_V_1_state_cmp_full = ((soft_data_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign soft_data_V_data_V_1_vld_in = grp_run_ber_fu_398_soft_data_TVALID;

assign soft_data_V_data_V_1_vld_out = soft_data_V_data_V_1_state[1'd0];

assign soft_data_V_last_V_1_ack_in = soft_data_V_last_V_1_state[1'd1];

assign soft_data_V_last_V_1_ack_out = soft_data_TREADY;

assign soft_data_V_last_V_1_load_A = (soft_data_V_last_V_1_state_cmp_full & ~soft_data_V_last_V_1_sel_wr);

assign soft_data_V_last_V_1_load_B = (soft_data_V_last_V_1_sel_wr & soft_data_V_last_V_1_state_cmp_full);

assign soft_data_V_last_V_1_sel = soft_data_V_last_V_1_sel_rd;

assign soft_data_V_last_V_1_state_cmp_full = ((soft_data_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign soft_data_V_last_V_1_vld_in = grp_run_ber_fu_398_soft_data_TVALID;

assign soft_data_V_last_V_1_vld_out = soft_data_V_last_V_1_state[1'd0];

assign soft_words_TDATA = soft_words_V_data_V_1_data_out;

assign soft_words_TLAST = soft_words_V_last_V_1_data_out;

assign soft_words_TVALID = soft_words_V_last_V_1_state[1'd0];

assign soft_words_V_data_V_1_ack_in = soft_words_V_data_V_1_state[1'd1];

assign soft_words_V_data_V_1_ack_out = soft_words_TREADY;

assign soft_words_V_data_V_1_load_A = (soft_words_V_data_V_1_state_cmp_full & ~soft_words_V_data_V_1_sel_wr);

assign soft_words_V_data_V_1_load_B = (soft_words_V_data_V_1_sel_wr & soft_words_V_data_V_1_state_cmp_full);

assign soft_words_V_data_V_1_sel = soft_words_V_data_V_1_sel_rd;

assign soft_words_V_data_V_1_state_cmp_full = ((soft_words_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign soft_words_V_data_V_1_vld_in = grp_run_ber_fu_398_soft_words_TVALID;

assign soft_words_V_data_V_1_vld_out = soft_words_V_data_V_1_state[1'd0];

assign soft_words_V_last_V_1_ack_in = soft_words_V_last_V_1_state[1'd1];

assign soft_words_V_last_V_1_ack_out = soft_words_TREADY;

assign soft_words_V_last_V_1_load_A = (soft_words_V_last_V_1_state_cmp_full & ~soft_words_V_last_V_1_sel_wr);

assign soft_words_V_last_V_1_load_B = (soft_words_V_last_V_1_sel_wr & soft_words_V_last_V_1_state_cmp_full);

assign soft_words_V_last_V_1_sel = soft_words_V_last_V_1_sel_rd;

assign soft_words_V_last_V_1_state_cmp_full = ((soft_words_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign soft_words_V_last_V_1_vld_in = grp_run_ber_fu_398_soft_words_TVALID;

assign soft_words_V_last_V_1_vld_out = soft_words_V_last_V_1_state[1'd0];

assign src_data_V_V_1_ack_in = src_data_V_V_1_state[1'd1];

assign src_data_V_V_1_ack_out = src_data_V_V_TREADY;

assign src_data_V_V_1_load_A = (src_data_V_V_1_state_cmp_full & ~src_data_V_V_1_sel_wr);

assign src_data_V_V_1_load_B = (src_data_V_V_1_sel_wr & src_data_V_V_1_state_cmp_full);

assign src_data_V_V_1_sel = src_data_V_V_1_sel_rd;

assign src_data_V_V_1_state_cmp_full = ((src_data_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign src_data_V_V_1_vld_in = grp_run_ber_fu_398_src_data_V_V_TVALID;

assign src_data_V_V_1_vld_out = src_data_V_V_1_state[1'd0];

assign src_data_V_V_TDATA = src_data_V_V_1_data_out;

assign src_data_V_V_TVALID = src_data_V_V_1_state[1'd0];

assign tmp_10_fu_494_p1 = def_i_reg_362;

assign tmp_11_fu_554_p1 = def_cfg_1_reg_685;

assign tmp_12_fu_568_p2 = ((b_i_1_reg_690 == def_cnt_1_reg_679) ? 1'b1 : 1'b0);

assign tmp_13_fu_512_p1 = def_i_1_reg_652;

assign tmp_14_fu_515_p2 = ((tmp_13_fu_512_p1 == num_defs_read_reg_619) ? 1'b1 : 1'b0);

assign tmp_fu_489_p2 = ((total_blocks_reg_386 < num_blocks_read_reg_614) ? 1'b1 : 1'b0);

assign tmp_s_fu_506_p2 = ((b_i_reg_374 == 32'd0) ? 1'b1 : 1'b0);

assign total_blocks_1_fu_572_p2 = (def_cnt_1_reg_679 + total_blocks_reg_386);

assign total_blocks_2_fu_596_p3 = ((tmp_12_reg_751[0:0] === 1'b1) ? total_blocks_1_reg_758 : total_blocks_reg_386);

endmodule //ber_kernel
