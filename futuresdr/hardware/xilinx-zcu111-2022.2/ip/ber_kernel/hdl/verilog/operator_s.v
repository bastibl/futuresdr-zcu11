// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module operator_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        mod_type_V,
        sym_M_real_V,
        sym_M_imag_V,
        inv_sigma_sq_V,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [1:0] mod_type_V;
input  [18:0] sym_M_real_V;
input  [18:0] sym_M_imag_V;
input  [16:0] inv_sigma_sq_V;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;
output  [15:0] ap_return_2;
output  [15:0] ap_return_3;
output  [15:0] ap_return_4;
output  [15:0] ap_return_5;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_idle_pp0;
reg    grp_calc_llr_fu_64_ap_start;
wire    grp_calc_llr_fu_64_ap_done;
wire    grp_calc_llr_fu_64_ap_idle;
wire    grp_calc_llr_fu_64_ap_ready;
reg    grp_calc_llr_fu_64_ap_ce;
wire   [15:0] grp_calc_llr_fu_64_ap_return_0;
wire   [15:0] grp_calc_llr_fu_64_ap_return_1;
wire   [15:0] grp_calc_llr_fu_64_ap_return_2;
reg    grp_calc_llr_fu_88_ap_start;
wire    grp_calc_llr_fu_88_ap_done;
wire    grp_calc_llr_fu_88_ap_idle;
wire    grp_calc_llr_fu_88_ap_ready;
reg    grp_calc_llr_fu_88_ap_ce;
wire   [15:0] grp_calc_llr_fu_88_ap_return_0;
wire   [15:0] grp_calc_llr_fu_88_ap_return_1;
wire   [15:0] grp_calc_llr_fu_88_ap_return_2;
reg   [0:0] ap_NS_fsm;
reg    ap_grp_calc_llr_fu_64_ap_start;
reg    ap_grp_calc_llr_fu_88_ap_start;
reg    ap_idle_pp0_0to18;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
end

calc_llr grp_calc_llr_fu_64(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_calc_llr_fu_64_ap_start),
    .ap_done(grp_calc_llr_fu_64_ap_done),
    .ap_idle(grp_calc_llr_fu_64_ap_idle),
    .ap_ready(grp_calc_llr_fu_64_ap_ready),
    .ap_ce(grp_calc_llr_fu_64_ap_ce),
    .mod_type_V(mod_type_V),
    .sym_V(sym_M_real_V),
    .inv_sigma_sq_V(inv_sigma_sq_V),
    .ap_return_0(grp_calc_llr_fu_64_ap_return_0),
    .ap_return_1(grp_calc_llr_fu_64_ap_return_1),
    .ap_return_2(grp_calc_llr_fu_64_ap_return_2)
);

calc_llr grp_calc_llr_fu_88(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_calc_llr_fu_88_ap_start),
    .ap_done(grp_calc_llr_fu_88_ap_done),
    .ap_idle(grp_calc_llr_fu_88_ap_idle),
    .ap_ready(grp_calc_llr_fu_88_ap_ready),
    .ap_ce(grp_calc_llr_fu_88_ap_ce),
    .mod_type_V(mod_type_V),
    .sym_V(sym_M_imag_V),
    .inv_sigma_sq_V(inv_sigma_sq_V),
    .ap_return_0(grp_calc_llr_fu_88_ap_return_0),
    .ap_return_1(grp_calc_llr_fu_88_ap_return_1),
    .ap_return_2(grp_calc_llr_fu_88_ap_return_2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | (~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter19)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b1))) begin
        ap_grp_calc_llr_fu_64_ap_start = 1'b1;
    end else begin
        ap_grp_calc_llr_fu_64_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_start == 1'b1))) begin
        ap_grp_calc_llr_fu_88_ap_start = 1'b1;
    end else begin
        ap_grp_calc_llr_fu_88_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_idle_pp0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter13) & (1'b0 == ap_enable_reg_pp0_iter14) & (1'b0 == ap_enable_reg_pp0_iter15) & (1'b0 == ap_enable_reg_pp0_iter16) & (1'b0 == ap_enable_reg_pp0_iter17) & (1'b0 == ap_enable_reg_pp0_iter18) & (1'b0 == ap_enable_reg_pp0_iter19))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter13) & (1'b0 == ap_enable_reg_pp0_iter14) & (1'b0 == ap_enable_reg_pp0_iter15) & (1'b0 == ap_enable_reg_pp0_iter16) & (1'b0 == ap_enable_reg_pp0_iter17) & (1'b0 == ap_enable_reg_pp0_iter18))) begin
        ap_idle_pp0_0to18 = 1'b1;
    end else begin
        ap_idle_pp0_0to18 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_idle_pp0_0to18))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (1'b1 == ap_ce))) begin
        grp_calc_llr_fu_64_ap_ce = 1'b1;
    end else begin
        grp_calc_llr_fu_64_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_grp_calc_llr_fu_64_ap_start)) begin
        grp_calc_llr_fu_64_ap_start = ap_grp_calc_llr_fu_64_ap_start;
    end else begin
        grp_calc_llr_fu_64_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (1'b1 == ap_ce))) begin
        grp_calc_llr_fu_88_ap_ce = 1'b1;
    end else begin
        grp_calc_llr_fu_88_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_grp_calc_llr_fu_88_ap_start)) begin
        grp_calc_llr_fu_88_ap_start = ap_grp_calc_llr_fu_88_ap_start;
    end else begin
        grp_calc_llr_fu_88_ap_start = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = grp_calc_llr_fu_64_ap_return_0;

assign ap_return_1 = grp_calc_llr_fu_88_ap_return_0;

assign ap_return_2 = grp_calc_llr_fu_64_ap_return_1;

assign ap_return_3 = grp_calc_llr_fu_88_ap_return_1;

assign ap_return_4 = grp_calc_llr_fu_64_ap_return_2;

assign ap_return_5 = grp_calc_llr_fu_88_ap_return_2;

endmodule //operator_s
