// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_ber (
        block_cfg_code,
        block_cfg_n,
        block_cfg_k,
        block_cfg_term_on_pass,
        block_cfg_max_iterations,
        block_cfg_crc_type,
        block_cfg_skip_channel,
        block_cfg_mod_type,
        block_cfg_snr_V,
        block_cfg_inv_sigma_sq_V,
        block_cfg_outputs,
        fec_type,
        soft_words_tx,
        hard_words_tx,
        src_data_V_V_TDATA,
        soft_data_TDATA,
        soft_data_TLAST,
        soft_words_TDATA,
        soft_words_TLAST,
        fe_ctrl_V_V_TDATA,
        hard_words_TDATA,
        hard_words_TLAST,
        ap_clk,
        ap_rst,
        block_cfg_code_ap_vld,
        block_cfg_n_ap_vld,
        block_cfg_k_ap_vld,
        block_cfg_term_on_pass_ap_vld,
        block_cfg_max_iterations_ap_vld,
        block_cfg_crc_type_ap_vld,
        block_cfg_skip_channel_ap_vld,
        block_cfg_mod_type_ap_vld,
        block_cfg_snr_V_ap_vld,
        block_cfg_inv_sigma_sq_V_ap_vld,
        block_cfg_outputs_ap_vld,
        fec_type_ap_vld,
        soft_words_tx_ap_vld,
        hard_words_tx_ap_vld,
        soft_words_TVALID,
        soft_words_TREADY,
        soft_data_TVALID,
        soft_data_TREADY,
        ap_done,
        fe_ctrl_V_V_TVALID,
        fe_ctrl_V_V_TREADY,
        src_data_V_V_TVALID,
        src_data_V_V_TREADY,
        hard_words_TVALID,
        hard_words_TREADY,
        ap_start,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] block_cfg_code;
input  [31:0] block_cfg_n;
input  [31:0] block_cfg_k;
input  [31:0] block_cfg_term_on_pass;
input  [31:0] block_cfg_max_iterations;
input  [31:0] block_cfg_crc_type;
input  [31:0] block_cfg_skip_channel;
input  [31:0] block_cfg_mod_type;
input  [16:0] block_cfg_snr_V;
input  [16:0] block_cfg_inv_sigma_sq_V;
input  [31:0] block_cfg_outputs;
input  [31:0] fec_type;
input  [31:0] soft_words_tx;
input  [31:0] hard_words_tx;
output  [127:0] src_data_V_V_TDATA;
output  [127:0] soft_data_TDATA;
output  [0:0] soft_data_TLAST;
output  [7:0] soft_words_TDATA;
output  [0:0] soft_words_TLAST;
output  [31:0] fe_ctrl_V_V_TDATA;
output  [7:0] hard_words_TDATA;
output  [0:0] hard_words_TLAST;
input   ap_clk;
input   ap_rst;
input   block_cfg_code_ap_vld;
input   block_cfg_n_ap_vld;
input   block_cfg_k_ap_vld;
input   block_cfg_term_on_pass_ap_vld;
input   block_cfg_max_iterations_ap_vld;
input   block_cfg_crc_type_ap_vld;
input   block_cfg_skip_channel_ap_vld;
input   block_cfg_mod_type_ap_vld;
input   block_cfg_snr_V_ap_vld;
input   block_cfg_inv_sigma_sq_V_ap_vld;
input   block_cfg_outputs_ap_vld;
input   fec_type_ap_vld;
input   soft_words_tx_ap_vld;
input   hard_words_tx_ap_vld;
output   soft_words_TVALID;
input   soft_words_TREADY;
output   soft_data_TVALID;
input   soft_data_TREADY;
output   ap_done;
output   fe_ctrl_V_V_TVALID;
input   fe_ctrl_V_V_TREADY;
output   src_data_V_V_TVALID;
input   src_data_V_V_TREADY;
output   hard_words_TVALID;
input   hard_words_TREADY;
input   ap_start;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    run_ber_entry311_U0_ap_start;
wire    run_ber_entry311_U0_ap_done;
wire    run_ber_entry311_U0_ap_continue;
wire    run_ber_entry311_U0_ap_idle;
wire    run_ber_entry311_U0_ap_ready;
wire    run_ber_entry311_U0_start_out;
wire    run_ber_entry311_U0_start_write;
wire   [31:0] run_ber_entry311_U0_block_cfg_code_out_din;
wire    run_ber_entry311_U0_block_cfg_code_out_write;
wire   [31:0] run_ber_entry311_U0_block_cfg_n_out_din;
wire    run_ber_entry311_U0_block_cfg_n_out_write;
wire   [31:0] run_ber_entry311_U0_block_cfg_k_out_din;
wire    run_ber_entry311_U0_block_cfg_k_out_write;
wire   [31:0] run_ber_entry311_U0_block_cfg_k_out1_din;
wire    run_ber_entry311_U0_block_cfg_k_out1_write;
wire   [31:0] run_ber_entry311_U0_block_cfg_term_on_pass_out_din;
wire    run_ber_entry311_U0_block_cfg_term_on_pass_out_write;
wire   [31:0] run_ber_entry311_U0_block_cfg_max_iterations_out_din;
wire    run_ber_entry311_U0_block_cfg_max_iterations_out_write;
wire   [31:0] run_ber_entry311_U0_block_cfg_crc_type_out_din;
wire    run_ber_entry311_U0_block_cfg_crc_type_out_write;
wire   [31:0] run_ber_entry311_U0_block_cfg_skip_channel_out_din;
wire    run_ber_entry311_U0_block_cfg_skip_channel_out_write;
wire   [31:0] run_ber_entry311_U0_block_cfg_mod_type_out_din;
wire    run_ber_entry311_U0_block_cfg_mod_type_out_write;
wire   [16:0] run_ber_entry311_U0_block_cfg_snr_V_out_din;
wire    run_ber_entry311_U0_block_cfg_snr_V_out_write;
wire   [16:0] run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_din;
wire    run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_write;
wire   [31:0] run_ber_entry311_U0_block_cfg_outputs_out_din;
wire    run_ber_entry311_U0_block_cfg_outputs_out_write;
wire   [31:0] run_ber_entry311_U0_fec_type_out_din;
wire    run_ber_entry311_U0_fec_type_out_write;
wire   [31:0] run_ber_entry311_U0_fec_type_out2_din;
wire    run_ber_entry311_U0_fec_type_out2_write;
wire   [31:0] run_ber_entry311_U0_soft_words_tx_out_din;
wire    run_ber_entry311_U0_soft_words_tx_out_write;
wire   [31:0] run_ber_entry311_U0_hard_words_tx_out_din;
wire    run_ber_entry311_U0_hard_words_tx_out_write;
wire    data_source_U0_ap_start;
wire    data_source_U0_ap_done;
wire    data_source_U0_ap_continue;
wire    data_source_U0_ap_idle;
wire    data_source_U0_ap_ready;
wire    data_source_U0_ctrl_k_read;
wire    data_source_U0_src_data_V_din;
wire    data_source_U0_src_data_V_write;
wire   [31:0] data_source_U0_ctrl_k_out_din;
wire    data_source_U0_ctrl_k_out_write;
wire    run_ber_Loop_dup_src_U0_ap_start;
wire    run_ber_Loop_dup_src_U0_ap_ready;
wire    run_ber_Loop_dup_src_U0_ap_done;
wire    run_ber_Loop_dup_src_U0_ap_continue;
wire    run_ber_Loop_dup_src_U0_ap_idle;
wire    run_ber_Loop_dup_src_U0_start_out;
wire    run_ber_Loop_dup_src_U0_start_write;
wire    run_ber_Loop_dup_src_U0_block_cfg_k_read;
wire    run_ber_Loop_dup_src_U0_src_data_g_V_read;
wire   [0:0] run_ber_Loop_dup_src_U0_src_data_i_V_2_din;
wire    run_ber_Loop_dup_src_U0_src_data_i_V_2_write;
wire    run_ber_Loop_dup_src_U0_block_cfg_outputs_read;
wire   [0:0] run_ber_Loop_dup_src_U0_src_data_i_V_din;
wire    run_ber_Loop_dup_src_U0_src_data_i_V_write;
wire   [31:0] run_ber_Loop_dup_src_U0_block_cfg_k_out_din;
wire    run_ber_Loop_dup_src_U0_block_cfg_k_out_write;
wire   [31:0] run_ber_Loop_dup_src_U0_block_cfg_k_out1_din;
wire    run_ber_Loop_dup_src_U0_block_cfg_k_out1_write;
wire   [31:0] run_ber_Loop_dup_src_U0_block_cfg_outputs_out_din;
wire    run_ber_Loop_dup_src_U0_block_cfg_outputs_out_write;
wire    encoder_U0_ap_start;
wire    encoder_U0_ap_done;
wire    encoder_U0_ap_continue;
wire    encoder_U0_ap_idle;
wire    encoder_U0_ap_ready;
wire    encoder_U0_ctrl_n_read;
wire    encoder_U0_ctrl_k_read;
wire    encoder_U0_src_data_V_dout;
wire    encoder_U0_src_data_V_read;
wire    encoder_U0_enc_data_V_din;
wire    encoder_U0_enc_data_V_write;
wire   [31:0] encoder_U0_ctrl_n_out_din;
wire    encoder_U0_ctrl_n_out_write;
wire    run_ber_Loop_dup_enc_U0_ap_start;
wire    run_ber_Loop_dup_enc_U0_ap_done;
wire    run_ber_Loop_dup_enc_U0_ap_continue;
wire    run_ber_Loop_dup_enc_U0_ap_idle;
wire    run_ber_Loop_dup_enc_U0_ap_ready;
wire    run_ber_Loop_dup_enc_U0_block_cfg_n_read;
wire    run_ber_Loop_dup_enc_U0_enc_data_g_V_read;
wire   [0:0] run_ber_Loop_dup_enc_U0_enc_data_i_V_din;
wire    run_ber_Loop_dup_enc_U0_enc_data_i_V_write;
wire    run_ber_Loop_dup_enc_U0_block_cfg_outputs_read;
wire   [31:0] run_ber_Loop_dup_enc_U0_block_cfg_n_out_din;
wire    run_ber_Loop_dup_enc_U0_block_cfg_n_out_write;
wire   [31:0] run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_din;
wire    run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_write;
wire    modulate_U0_ap_start;
wire    modulate_U0_ap_done;
wire    modulate_U0_ap_continue;
wire    modulate_U0_ap_idle;
wire    modulate_U0_ap_ready;
wire    modulate_U0_modulation_type_read;
wire    modulate_U0_block_size_read;
wire    modulate_U0_src_data_V_dout;
wire    modulate_U0_src_data_V_read;
wire   [15:0] modulate_U0_mod_data_V_M_real_V_din;
wire    modulate_U0_mod_data_V_M_real_V_write;
wire   [15:0] modulate_U0_mod_data_V_M_imag_V_din;
wire    modulate_U0_mod_data_V_M_imag_V_write;
wire    modulate_U0_mod_data_last_V_din;
wire    modulate_U0_mod_data_last_V_write;
wire   [31:0] modulate_U0_modulation_type_out_din;
wire    modulate_U0_modulation_type_out_write;
wire   [31:0] modulate_U0_block_size_out_din;
wire    modulate_U0_block_size_out_write;
wire    channel_U0_ap_start;
wire    channel_U0_ap_ready;
wire    channel_U0_ap_done;
wire    channel_U0_ap_continue;
wire    channel_U0_ap_idle;
wire    channel_U0_start_out;
wire    channel_U0_start_write;
wire    channel_U0_block_cfg_skip_channel_read;
wire    channel_U0_block_cfg_snr_V_read;
wire    channel_U0_mod_data_V_M_real_V_read;
wire    channel_U0_mod_data_V_M_imag_V_read;
wire    channel_U0_mod_data_last_V_dout;
wire    channel_U0_mod_data_last_V_read;
wire   [18:0] channel_U0_chan_data_V_M_real_s_din;
wire    channel_U0_chan_data_V_M_real_s_write;
wire   [18:0] channel_U0_chan_data_V_M_imag_s_din;
wire    channel_U0_chan_data_V_M_imag_s_write;
wire    channel_U0_chan_data_last_V_din;
wire    channel_U0_chan_data_last_V_write;
wire    run_ber_Loop_dup_cha_U0_ap_start;
wire    run_ber_Loop_dup_cha_U0_ap_done;
wire    run_ber_Loop_dup_cha_U0_ap_continue;
wire    run_ber_Loop_dup_cha_U0_ap_idle;
wire    run_ber_Loop_dup_cha_U0_ap_ready;
wire    run_ber_Loop_dup_cha_U0_chan_data_g_V_M_real_V_read;
wire    run_ber_Loop_dup_cha_U0_chan_data_g_V_M_imag_V_read;
wire   [18:0] run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_din;
wire    run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_write;
wire   [18:0] run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_din;
wire    run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_write;
wire    run_ber_Loop_dup_cha_U0_block_cfg_outputs_read;
wire    run_ber_Loop_dup_cha_U0_chan_data_last_V_read;
wire    demodulate_U0_ap_start;
wire    demodulate_U0_ap_done;
wire    demodulate_U0_ap_continue;
wire    demodulate_U0_ap_idle;
wire    demodulate_U0_ap_ready;
wire    demodulate_U0_modulation_type_read;
wire    demodulate_U0_block_size_read;
wire    demodulate_U0_inv_sigma_sq_V_read;
wire    demodulate_U0_chan_data_V_M_real_s_read;
wire    demodulate_U0_chan_data_V_M_imag_s_read;
wire   [15:0] demodulate_U0_soft_data_V_V_din;
wire    demodulate_U0_soft_data_V_V_write;
wire   [31:0] demodulate_U0_block_size_out_din;
wire    demodulate_U0_block_size_out_write;
wire    compress_soft_U0_ap_start;
wire    compress_soft_U0_ap_done;
wire    compress_soft_U0_ap_continue;
wire    compress_soft_U0_ap_idle;
wire    compress_soft_U0_ap_ready;
wire    compress_soft_U0_n_read;
wire    compress_soft_U0_fec_type_read;
wire    compress_soft_U0_soft_words_tx_read;
wire   [7:0] compress_soft_U0_soft_words_TDATA;
wire    compress_soft_U0_soft_words_TVALID;
wire   [0:0] compress_soft_U0_soft_words_TLAST;
wire    compress_soft_U0_soft_data_i_V_V_read;
wire   [127:0] compress_soft_U0_soft_data_TDATA;
wire    compress_soft_U0_soft_data_TVALID;
wire   [0:0] compress_soft_U0_soft_data_TLAST;
wire    ap_sync_continue;
wire    run_ber_Block_data_g_U0_ap_start;
wire    run_ber_Block_data_g_U0_ap_done;
wire    run_ber_Block_data_g_U0_ap_continue;
wire    run_ber_Block_data_g_U0_ap_idle;
wire    run_ber_Block_data_g_U0_ap_ready;
wire    run_ber_Block_data_g_U0_block_cfg_code_read;
wire    run_ber_Block_data_g_U0_fec_type_read;
wire    run_ber_Block_data_g_U0_block_cfg_crc_type_read;
wire    run_ber_Block_data_g_U0_block_cfg_term_on_pass_read;
wire    run_ber_Block_data_g_U0_block_cfg_max_iterations_read;
wire   [31:0] run_ber_Block_data_g_U0_fe_ctrl_V_V_TDATA;
wire    run_ber_Block_data_g_U0_fe_ctrl_V_V_TVALID;
wire    compress_src_U0_ap_start;
wire    compress_src_U0_ap_done;
wire    compress_src_U0_ap_continue;
wire    compress_src_U0_ap_idle;
wire    compress_src_U0_ap_ready;
wire    compress_src_U0_k_read;
wire    compress_src_U0_src_data_i_V_dout;
wire    compress_src_U0_src_data_i_V_read;
wire   [127:0] compress_src_U0_src_data_V_V_TDATA;
wire    compress_src_U0_src_data_V_V_TVALID;
wire    gen_hard_words_U0_ap_start;
wire    gen_hard_words_U0_ap_done;
wire    gen_hard_words_U0_ap_continue;
wire    gen_hard_words_U0_ap_idle;
wire    gen_hard_words_U0_ap_ready;
wire    gen_hard_words_U0_k_read;
wire    gen_hard_words_U0_hard_words_tx_read;
wire   [7:0] gen_hard_words_U0_hard_words_TDATA;
wire    gen_hard_words_U0_hard_words_TVALID;
wire   [0:0] gen_hard_words_U0_hard_words_TLAST;
wire    block_cfg_code_chann_full_n;
wire   [31:0] block_cfg_code_chann_dout;
wire    block_cfg_code_chann_empty_n;
wire    block_cfg_n_channel_full_n;
wire   [31:0] block_cfg_n_channel_dout;
wire    block_cfg_n_channel_empty_n;
wire    block_cfg_k_channel_full_n;
wire   [31:0] block_cfg_k_channel_dout;
wire    block_cfg_k_channel_empty_n;
wire    block_cfg_k_channel2_3_full_n;
wire   [31:0] block_cfg_k_channel2_3_dout;
wire    block_cfg_k_channel2_3_empty_n;
wire    block_cfg_term_on_pa_full_n;
wire   [31:0] block_cfg_term_on_pa_dout;
wire    block_cfg_term_on_pa_empty_n;
wire    block_cfg_max_iterat_full_n;
wire   [31:0] block_cfg_max_iterat_dout;
wire    block_cfg_max_iterat_empty_n;
wire    block_cfg_crc_type_c_full_n;
wire   [31:0] block_cfg_crc_type_c_dout;
wire    block_cfg_crc_type_c_empty_n;
wire    block_cfg_skip_chann_full_n;
wire   [31:0] block_cfg_skip_chann_dout;
wire    block_cfg_skip_chann_empty_n;
wire    block_cfg_mod_type_c_1_full_n;
wire   [31:0] block_cfg_mod_type_c_1_dout;
wire    block_cfg_mod_type_c_1_empty_n;
wire    block_cfg_snr_V_chan_full_n;
wire   [16:0] block_cfg_snr_V_chan_dout;
wire    block_cfg_snr_V_chan_empty_n;
wire    block_cfg_inv_sigma_s_full_n;
wire   [16:0] block_cfg_inv_sigma_s_dout;
wire    block_cfg_inv_sigma_s_empty_n;
wire    block_cfg_outputs_ch_2_full_n;
wire   [31:0] block_cfg_outputs_ch_2_dout;
wire    block_cfg_outputs_ch_2_empty_n;
wire    fec_type_channel_full_n;
wire   [31:0] fec_type_channel_dout;
wire    fec_type_channel_empty_n;
wire    fec_type_channel23_full_n;
wire   [31:0] fec_type_channel23_dout;
wire    fec_type_channel23_empty_n;
wire    soft_words_tx_channe_1_full_n;
wire   [31:0] soft_words_tx_channe_1_dout;
wire    soft_words_tx_channe_1_empty_n;
wire    hard_words_tx_channe_1_full_n;
wire   [31:0] hard_words_tx_channe_1_dout;
wire    hard_words_tx_channe_1_empty_n;
wire   [0:0] src_data_g_V_din;
wire    src_data_g_V_full_n;
wire   [0:0] src_data_g_V_dout;
wire    src_data_g_V_empty_n;
wire    block_cfg_k_channel2_2_full_n;
wire   [31:0] block_cfg_k_channel2_2_dout;
wire    block_cfg_k_channel2_2_empty_n;
wire    src_data_i_V_1_full_n;
wire   [0:0] src_data_i_V_1_dout;
wire    src_data_i_V_1_empty_n;
wire    src_data_i_V_full_n;
wire   [0:0] src_data_i_V_dout;
wire    src_data_i_V_empty_n;
wire    block_cfg_k_channel2_1_full_n;
wire   [31:0] block_cfg_k_channel2_1_dout;
wire    block_cfg_k_channel2_1_empty_n;
wire    block_cfg_k_channel2_full_n;
wire   [31:0] block_cfg_k_channel2_dout;
wire    block_cfg_k_channel2_empty_n;
wire    block_cfg_outputs_ch_1_full_n;
wire   [31:0] block_cfg_outputs_ch_1_dout;
wire    block_cfg_outputs_ch_1_empty_n;
wire   [0:0] enc_data_g_V_din;
wire    enc_data_g_V_full_n;
wire   [0:0] enc_data_g_V_dout;
wire    enc_data_g_V_empty_n;
wire    block_cfg_n_channel2_1_full_n;
wire   [31:0] block_cfg_n_channel2_1_dout;
wire    block_cfg_n_channel2_1_empty_n;
wire    enc_data_i_V_full_n;
wire   [0:0] enc_data_i_V_dout;
wire    enc_data_i_V_empty_n;
wire    block_cfg_n_channel2_full_n;
wire   [31:0] block_cfg_n_channel2_dout;
wire    block_cfg_n_channel2_empty_n;
wire    block_cfg_outputs_ch_full_n;
wire   [31:0] block_cfg_outputs_ch_dout;
wire    block_cfg_outputs_ch_empty_n;
wire    mod_data_V_M_real_V_full_n;
wire   [15:0] mod_data_V_M_real_V_dout;
wire    mod_data_V_M_real_V_empty_n;
wire    mod_data_V_M_imag_V_full_n;
wire   [15:0] mod_data_V_M_imag_V_dout;
wire    mod_data_V_M_imag_V_empty_n;
wire   [0:0] mod_data_last_V_din;
wire    mod_data_last_V_full_n;
wire   [0:0] mod_data_last_V_dout;
wire    mod_data_last_V_empty_n;
wire    block_cfg_mod_type_c_full_n;
wire   [31:0] block_cfg_mod_type_c_dout;
wire    block_cfg_mod_type_c_empty_n;
wire    block_cfg_n_channel3_1_full_n;
wire   [31:0] block_cfg_n_channel3_1_dout;
wire    block_cfg_n_channel3_1_empty_n;
wire    chan_data_g_V_M_rea_full_n;
wire   [18:0] chan_data_g_V_M_rea_dout;
wire    chan_data_g_V_M_rea_empty_n;
wire    chan_data_g_V_M_ima_full_n;
wire   [18:0] chan_data_g_V_M_ima_dout;
wire    chan_data_g_V_M_ima_empty_n;
wire   [0:0] chan_data_last_V_din;
wire    chan_data_last_V_full_n;
wire   [0:0] chan_data_last_V_dout;
wire    chan_data_last_V_empty_n;
wire    chan_data_i_V_M_rea_full_n;
wire   [18:0] chan_data_i_V_M_rea_dout;
wire    chan_data_i_V_M_rea_empty_n;
wire    chan_data_i_V_M_ima_full_n;
wire   [18:0] chan_data_i_V_M_ima_dout;
wire    chan_data_i_V_M_ima_empty_n;
wire    soft_data_i_V_V_full_n;
wire   [15:0] soft_data_i_V_V_dout;
wire    soft_data_i_V_V_empty_n;
wire    block_cfg_n_channel3_full_n;
wire   [31:0] block_cfg_n_channel3_dout;
wire    block_cfg_n_channel3_empty_n;
wire    ap_sync_done;
reg    ap_reg_compress_src_U0_ap_done;
reg    ap_reg_compress_soft_U0_ap_done;
reg    ap_reg_run_ber_Block_data_g_U0_ap_done;
reg    ap_reg_gen_hard_words_U0_ap_done;
wire    ap_sync_ready;
wire   [0:0] start_for_data_source_U0_din;
wire    start_for_data_source_U0_full_n;
wire   [0:0] start_for_data_source_U0_dout;
wire    start_for_data_source_U0_empty_n;
wire   [0:0] start_for_run_ber_Loop_dup_src_U0_din;
wire    start_for_run_ber_Loop_dup_src_U0_full_n;
wire   [0:0] start_for_run_ber_Loop_dup_src_U0_dout;
wire    start_for_run_ber_Loop_dup_src_U0_empty_n;
wire   [0:0] start_for_encoder_U0_din;
wire    start_for_encoder_U0_full_n;
wire   [0:0] start_for_encoder_U0_dout;
wire    start_for_encoder_U0_empty_n;
wire   [0:0] start_for_modulate_U0_din;
wire    start_for_modulate_U0_full_n;
wire   [0:0] start_for_modulate_U0_dout;
wire    start_for_modulate_U0_empty_n;
wire   [0:0] start_for_channel_U0_din;
wire    start_for_channel_U0_full_n;
wire   [0:0] start_for_channel_U0_dout;
wire    start_for_channel_U0_empty_n;
wire   [0:0] start_for_demodulate_U0_din;
wire    start_for_demodulate_U0_full_n;
wire   [0:0] start_for_demodulate_U0_dout;
wire    start_for_demodulate_U0_empty_n;
wire   [0:0] start_for_compress_soft_U0_din;
wire    start_for_compress_soft_U0_full_n;
wire   [0:0] start_for_compress_soft_U0_dout;
wire    start_for_compress_soft_U0_empty_n;
wire   [0:0] start_for_run_ber_Block_data_g_U0_din;
wire    start_for_run_ber_Block_data_g_U0_full_n;
wire   [0:0] start_for_run_ber_Block_data_g_U0_dout;
wire    start_for_run_ber_Block_data_g_U0_empty_n;
wire   [0:0] start_for_gen_hard_words_U0_din;
wire    start_for_gen_hard_words_U0_full_n;
wire   [0:0] start_for_gen_hard_words_U0_dout;
wire    start_for_gen_hard_words_U0_empty_n;
wire   [0:0] start_for_run_ber_Loop_dup_enc_U0_din;
wire    start_for_run_ber_Loop_dup_enc_U0_full_n;
wire   [0:0] start_for_run_ber_Loop_dup_enc_U0_dout;
wire    start_for_run_ber_Loop_dup_enc_U0_empty_n;
wire   [0:0] start_for_compress_src_U0_din;
wire    start_for_compress_src_U0_full_n;
wire   [0:0] start_for_compress_src_U0_dout;
wire    start_for_compress_src_U0_empty_n;
wire   [0:0] start_for_run_ber_Loop_dup_cha_U0_din;
wire    start_for_run_ber_Loop_dup_cha_U0_full_n;
wire   [0:0] start_for_run_ber_Loop_dup_cha_U0_dout;
wire    start_for_run_ber_Loop_dup_cha_U0_empty_n;

// power-on initialization
initial begin
#0 ap_reg_compress_src_U0_ap_done = 1'b0;
#0 ap_reg_compress_soft_U0_ap_done = 1'b0;
#0 ap_reg_run_ber_Block_data_g_U0_ap_done = 1'b0;
#0 ap_reg_gen_hard_words_U0_ap_done = 1'b0;
end

run_ber_entry311 run_ber_entry311_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(run_ber_entry311_U0_ap_start),
    .start_full_n(start_for_gen_hard_words_U0_full_n),
    .ap_done(run_ber_entry311_U0_ap_done),
    .ap_continue(run_ber_entry311_U0_ap_continue),
    .ap_idle(run_ber_entry311_U0_ap_idle),
    .ap_ready(run_ber_entry311_U0_ap_ready),
    .start_out(run_ber_entry311_U0_start_out),
    .start_write(run_ber_entry311_U0_start_write),
    .block_cfg_code(block_cfg_code),
    .block_cfg_n(block_cfg_n),
    .block_cfg_k(block_cfg_k),
    .block_cfg_term_on_pass(block_cfg_term_on_pass),
    .block_cfg_max_iterations(block_cfg_max_iterations),
    .block_cfg_crc_type(block_cfg_crc_type),
    .block_cfg_skip_channel(block_cfg_skip_channel),
    .block_cfg_mod_type(block_cfg_mod_type),
    .block_cfg_snr_V(block_cfg_snr_V),
    .block_cfg_inv_sigma_sq_V(block_cfg_inv_sigma_sq_V),
    .block_cfg_outputs(block_cfg_outputs),
    .fec_type(fec_type),
    .soft_words_tx(soft_words_tx),
    .hard_words_tx(hard_words_tx),
    .block_cfg_code_out_din(run_ber_entry311_U0_block_cfg_code_out_din),
    .block_cfg_code_out_full_n(block_cfg_code_chann_full_n),
    .block_cfg_code_out_write(run_ber_entry311_U0_block_cfg_code_out_write),
    .block_cfg_n_out_din(run_ber_entry311_U0_block_cfg_n_out_din),
    .block_cfg_n_out_full_n(block_cfg_n_channel_full_n),
    .block_cfg_n_out_write(run_ber_entry311_U0_block_cfg_n_out_write),
    .block_cfg_k_out_din(run_ber_entry311_U0_block_cfg_k_out_din),
    .block_cfg_k_out_full_n(block_cfg_k_channel_full_n),
    .block_cfg_k_out_write(run_ber_entry311_U0_block_cfg_k_out_write),
    .block_cfg_k_out1_din(run_ber_entry311_U0_block_cfg_k_out1_din),
    .block_cfg_k_out1_full_n(block_cfg_k_channel2_3_full_n),
    .block_cfg_k_out1_write(run_ber_entry311_U0_block_cfg_k_out1_write),
    .block_cfg_term_on_pass_out_din(run_ber_entry311_U0_block_cfg_term_on_pass_out_din),
    .block_cfg_term_on_pass_out_full_n(block_cfg_term_on_pa_full_n),
    .block_cfg_term_on_pass_out_write(run_ber_entry311_U0_block_cfg_term_on_pass_out_write),
    .block_cfg_max_iterations_out_din(run_ber_entry311_U0_block_cfg_max_iterations_out_din),
    .block_cfg_max_iterations_out_full_n(block_cfg_max_iterat_full_n),
    .block_cfg_max_iterations_out_write(run_ber_entry311_U0_block_cfg_max_iterations_out_write),
    .block_cfg_crc_type_out_din(run_ber_entry311_U0_block_cfg_crc_type_out_din),
    .block_cfg_crc_type_out_full_n(block_cfg_crc_type_c_full_n),
    .block_cfg_crc_type_out_write(run_ber_entry311_U0_block_cfg_crc_type_out_write),
    .block_cfg_skip_channel_out_din(run_ber_entry311_U0_block_cfg_skip_channel_out_din),
    .block_cfg_skip_channel_out_full_n(block_cfg_skip_chann_full_n),
    .block_cfg_skip_channel_out_write(run_ber_entry311_U0_block_cfg_skip_channel_out_write),
    .block_cfg_mod_type_out_din(run_ber_entry311_U0_block_cfg_mod_type_out_din),
    .block_cfg_mod_type_out_full_n(block_cfg_mod_type_c_1_full_n),
    .block_cfg_mod_type_out_write(run_ber_entry311_U0_block_cfg_mod_type_out_write),
    .block_cfg_snr_V_out_din(run_ber_entry311_U0_block_cfg_snr_V_out_din),
    .block_cfg_snr_V_out_full_n(block_cfg_snr_V_chan_full_n),
    .block_cfg_snr_V_out_write(run_ber_entry311_U0_block_cfg_snr_V_out_write),
    .block_cfg_inv_sigma_sq_V_out_din(run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_din),
    .block_cfg_inv_sigma_sq_V_out_full_n(block_cfg_inv_sigma_s_full_n),
    .block_cfg_inv_sigma_sq_V_out_write(run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_write),
    .block_cfg_outputs_out_din(run_ber_entry311_U0_block_cfg_outputs_out_din),
    .block_cfg_outputs_out_full_n(block_cfg_outputs_ch_2_full_n),
    .block_cfg_outputs_out_write(run_ber_entry311_U0_block_cfg_outputs_out_write),
    .fec_type_out_din(run_ber_entry311_U0_fec_type_out_din),
    .fec_type_out_full_n(fec_type_channel_full_n),
    .fec_type_out_write(run_ber_entry311_U0_fec_type_out_write),
    .fec_type_out2_din(run_ber_entry311_U0_fec_type_out2_din),
    .fec_type_out2_full_n(fec_type_channel23_full_n),
    .fec_type_out2_write(run_ber_entry311_U0_fec_type_out2_write),
    .soft_words_tx_out_din(run_ber_entry311_U0_soft_words_tx_out_din),
    .soft_words_tx_out_full_n(soft_words_tx_channe_1_full_n),
    .soft_words_tx_out_write(run_ber_entry311_U0_soft_words_tx_out_write),
    .hard_words_tx_out_din(run_ber_entry311_U0_hard_words_tx_out_din),
    .hard_words_tx_out_full_n(hard_words_tx_channe_1_full_n),
    .hard_words_tx_out_write(run_ber_entry311_U0_hard_words_tx_out_write)
);

data_source data_source_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(data_source_U0_ap_start),
    .ap_done(data_source_U0_ap_done),
    .ap_continue(data_source_U0_ap_continue),
    .ap_idle(data_source_U0_ap_idle),
    .ap_ready(data_source_U0_ap_ready),
    .ctrl_k_dout(block_cfg_k_channel_dout),
    .ctrl_k_empty_n(block_cfg_k_channel_empty_n),
    .ctrl_k_read(data_source_U0_ctrl_k_read),
    .src_data_V_din(data_source_U0_src_data_V_din),
    .src_data_V_full_n(src_data_g_V_full_n),
    .src_data_V_write(data_source_U0_src_data_V_write),
    .ctrl_k_out_din(data_source_U0_ctrl_k_out_din),
    .ctrl_k_out_full_n(block_cfg_k_channel2_2_full_n),
    .ctrl_k_out_write(data_source_U0_ctrl_k_out_write)
);

run_ber_Loop_dup_src run_ber_Loop_dup_src_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(run_ber_Loop_dup_src_U0_ap_start),
    .start_full_n(start_for_compress_src_U0_full_n),
    .ap_ready(run_ber_Loop_dup_src_U0_ap_ready),
    .ap_done(run_ber_Loop_dup_src_U0_ap_done),
    .ap_continue(run_ber_Loop_dup_src_U0_ap_continue),
    .ap_idle(run_ber_Loop_dup_src_U0_ap_idle),
    .start_out(run_ber_Loop_dup_src_U0_start_out),
    .start_write(run_ber_Loop_dup_src_U0_start_write),
    .block_cfg_k_dout(block_cfg_k_channel2_2_dout),
    .block_cfg_k_empty_n(block_cfg_k_channel2_2_empty_n),
    .block_cfg_k_read(run_ber_Loop_dup_src_U0_block_cfg_k_read),
    .src_data_g_V_dout(src_data_g_V_dout),
    .src_data_g_V_empty_n(src_data_g_V_empty_n),
    .src_data_g_V_read(run_ber_Loop_dup_src_U0_src_data_g_V_read),
    .src_data_i_V_2_din(run_ber_Loop_dup_src_U0_src_data_i_V_2_din),
    .src_data_i_V_2_full_n(src_data_i_V_1_full_n),
    .src_data_i_V_2_write(run_ber_Loop_dup_src_U0_src_data_i_V_2_write),
    .block_cfg_outputs_dout(block_cfg_outputs_ch_2_dout),
    .block_cfg_outputs_empty_n(block_cfg_outputs_ch_2_empty_n),
    .block_cfg_outputs_read(run_ber_Loop_dup_src_U0_block_cfg_outputs_read),
    .src_data_i_V_din(run_ber_Loop_dup_src_U0_src_data_i_V_din),
    .src_data_i_V_full_n(src_data_i_V_full_n),
    .src_data_i_V_write(run_ber_Loop_dup_src_U0_src_data_i_V_write),
    .block_cfg_k_out_din(run_ber_Loop_dup_src_U0_block_cfg_k_out_din),
    .block_cfg_k_out_full_n(block_cfg_k_channel2_1_full_n),
    .block_cfg_k_out_write(run_ber_Loop_dup_src_U0_block_cfg_k_out_write),
    .block_cfg_k_out1_din(run_ber_Loop_dup_src_U0_block_cfg_k_out1_din),
    .block_cfg_k_out1_full_n(block_cfg_k_channel2_full_n),
    .block_cfg_k_out1_write(run_ber_Loop_dup_src_U0_block_cfg_k_out1_write),
    .block_cfg_outputs_out_din(run_ber_Loop_dup_src_U0_block_cfg_outputs_out_din),
    .block_cfg_outputs_out_full_n(block_cfg_outputs_ch_1_full_n),
    .block_cfg_outputs_out_write(run_ber_Loop_dup_src_U0_block_cfg_outputs_out_write)
);

encoder encoder_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(encoder_U0_ap_start),
    .ap_done(encoder_U0_ap_done),
    .ap_continue(encoder_U0_ap_continue),
    .ap_idle(encoder_U0_ap_idle),
    .ap_ready(encoder_U0_ap_ready),
    .ctrl_n_dout(block_cfg_n_channel_dout),
    .ctrl_n_empty_n(block_cfg_n_channel_empty_n),
    .ctrl_n_read(encoder_U0_ctrl_n_read),
    .ctrl_k_dout(block_cfg_k_channel2_dout),
    .ctrl_k_empty_n(block_cfg_k_channel2_empty_n),
    .ctrl_k_read(encoder_U0_ctrl_k_read),
    .src_data_V_dout(encoder_U0_src_data_V_dout),
    .src_data_V_empty_n(src_data_i_V_empty_n),
    .src_data_V_read(encoder_U0_src_data_V_read),
    .enc_data_V_din(encoder_U0_enc_data_V_din),
    .enc_data_V_full_n(enc_data_g_V_full_n),
    .enc_data_V_write(encoder_U0_enc_data_V_write),
    .ctrl_n_out_din(encoder_U0_ctrl_n_out_din),
    .ctrl_n_out_full_n(block_cfg_n_channel2_1_full_n),
    .ctrl_n_out_write(encoder_U0_ctrl_n_out_write)
);

run_ber_Loop_dup_enc run_ber_Loop_dup_enc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(run_ber_Loop_dup_enc_U0_ap_start),
    .ap_done(run_ber_Loop_dup_enc_U0_ap_done),
    .ap_continue(run_ber_Loop_dup_enc_U0_ap_continue),
    .ap_idle(run_ber_Loop_dup_enc_U0_ap_idle),
    .ap_ready(run_ber_Loop_dup_enc_U0_ap_ready),
    .block_cfg_n_dout(block_cfg_n_channel2_1_dout),
    .block_cfg_n_empty_n(block_cfg_n_channel2_1_empty_n),
    .block_cfg_n_read(run_ber_Loop_dup_enc_U0_block_cfg_n_read),
    .enc_data_g_V_dout(enc_data_g_V_dout),
    .enc_data_g_V_empty_n(enc_data_g_V_empty_n),
    .enc_data_g_V_read(run_ber_Loop_dup_enc_U0_enc_data_g_V_read),
    .enc_data_i_V_din(run_ber_Loop_dup_enc_U0_enc_data_i_V_din),
    .enc_data_i_V_full_n(enc_data_i_V_full_n),
    .enc_data_i_V_write(run_ber_Loop_dup_enc_U0_enc_data_i_V_write),
    .block_cfg_outputs_dout(block_cfg_outputs_ch_1_dout),
    .block_cfg_outputs_empty_n(block_cfg_outputs_ch_1_empty_n),
    .block_cfg_outputs_read(run_ber_Loop_dup_enc_U0_block_cfg_outputs_read),
    .block_cfg_n_out_din(run_ber_Loop_dup_enc_U0_block_cfg_n_out_din),
    .block_cfg_n_out_full_n(block_cfg_n_channel2_full_n),
    .block_cfg_n_out_write(run_ber_Loop_dup_enc_U0_block_cfg_n_out_write),
    .block_cfg_outputs_out_din(run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_din),
    .block_cfg_outputs_out_full_n(block_cfg_outputs_ch_full_n),
    .block_cfg_outputs_out_write(run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_write)
);

modulate modulate_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(modulate_U0_ap_start),
    .ap_done(modulate_U0_ap_done),
    .ap_continue(modulate_U0_ap_continue),
    .ap_idle(modulate_U0_ap_idle),
    .ap_ready(modulate_U0_ap_ready),
    .modulation_type_dout(block_cfg_mod_type_c_1_dout),
    .modulation_type_empty_n(block_cfg_mod_type_c_1_empty_n),
    .modulation_type_read(modulate_U0_modulation_type_read),
    .block_size_dout(block_cfg_n_channel2_dout),
    .block_size_empty_n(block_cfg_n_channel2_empty_n),
    .block_size_read(modulate_U0_block_size_read),
    .src_data_V_dout(modulate_U0_src_data_V_dout),
    .src_data_V_empty_n(enc_data_i_V_empty_n),
    .src_data_V_read(modulate_U0_src_data_V_read),
    .mod_data_V_M_real_V_din(modulate_U0_mod_data_V_M_real_V_din),
    .mod_data_V_M_real_V_full_n(mod_data_V_M_real_V_full_n),
    .mod_data_V_M_real_V_write(modulate_U0_mod_data_V_M_real_V_write),
    .mod_data_V_M_imag_V_din(modulate_U0_mod_data_V_M_imag_V_din),
    .mod_data_V_M_imag_V_full_n(mod_data_V_M_imag_V_full_n),
    .mod_data_V_M_imag_V_write(modulate_U0_mod_data_V_M_imag_V_write),
    .mod_data_last_V_din(modulate_U0_mod_data_last_V_din),
    .mod_data_last_V_full_n(mod_data_last_V_full_n),
    .mod_data_last_V_write(modulate_U0_mod_data_last_V_write),
    .modulation_type_out_din(modulate_U0_modulation_type_out_din),
    .modulation_type_out_full_n(block_cfg_mod_type_c_full_n),
    .modulation_type_out_write(modulate_U0_modulation_type_out_write),
    .block_size_out_din(modulate_U0_block_size_out_din),
    .block_size_out_full_n(block_cfg_n_channel3_1_full_n),
    .block_size_out_write(modulate_U0_block_size_out_write)
);

channel channel_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(channel_U0_ap_start),
    .start_full_n(start_for_run_ber_Loop_dup_cha_U0_full_n),
    .ap_ready(channel_U0_ap_ready),
    .ap_done(channel_U0_ap_done),
    .ap_continue(channel_U0_ap_continue),
    .ap_idle(channel_U0_ap_idle),
    .start_out(channel_U0_start_out),
    .start_write(channel_U0_start_write),
    .block_cfg_skip_channel_dout(block_cfg_skip_chann_dout),
    .block_cfg_skip_channel_empty_n(block_cfg_skip_chann_empty_n),
    .block_cfg_skip_channel_read(channel_U0_block_cfg_skip_channel_read),
    .block_cfg_snr_V_dout(block_cfg_snr_V_chan_dout),
    .block_cfg_snr_V_empty_n(block_cfg_snr_V_chan_empty_n),
    .block_cfg_snr_V_read(channel_U0_block_cfg_snr_V_read),
    .mod_data_V_M_real_V_dout(mod_data_V_M_real_V_dout),
    .mod_data_V_M_real_V_empty_n(mod_data_V_M_real_V_empty_n),
    .mod_data_V_M_real_V_read(channel_U0_mod_data_V_M_real_V_read),
    .mod_data_V_M_imag_V_dout(mod_data_V_M_imag_V_dout),
    .mod_data_V_M_imag_V_empty_n(mod_data_V_M_imag_V_empty_n),
    .mod_data_V_M_imag_V_read(channel_U0_mod_data_V_M_imag_V_read),
    .mod_data_last_V_dout(channel_U0_mod_data_last_V_dout),
    .mod_data_last_V_empty_n(mod_data_last_V_empty_n),
    .mod_data_last_V_read(channel_U0_mod_data_last_V_read),
    .chan_data_V_M_real_s_din(channel_U0_chan_data_V_M_real_s_din),
    .chan_data_V_M_real_s_full_n(chan_data_g_V_M_rea_full_n),
    .chan_data_V_M_real_s_write(channel_U0_chan_data_V_M_real_s_write),
    .chan_data_V_M_imag_s_din(channel_U0_chan_data_V_M_imag_s_din),
    .chan_data_V_M_imag_s_full_n(chan_data_g_V_M_ima_full_n),
    .chan_data_V_M_imag_s_write(channel_U0_chan_data_V_M_imag_s_write),
    .chan_data_last_V_din(channel_U0_chan_data_last_V_din),
    .chan_data_last_V_full_n(chan_data_last_V_full_n),
    .chan_data_last_V_write(channel_U0_chan_data_last_V_write)
);

run_ber_Loop_dup_cha run_ber_Loop_dup_cha_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(run_ber_Loop_dup_cha_U0_ap_start),
    .ap_done(run_ber_Loop_dup_cha_U0_ap_done),
    .ap_continue(run_ber_Loop_dup_cha_U0_ap_continue),
    .ap_idle(run_ber_Loop_dup_cha_U0_ap_idle),
    .ap_ready(run_ber_Loop_dup_cha_U0_ap_ready),
    .chan_data_g_V_M_real_V_dout(chan_data_g_V_M_rea_dout),
    .chan_data_g_V_M_real_V_empty_n(chan_data_g_V_M_rea_empty_n),
    .chan_data_g_V_M_real_V_read(run_ber_Loop_dup_cha_U0_chan_data_g_V_M_real_V_read),
    .chan_data_g_V_M_imag_V_dout(chan_data_g_V_M_ima_dout),
    .chan_data_g_V_M_imag_V_empty_n(chan_data_g_V_M_ima_empty_n),
    .chan_data_g_V_M_imag_V_read(run_ber_Loop_dup_cha_U0_chan_data_g_V_M_imag_V_read),
    .chan_data_i_V_M_real_V_din(run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_din),
    .chan_data_i_V_M_real_V_full_n(chan_data_i_V_M_rea_full_n),
    .chan_data_i_V_M_real_V_write(run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_write),
    .chan_data_i_V_M_imag_V_din(run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_din),
    .chan_data_i_V_M_imag_V_full_n(chan_data_i_V_M_ima_full_n),
    .chan_data_i_V_M_imag_V_write(run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_write),
    .block_cfg_outputs_dout(block_cfg_outputs_ch_dout),
    .block_cfg_outputs_empty_n(block_cfg_outputs_ch_empty_n),
    .block_cfg_outputs_read(run_ber_Loop_dup_cha_U0_block_cfg_outputs_read),
    .chan_data_last_V_dout(chan_data_last_V_dout),
    .chan_data_last_V_empty_n(chan_data_last_V_empty_n),
    .chan_data_last_V_read(run_ber_Loop_dup_cha_U0_chan_data_last_V_read)
);

demodulate demodulate_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(demodulate_U0_ap_start),
    .ap_done(demodulate_U0_ap_done),
    .ap_continue(demodulate_U0_ap_continue),
    .ap_idle(demodulate_U0_ap_idle),
    .ap_ready(demodulate_U0_ap_ready),
    .modulation_type_dout(block_cfg_mod_type_c_dout),
    .modulation_type_empty_n(block_cfg_mod_type_c_empty_n),
    .modulation_type_read(demodulate_U0_modulation_type_read),
    .block_size_dout(block_cfg_n_channel3_1_dout),
    .block_size_empty_n(block_cfg_n_channel3_1_empty_n),
    .block_size_read(demodulate_U0_block_size_read),
    .inv_sigma_sq_V_dout(block_cfg_inv_sigma_s_dout),
    .inv_sigma_sq_V_empty_n(block_cfg_inv_sigma_s_empty_n),
    .inv_sigma_sq_V_read(demodulate_U0_inv_sigma_sq_V_read),
    .chan_data_V_M_real_s_dout(chan_data_i_V_M_rea_dout),
    .chan_data_V_M_real_s_empty_n(chan_data_i_V_M_rea_empty_n),
    .chan_data_V_M_real_s_read(demodulate_U0_chan_data_V_M_real_s_read),
    .chan_data_V_M_imag_s_dout(chan_data_i_V_M_ima_dout),
    .chan_data_V_M_imag_s_empty_n(chan_data_i_V_M_ima_empty_n),
    .chan_data_V_M_imag_s_read(demodulate_U0_chan_data_V_M_imag_s_read),
    .soft_data_V_V_din(demodulate_U0_soft_data_V_V_din),
    .soft_data_V_V_full_n(soft_data_i_V_V_full_n),
    .soft_data_V_V_write(demodulate_U0_soft_data_V_V_write),
    .block_size_out_din(demodulate_U0_block_size_out_din),
    .block_size_out_full_n(block_cfg_n_channel3_full_n),
    .block_size_out_write(demodulate_U0_block_size_out_write)
);

compress_soft compress_soft_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(compress_soft_U0_ap_start),
    .ap_done(compress_soft_U0_ap_done),
    .ap_continue(compress_soft_U0_ap_continue),
    .ap_idle(compress_soft_U0_ap_idle),
    .ap_ready(compress_soft_U0_ap_ready),
    .n_dout(block_cfg_n_channel3_dout),
    .n_empty_n(block_cfg_n_channel3_empty_n),
    .n_read(compress_soft_U0_n_read),
    .fec_type_dout(fec_type_channel_dout),
    .fec_type_empty_n(fec_type_channel_empty_n),
    .fec_type_read(compress_soft_U0_fec_type_read),
    .soft_words_tx_dout(soft_words_tx_channe_1_dout),
    .soft_words_tx_empty_n(soft_words_tx_channe_1_empty_n),
    .soft_words_tx_read(compress_soft_U0_soft_words_tx_read),
    .soft_words_TDATA(compress_soft_U0_soft_words_TDATA),
    .soft_words_TVALID(compress_soft_U0_soft_words_TVALID),
    .soft_words_TREADY(soft_words_TREADY),
    .soft_words_TLAST(compress_soft_U0_soft_words_TLAST),
    .soft_data_i_V_V_dout(soft_data_i_V_V_dout),
    .soft_data_i_V_V_empty_n(soft_data_i_V_V_empty_n),
    .soft_data_i_V_V_read(compress_soft_U0_soft_data_i_V_V_read),
    .soft_data_TDATA(compress_soft_U0_soft_data_TDATA),
    .soft_data_TVALID(compress_soft_U0_soft_data_TVALID),
    .soft_data_TREADY(soft_data_TREADY),
    .soft_data_TLAST(compress_soft_U0_soft_data_TLAST)
);

run_ber_Block_data_g run_ber_Block_data_g_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(run_ber_Block_data_g_U0_ap_start),
    .ap_done(run_ber_Block_data_g_U0_ap_done),
    .ap_continue(run_ber_Block_data_g_U0_ap_continue),
    .ap_idle(run_ber_Block_data_g_U0_ap_idle),
    .ap_ready(run_ber_Block_data_g_U0_ap_ready),
    .block_cfg_code_dout(block_cfg_code_chann_dout),
    .block_cfg_code_empty_n(block_cfg_code_chann_empty_n),
    .block_cfg_code_read(run_ber_Block_data_g_U0_block_cfg_code_read),
    .fec_type_dout(fec_type_channel23_dout),
    .fec_type_empty_n(fec_type_channel23_empty_n),
    .fec_type_read(run_ber_Block_data_g_U0_fec_type_read),
    .block_cfg_crc_type_dout(block_cfg_crc_type_c_dout),
    .block_cfg_crc_type_empty_n(block_cfg_crc_type_c_empty_n),
    .block_cfg_crc_type_read(run_ber_Block_data_g_U0_block_cfg_crc_type_read),
    .block_cfg_term_on_pass_dout(block_cfg_term_on_pa_dout),
    .block_cfg_term_on_pass_empty_n(block_cfg_term_on_pa_empty_n),
    .block_cfg_term_on_pass_read(run_ber_Block_data_g_U0_block_cfg_term_on_pass_read),
    .block_cfg_max_iterations_dout(block_cfg_max_iterat_dout),
    .block_cfg_max_iterations_empty_n(block_cfg_max_iterat_empty_n),
    .block_cfg_max_iterations_read(run_ber_Block_data_g_U0_block_cfg_max_iterations_read),
    .fe_ctrl_V_V_TDATA(run_ber_Block_data_g_U0_fe_ctrl_V_V_TDATA),
    .fe_ctrl_V_V_TVALID(run_ber_Block_data_g_U0_fe_ctrl_V_V_TVALID),
    .fe_ctrl_V_V_TREADY(fe_ctrl_V_V_TREADY)
);

compress_src compress_src_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(compress_src_U0_ap_start),
    .ap_done(compress_src_U0_ap_done),
    .ap_continue(compress_src_U0_ap_continue),
    .ap_idle(compress_src_U0_ap_idle),
    .ap_ready(compress_src_U0_ap_ready),
    .k_dout(block_cfg_k_channel2_1_dout),
    .k_empty_n(block_cfg_k_channel2_1_empty_n),
    .k_read(compress_src_U0_k_read),
    .src_data_i_V_dout(compress_src_U0_src_data_i_V_dout),
    .src_data_i_V_empty_n(src_data_i_V_1_empty_n),
    .src_data_i_V_read(compress_src_U0_src_data_i_V_read),
    .src_data_V_V_TDATA(compress_src_U0_src_data_V_V_TDATA),
    .src_data_V_V_TVALID(compress_src_U0_src_data_V_V_TVALID),
    .src_data_V_V_TREADY(src_data_V_V_TREADY)
);

gen_hard_words gen_hard_words_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(gen_hard_words_U0_ap_start),
    .ap_done(gen_hard_words_U0_ap_done),
    .ap_continue(gen_hard_words_U0_ap_continue),
    .ap_idle(gen_hard_words_U0_ap_idle),
    .ap_ready(gen_hard_words_U0_ap_ready),
    .k_dout(block_cfg_k_channel2_3_dout),
    .k_empty_n(block_cfg_k_channel2_3_empty_n),
    .k_read(gen_hard_words_U0_k_read),
    .hard_words_tx_dout(hard_words_tx_channe_1_dout),
    .hard_words_tx_empty_n(hard_words_tx_channe_1_empty_n),
    .hard_words_tx_read(gen_hard_words_U0_hard_words_tx_read),
    .hard_words_TDATA(gen_hard_words_U0_hard_words_TDATA),
    .hard_words_TVALID(gen_hard_words_U0_hard_words_TVALID),
    .hard_words_TREADY(hard_words_TREADY),
    .hard_words_TLAST(gen_hard_words_U0_hard_words_TLAST)
);

fifo_w32_d1_A block_cfg_code_chann_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_code_out_din),
    .if_full_n(block_cfg_code_chann_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_code_out_write),
    .if_dout(block_cfg_code_chann_dout),
    .if_empty_n(block_cfg_code_chann_empty_n),
    .if_read(run_ber_Block_data_g_U0_block_cfg_code_read)
);

fifo_w32_d3_A block_cfg_n_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_n_out_din),
    .if_full_n(block_cfg_n_channel_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_n_out_write),
    .if_dout(block_cfg_n_channel_dout),
    .if_empty_n(block_cfg_n_channel_empty_n),
    .if_read(encoder_U0_ctrl_n_read)
);

fifo_w32_d1_A block_cfg_k_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_k_out_din),
    .if_full_n(block_cfg_k_channel_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_k_out_write),
    .if_dout(block_cfg_k_channel_dout),
    .if_empty_n(block_cfg_k_channel_empty_n),
    .if_read(data_source_U0_ctrl_k_read)
);

fifo_w32_d1_A block_cfg_k_channel2_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_k_out1_din),
    .if_full_n(block_cfg_k_channel2_3_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_k_out1_write),
    .if_dout(block_cfg_k_channel2_3_dout),
    .if_empty_n(block_cfg_k_channel2_3_empty_n),
    .if_read(gen_hard_words_U0_k_read)
);

fifo_w32_d1_A block_cfg_term_on_pa_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_term_on_pass_out_din),
    .if_full_n(block_cfg_term_on_pa_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_term_on_pass_out_write),
    .if_dout(block_cfg_term_on_pa_dout),
    .if_empty_n(block_cfg_term_on_pa_empty_n),
    .if_read(run_ber_Block_data_g_U0_block_cfg_term_on_pass_read)
);

fifo_w32_d1_A block_cfg_max_iterat_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_max_iterations_out_din),
    .if_full_n(block_cfg_max_iterat_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_max_iterations_out_write),
    .if_dout(block_cfg_max_iterat_dout),
    .if_empty_n(block_cfg_max_iterat_empty_n),
    .if_read(run_ber_Block_data_g_U0_block_cfg_max_iterations_read)
);

fifo_w32_d1_A block_cfg_crc_type_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_crc_type_out_din),
    .if_full_n(block_cfg_crc_type_c_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_crc_type_out_write),
    .if_dout(block_cfg_crc_type_c_dout),
    .if_empty_n(block_cfg_crc_type_c_empty_n),
    .if_read(run_ber_Block_data_g_U0_block_cfg_crc_type_read)
);

fifo_w32_d6_A block_cfg_skip_chann_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_skip_channel_out_din),
    .if_full_n(block_cfg_skip_chann_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_skip_channel_out_write),
    .if_dout(block_cfg_skip_chann_dout),
    .if_empty_n(block_cfg_skip_chann_empty_n),
    .if_read(channel_U0_block_cfg_skip_channel_read)
);

fifo_w32_d5_A block_cfg_mod_type_c_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_mod_type_out_din),
    .if_full_n(block_cfg_mod_type_c_1_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_mod_type_out_write),
    .if_dout(block_cfg_mod_type_c_1_dout),
    .if_empty_n(block_cfg_mod_type_c_1_empty_n),
    .if_read(modulate_U0_modulation_type_read)
);

fifo_w17_d6_A block_cfg_snr_V_chan_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_snr_V_out_din),
    .if_full_n(block_cfg_snr_V_chan_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_snr_V_out_write),
    .if_dout(block_cfg_snr_V_chan_dout),
    .if_empty_n(block_cfg_snr_V_chan_empty_n),
    .if_read(channel_U0_block_cfg_snr_V_read)
);

fifo_w17_d8_A block_cfg_inv_sigma_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_din),
    .if_full_n(block_cfg_inv_sigma_s_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_write),
    .if_dout(block_cfg_inv_sigma_s_dout),
    .if_empty_n(block_cfg_inv_sigma_s_empty_n),
    .if_read(demodulate_U0_inv_sigma_sq_V_read)
);

fifo_w32_d2_A block_cfg_outputs_ch_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_block_cfg_outputs_out_din),
    .if_full_n(block_cfg_outputs_ch_2_full_n),
    .if_write(run_ber_entry311_U0_block_cfg_outputs_out_write),
    .if_dout(block_cfg_outputs_ch_2_dout),
    .if_empty_n(block_cfg_outputs_ch_2_empty_n),
    .if_read(run_ber_Loop_dup_src_U0_block_cfg_outputs_read)
);

fifo_w32_d9_A fec_type_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_fec_type_out_din),
    .if_full_n(fec_type_channel_full_n),
    .if_write(run_ber_entry311_U0_fec_type_out_write),
    .if_dout(fec_type_channel_dout),
    .if_empty_n(fec_type_channel_empty_n),
    .if_read(compress_soft_U0_fec_type_read)
);

fifo_w32_d1_A fec_type_channel23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_fec_type_out2_din),
    .if_full_n(fec_type_channel23_full_n),
    .if_write(run_ber_entry311_U0_fec_type_out2_write),
    .if_dout(fec_type_channel23_dout),
    .if_empty_n(fec_type_channel23_empty_n),
    .if_read(run_ber_Block_data_g_U0_fec_type_read)
);

fifo_w32_d9_A soft_words_tx_channe_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_soft_words_tx_out_din),
    .if_full_n(soft_words_tx_channe_1_full_n),
    .if_write(run_ber_entry311_U0_soft_words_tx_out_write),
    .if_dout(soft_words_tx_channe_1_dout),
    .if_empty_n(soft_words_tx_channe_1_empty_n),
    .if_read(compress_soft_U0_soft_words_tx_read)
);

fifo_w32_d1_A hard_words_tx_channe_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_entry311_U0_hard_words_tx_out_din),
    .if_full_n(hard_words_tx_channe_1_full_n),
    .if_write(run_ber_entry311_U0_hard_words_tx_out_write),
    .if_dout(hard_words_tx_channe_1_dout),
    .if_empty_n(hard_words_tx_channe_1_empty_n),
    .if_read(gen_hard_words_U0_hard_words_tx_read)
);

fifo_w1_d16_A src_data_g_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(src_data_g_V_din),
    .if_full_n(src_data_g_V_full_n),
    .if_write(data_source_U0_src_data_V_write),
    .if_dout(src_data_g_V_dout),
    .if_empty_n(src_data_g_V_empty_n),
    .if_read(run_ber_Loop_dup_src_U0_src_data_g_V_read)
);

fifo_w32_d1_A block_cfg_k_channel2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(data_source_U0_ctrl_k_out_din),
    .if_full_n(block_cfg_k_channel2_2_full_n),
    .if_write(data_source_U0_ctrl_k_out_write),
    .if_dout(block_cfg_k_channel2_2_dout),
    .if_empty_n(block_cfg_k_channel2_2_empty_n),
    .if_read(run_ber_Loop_dup_src_U0_block_cfg_k_read)
);

fifo_w1_d16_A src_data_i_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_Loop_dup_src_U0_src_data_i_V_2_din),
    .if_full_n(src_data_i_V_1_full_n),
    .if_write(run_ber_Loop_dup_src_U0_src_data_i_V_2_write),
    .if_dout(src_data_i_V_1_dout),
    .if_empty_n(src_data_i_V_1_empty_n),
    .if_read(compress_src_U0_src_data_i_V_read)
);

fifo_w1_d16_A src_data_i_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_Loop_dup_src_U0_src_data_i_V_din),
    .if_full_n(src_data_i_V_full_n),
    .if_write(run_ber_Loop_dup_src_U0_src_data_i_V_write),
    .if_dout(src_data_i_V_dout),
    .if_empty_n(src_data_i_V_empty_n),
    .if_read(encoder_U0_src_data_V_read)
);

fifo_w32_d1_A block_cfg_k_channel2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_Loop_dup_src_U0_block_cfg_k_out_din),
    .if_full_n(block_cfg_k_channel2_1_full_n),
    .if_write(run_ber_Loop_dup_src_U0_block_cfg_k_out_write),
    .if_dout(block_cfg_k_channel2_1_dout),
    .if_empty_n(block_cfg_k_channel2_1_empty_n),
    .if_read(compress_src_U0_k_read)
);

fifo_w32_d1_A block_cfg_k_channel2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_Loop_dup_src_U0_block_cfg_k_out1_din),
    .if_full_n(block_cfg_k_channel2_full_n),
    .if_write(run_ber_Loop_dup_src_U0_block_cfg_k_out1_write),
    .if_dout(block_cfg_k_channel2_dout),
    .if_empty_n(block_cfg_k_channel2_empty_n),
    .if_read(encoder_U0_ctrl_k_read)
);

fifo_w32_d2_A block_cfg_outputs_ch_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_Loop_dup_src_U0_block_cfg_outputs_out_din),
    .if_full_n(block_cfg_outputs_ch_1_full_n),
    .if_write(run_ber_Loop_dup_src_U0_block_cfg_outputs_out_write),
    .if_dout(block_cfg_outputs_ch_1_dout),
    .if_empty_n(block_cfg_outputs_ch_1_empty_n),
    .if_read(run_ber_Loop_dup_enc_U0_block_cfg_outputs_read)
);

fifo_w1_d16_A enc_data_g_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(enc_data_g_V_din),
    .if_full_n(enc_data_g_V_full_n),
    .if_write(encoder_U0_enc_data_V_write),
    .if_dout(enc_data_g_V_dout),
    .if_empty_n(enc_data_g_V_empty_n),
    .if_read(run_ber_Loop_dup_enc_U0_enc_data_g_V_read)
);

fifo_w32_d1_A block_cfg_n_channel2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(encoder_U0_ctrl_n_out_din),
    .if_full_n(block_cfg_n_channel2_1_full_n),
    .if_write(encoder_U0_ctrl_n_out_write),
    .if_dout(block_cfg_n_channel2_1_dout),
    .if_empty_n(block_cfg_n_channel2_1_empty_n),
    .if_read(run_ber_Loop_dup_enc_U0_block_cfg_n_read)
);

fifo_w1_d16_A enc_data_i_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_Loop_dup_enc_U0_enc_data_i_V_din),
    .if_full_n(enc_data_i_V_full_n),
    .if_write(run_ber_Loop_dup_enc_U0_enc_data_i_V_write),
    .if_dout(enc_data_i_V_dout),
    .if_empty_n(enc_data_i_V_empty_n),
    .if_read(modulate_U0_src_data_V_read)
);

fifo_w32_d1_A block_cfg_n_channel2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_Loop_dup_enc_U0_block_cfg_n_out_din),
    .if_full_n(block_cfg_n_channel2_full_n),
    .if_write(run_ber_Loop_dup_enc_U0_block_cfg_n_out_write),
    .if_dout(block_cfg_n_channel2_dout),
    .if_empty_n(block_cfg_n_channel2_empty_n),
    .if_read(modulate_U0_block_size_read)
);

fifo_w32_d3_A block_cfg_outputs_ch_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_din),
    .if_full_n(block_cfg_outputs_ch_full_n),
    .if_write(run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_write),
    .if_dout(block_cfg_outputs_ch_dout),
    .if_empty_n(block_cfg_outputs_ch_empty_n),
    .if_read(run_ber_Loop_dup_cha_U0_block_cfg_outputs_read)
);

fifo_w16_d32_A mod_data_V_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(modulate_U0_mod_data_V_M_real_V_din),
    .if_full_n(mod_data_V_M_real_V_full_n),
    .if_write(modulate_U0_mod_data_V_M_real_V_write),
    .if_dout(mod_data_V_M_real_V_dout),
    .if_empty_n(mod_data_V_M_real_V_empty_n),
    .if_read(channel_U0_mod_data_V_M_real_V_read)
);

fifo_w16_d32_A mod_data_V_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(modulate_U0_mod_data_V_M_imag_V_din),
    .if_full_n(mod_data_V_M_imag_V_full_n),
    .if_write(modulate_U0_mod_data_V_M_imag_V_write),
    .if_dout(mod_data_V_M_imag_V_dout),
    .if_empty_n(mod_data_V_M_imag_V_empty_n),
    .if_read(channel_U0_mod_data_V_M_imag_V_read)
);

fifo_w1_d32_A mod_data_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mod_data_last_V_din),
    .if_full_n(mod_data_last_V_full_n),
    .if_write(modulate_U0_mod_data_last_V_write),
    .if_dout(mod_data_last_V_dout),
    .if_empty_n(mod_data_last_V_empty_n),
    .if_read(channel_U0_mod_data_last_V_read)
);

fifo_w32_d3_A block_cfg_mod_type_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(modulate_U0_modulation_type_out_din),
    .if_full_n(block_cfg_mod_type_c_full_n),
    .if_write(modulate_U0_modulation_type_out_write),
    .if_dout(block_cfg_mod_type_c_dout),
    .if_empty_n(block_cfg_mod_type_c_empty_n),
    .if_read(demodulate_U0_modulation_type_read)
);

fifo_w32_d3_A block_cfg_n_channel3_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(modulate_U0_block_size_out_din),
    .if_full_n(block_cfg_n_channel3_1_full_n),
    .if_write(modulate_U0_block_size_out_write),
    .if_dout(block_cfg_n_channel3_1_dout),
    .if_empty_n(block_cfg_n_channel3_1_empty_n),
    .if_read(demodulate_U0_block_size_read)
);

fifo_w19_d16_A chan_data_g_V_M_rea_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(channel_U0_chan_data_V_M_real_s_din),
    .if_full_n(chan_data_g_V_M_rea_full_n),
    .if_write(channel_U0_chan_data_V_M_real_s_write),
    .if_dout(chan_data_g_V_M_rea_dout),
    .if_empty_n(chan_data_g_V_M_rea_empty_n),
    .if_read(run_ber_Loop_dup_cha_U0_chan_data_g_V_M_real_V_read)
);

fifo_w19_d16_A chan_data_g_V_M_ima_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(channel_U0_chan_data_V_M_imag_s_din),
    .if_full_n(chan_data_g_V_M_ima_full_n),
    .if_write(channel_U0_chan_data_V_M_imag_s_write),
    .if_dout(chan_data_g_V_M_ima_dout),
    .if_empty_n(chan_data_g_V_M_ima_empty_n),
    .if_read(run_ber_Loop_dup_cha_U0_chan_data_g_V_M_imag_V_read)
);

fifo_w1_d32_A chan_data_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(chan_data_last_V_din),
    .if_full_n(chan_data_last_V_full_n),
    .if_write(channel_U0_chan_data_last_V_write),
    .if_dout(chan_data_last_V_dout),
    .if_empty_n(chan_data_last_V_empty_n),
    .if_read(run_ber_Loop_dup_cha_U0_chan_data_last_V_read)
);

fifo_w19_d16_A chan_data_i_V_M_rea_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_din),
    .if_full_n(chan_data_i_V_M_rea_full_n),
    .if_write(run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_write),
    .if_dout(chan_data_i_V_M_rea_dout),
    .if_empty_n(chan_data_i_V_M_rea_empty_n),
    .if_read(demodulate_U0_chan_data_V_M_real_s_read)
);

fifo_w19_d16_A chan_data_i_V_M_ima_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_din),
    .if_full_n(chan_data_i_V_M_ima_full_n),
    .if_write(run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_write),
    .if_dout(chan_data_i_V_M_ima_dout),
    .if_empty_n(chan_data_i_V_M_ima_empty_n),
    .if_read(demodulate_U0_chan_data_V_M_imag_s_read)
);

fifo_w16_d16_A soft_data_i_V_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(demodulate_U0_soft_data_V_V_din),
    .if_full_n(soft_data_i_V_V_full_n),
    .if_write(demodulate_U0_soft_data_V_V_write),
    .if_dout(soft_data_i_V_V_dout),
    .if_empty_n(soft_data_i_V_V_empty_n),
    .if_read(compress_soft_U0_soft_data_i_V_V_read)
);

fifo_w32_d1_A block_cfg_n_channel3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(demodulate_U0_block_size_out_din),
    .if_full_n(block_cfg_n_channel3_full_n),
    .if_write(demodulate_U0_block_size_out_write),
    .if_dout(block_cfg_n_channel3_dout),
    .if_empty_n(block_cfg_n_channel3_empty_n),
    .if_read(compress_soft_U0_n_read)
);

start_for_data_soDeQ start_for_data_soDeQ_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_data_source_U0_din),
    .if_full_n(start_for_data_source_U0_full_n),
    .if_write(run_ber_entry311_U0_start_write),
    .if_dout(start_for_data_source_U0_dout),
    .if_empty_n(start_for_data_source_U0_empty_n),
    .if_read(data_source_U0_ap_ready)
);

start_for_run_berEe0 start_for_run_berEe0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_run_ber_Loop_dup_src_U0_din),
    .if_full_n(start_for_run_ber_Loop_dup_src_U0_full_n),
    .if_write(run_ber_entry311_U0_start_write),
    .if_dout(start_for_run_ber_Loop_dup_src_U0_dout),
    .if_empty_n(start_for_run_ber_Loop_dup_src_U0_empty_n),
    .if_read(run_ber_Loop_dup_src_U0_ap_ready)
);

start_for_encoderFfa start_for_encoderFfa_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_encoder_U0_din),
    .if_full_n(start_for_encoder_U0_full_n),
    .if_write(run_ber_entry311_U0_start_write),
    .if_dout(start_for_encoder_U0_dout),
    .if_empty_n(start_for_encoder_U0_empty_n),
    .if_read(encoder_U0_ap_ready)
);

start_for_modulatGfk start_for_modulatGfk_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_modulate_U0_din),
    .if_full_n(start_for_modulate_U0_full_n),
    .if_write(run_ber_entry311_U0_start_write),
    .if_dout(start_for_modulate_U0_dout),
    .if_empty_n(start_for_modulate_U0_empty_n),
    .if_read(modulate_U0_ap_ready)
);

start_for_channelHfu start_for_channelHfu_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_channel_U0_din),
    .if_full_n(start_for_channel_U0_full_n),
    .if_write(run_ber_entry311_U0_start_write),
    .if_dout(start_for_channel_U0_dout),
    .if_empty_n(start_for_channel_U0_empty_n),
    .if_read(channel_U0_ap_ready)
);

start_for_demodulIfE start_for_demodulIfE_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_demodulate_U0_din),
    .if_full_n(start_for_demodulate_U0_full_n),
    .if_write(run_ber_entry311_U0_start_write),
    .if_dout(start_for_demodulate_U0_dout),
    .if_empty_n(start_for_demodulate_U0_empty_n),
    .if_read(demodulate_U0_ap_ready)
);

start_for_compresJfO start_for_compresJfO_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_compress_soft_U0_din),
    .if_full_n(start_for_compress_soft_U0_full_n),
    .if_write(run_ber_entry311_U0_start_write),
    .if_dout(start_for_compress_soft_U0_dout),
    .if_empty_n(start_for_compress_soft_U0_empty_n),
    .if_read(compress_soft_U0_ap_ready)
);

start_for_run_berKfY start_for_run_berKfY_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_run_ber_Block_data_g_U0_din),
    .if_full_n(start_for_run_ber_Block_data_g_U0_full_n),
    .if_write(run_ber_entry311_U0_start_write),
    .if_dout(start_for_run_ber_Block_data_g_U0_dout),
    .if_empty_n(start_for_run_ber_Block_data_g_U0_empty_n),
    .if_read(run_ber_Block_data_g_U0_ap_ready)
);

start_for_gen_harLf8 start_for_gen_harLf8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_gen_hard_words_U0_din),
    .if_full_n(start_for_gen_hard_words_U0_full_n),
    .if_write(run_ber_entry311_U0_start_write),
    .if_dout(start_for_gen_hard_words_U0_dout),
    .if_empty_n(start_for_gen_hard_words_U0_empty_n),
    .if_read(gen_hard_words_U0_ap_ready)
);

start_for_run_berMgi start_for_run_berMgi_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_run_ber_Loop_dup_enc_U0_din),
    .if_full_n(start_for_run_ber_Loop_dup_enc_U0_full_n),
    .if_write(run_ber_Loop_dup_src_U0_start_write),
    .if_dout(start_for_run_ber_Loop_dup_enc_U0_dout),
    .if_empty_n(start_for_run_ber_Loop_dup_enc_U0_empty_n),
    .if_read(run_ber_Loop_dup_enc_U0_ap_ready)
);

start_for_compresNgs start_for_compresNgs_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_compress_src_U0_din),
    .if_full_n(start_for_compress_src_U0_full_n),
    .if_write(run_ber_Loop_dup_src_U0_start_write),
    .if_dout(start_for_compress_src_U0_dout),
    .if_empty_n(start_for_compress_src_U0_empty_n),
    .if_read(compress_src_U0_ap_ready)
);

start_for_run_berOgC start_for_run_berOgC_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_run_ber_Loop_dup_cha_U0_din),
    .if_full_n(start_for_run_ber_Loop_dup_cha_U0_full_n),
    .if_write(channel_U0_start_write),
    .if_dout(start_for_run_ber_Loop_dup_cha_U0_dout),
    .if_empty_n(start_for_run_ber_Loop_dup_cha_U0_empty_n),
    .if_read(run_ber_Loop_dup_cha_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_compress_soft_U0_ap_done <= 1'b0;
    end else begin
        if ((1'b1 == ap_sync_done)) begin
            ap_reg_compress_soft_U0_ap_done <= 1'b0;
        end else begin
            ap_reg_compress_soft_U0_ap_done <= (compress_soft_U0_ap_done | ap_reg_compress_soft_U0_ap_done);
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_compress_src_U0_ap_done <= 1'b0;
    end else begin
        if ((1'b1 == ap_sync_done)) begin
            ap_reg_compress_src_U0_ap_done <= 1'b0;
        end else begin
            ap_reg_compress_src_U0_ap_done <= (compress_src_U0_ap_done | ap_reg_compress_src_U0_ap_done);
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_gen_hard_words_U0_ap_done <= 1'b0;
    end else begin
        if ((1'b1 == ap_sync_done)) begin
            ap_reg_gen_hard_words_U0_ap_done <= 1'b0;
        end else begin
            ap_reg_gen_hard_words_U0_ap_done <= (gen_hard_words_U0_ap_done | ap_reg_gen_hard_words_U0_ap_done);
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_run_ber_Block_data_g_U0_ap_done <= 1'b0;
    end else begin
        if ((1'b1 == ap_sync_done)) begin
            ap_reg_run_ber_Block_data_g_U0_ap_done <= 1'b0;
        end else begin
            ap_reg_run_ber_Block_data_g_U0_ap_done <= (run_ber_Block_data_g_U0_ap_done | ap_reg_run_ber_Block_data_g_U0_ap_done);
        end
    end
end

assign ap_done = ap_sync_done;

assign ap_idle = (run_ber_entry311_U0_ap_idle & data_source_U0_ap_idle & run_ber_Loop_dup_src_U0_ap_idle & encoder_U0_ap_idle & run_ber_Loop_dup_enc_U0_ap_idle & modulate_U0_ap_idle & channel_U0_ap_idle & run_ber_Loop_dup_cha_U0_ap_idle & demodulate_U0_ap_idle & compress_soft_U0_ap_idle & run_ber_Block_data_g_U0_ap_idle & compress_src_U0_ap_idle & gen_hard_words_U0_ap_idle);

assign ap_ready = run_ber_entry311_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = (ap_reg_compress_src_U0_ap_done & ap_reg_compress_soft_U0_ap_done & ap_reg_run_ber_Block_data_g_U0_ap_done & ap_reg_gen_hard_words_U0_ap_done);

assign ap_sync_ready = run_ber_entry311_U0_ap_ready;

assign chan_data_last_V_din = channel_U0_chan_data_last_V_din;

assign channel_U0_ap_continue = 1'b1;

assign channel_U0_ap_start = start_for_channel_U0_empty_n;

assign channel_U0_mod_data_last_V_dout = mod_data_last_V_dout;

assign compress_soft_U0_ap_continue = ap_continue;

assign compress_soft_U0_ap_start = start_for_compress_soft_U0_empty_n;

assign compress_src_U0_ap_continue = ap_continue;

assign compress_src_U0_ap_start = start_for_compress_src_U0_empty_n;

assign compress_src_U0_src_data_i_V_dout = src_data_i_V_1_dout;

assign data_source_U0_ap_continue = 1'b1;

assign data_source_U0_ap_start = start_for_data_source_U0_empty_n;

assign demodulate_U0_ap_continue = 1'b1;

assign demodulate_U0_ap_start = start_for_demodulate_U0_empty_n;

assign enc_data_g_V_din = encoder_U0_enc_data_V_din;

assign encoder_U0_ap_continue = 1'b1;

assign encoder_U0_ap_start = start_for_encoder_U0_empty_n;

assign encoder_U0_src_data_V_dout = src_data_i_V_dout;

assign fe_ctrl_V_V_TDATA = run_ber_Block_data_g_U0_fe_ctrl_V_V_TDATA;

assign fe_ctrl_V_V_TVALID = run_ber_Block_data_g_U0_fe_ctrl_V_V_TVALID;

assign gen_hard_words_U0_ap_continue = ap_continue;

assign gen_hard_words_U0_ap_start = start_for_gen_hard_words_U0_empty_n;

assign hard_words_TDATA = gen_hard_words_U0_hard_words_TDATA;

assign hard_words_TLAST = gen_hard_words_U0_hard_words_TLAST;

assign hard_words_TVALID = gen_hard_words_U0_hard_words_TVALID;

assign mod_data_last_V_din = modulate_U0_mod_data_last_V_din;

assign modulate_U0_ap_continue = 1'b1;

assign modulate_U0_ap_start = start_for_modulate_U0_empty_n;

assign modulate_U0_src_data_V_dout = enc_data_i_V_dout;

assign run_ber_Block_data_g_U0_ap_continue = ap_continue;

assign run_ber_Block_data_g_U0_ap_start = start_for_run_ber_Block_data_g_U0_empty_n;

assign run_ber_Loop_dup_cha_U0_ap_continue = 1'b1;

assign run_ber_Loop_dup_cha_U0_ap_start = start_for_run_ber_Loop_dup_cha_U0_empty_n;

assign run_ber_Loop_dup_enc_U0_ap_continue = 1'b1;

assign run_ber_Loop_dup_enc_U0_ap_start = start_for_run_ber_Loop_dup_enc_U0_empty_n;

assign run_ber_Loop_dup_src_U0_ap_continue = 1'b1;

assign run_ber_Loop_dup_src_U0_ap_start = start_for_run_ber_Loop_dup_src_U0_empty_n;

assign run_ber_entry311_U0_ap_continue = 1'b1;

assign run_ber_entry311_U0_ap_start = ap_start;

assign soft_data_TDATA = compress_soft_U0_soft_data_TDATA;

assign soft_data_TLAST = compress_soft_U0_soft_data_TLAST;

assign soft_data_TVALID = compress_soft_U0_soft_data_TVALID;

assign soft_words_TDATA = compress_soft_U0_soft_words_TDATA;

assign soft_words_TLAST = compress_soft_U0_soft_words_TLAST;

assign soft_words_TVALID = compress_soft_U0_soft_words_TVALID;

assign src_data_V_V_TDATA = compress_src_U0_src_data_V_V_TDATA;

assign src_data_V_V_TVALID = compress_src_U0_src_data_V_V_TVALID;

assign src_data_g_V_din = data_source_U0_src_data_V_din;

assign start_for_channel_U0_din = 1'b1;

assign start_for_compress_soft_U0_din = 1'b1;

assign start_for_compress_src_U0_din = 1'b1;

assign start_for_data_source_U0_din = 1'b1;

assign start_for_demodulate_U0_din = 1'b1;

assign start_for_encoder_U0_din = 1'b1;

assign start_for_gen_hard_words_U0_din = 1'b1;

assign start_for_modulate_U0_din = 1'b1;

assign start_for_run_ber_Block_data_g_U0_din = 1'b1;

assign start_for_run_ber_Loop_dup_cha_U0_din = 1'b1;

assign start_for_run_ber_Loop_dup_enc_U0_din = 1'b1;

assign start_for_run_ber_Loop_dup_src_U0_din = 1'b1;

endmodule //run_ber
