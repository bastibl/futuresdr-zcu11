// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compress_src (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        k_dout,
        k_empty_n,
        k_read,
        src_data_i_V_dout,
        src_data_i_V_empty_n,
        src_data_i_V_read,
        src_data_V_V_TDATA,
        src_data_V_V_TVALID,
        src_data_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_state4 = 5'd4;
parameter    ap_ST_fsm_state5 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] k_dout;
input   k_empty_n;
output   k_read;
input   src_data_i_V_dout;
input   src_data_i_V_empty_n;
output   src_data_i_V_read;
output  [127:0] src_data_V_V_TDATA;
output   src_data_V_V_TVALID;
input   src_data_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg k_read;
reg src_data_i_V_read;
reg[127:0] src_data_V_V_TDATA;
reg src_data_V_V_TVALID;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    k_blk_n;
reg    src_data_i_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_i_reg_256;
reg    src_data_V_V_TDATA_blk_n;
reg   [0:0] tmp_i_reg_265;
wire    ap_CS_fsm_state6;
reg   [0:0] tmp_i_72_reg_274;
wire   [0:0] tmp_28_i_fu_233_p2;
reg   [127:0] p_Val2_s_reg_107;
reg   [31:0] i_i_reg_119;
reg   [31:0] k_read_reg_245;
reg    ap_block_state1;
reg   [15:0] h_i_2_load_reg_250;
reg    ap_enable_reg_pp0_iter0;
reg    ap_sig_ioackin_src_data_V_V_TREADY;
reg    ap_block_state3_io;
reg    ap_block_state3;
wire   [0:0] exitcond_i_fu_157_p2;
wire   [31:0] i_fu_162_p2;
wire   [0:0] tmp_i_fu_168_p2;
wire   [127:0] src_word_V_fu_195_p3;
wire   [0:0] tmp_i_72_fu_204_p2;
wire    ap_CS_fsm_state4;
reg   [126:0] p_Result_i_73_reg_278;
wire    ap_CS_fsm_state5;
wire   [15:0] h_i_1_fu_219_p2;
reg   [15:0] h_i_1_reg_283;
wire   [127:0] src_word_V_1_fu_225_p3;
reg    ap_predicate_op48_write_state6;
reg    ap_block_state6_io;
reg   [127:0] p_Val2_1_reg_130;
reg   [15:0] h_i_2_i_reg_140;
reg   [15:0] h_i_2_fu_84;
wire   [15:0] h_i_fu_174_p2;
reg    ap_reg_ioackin_src_data_V_V_TREADY;
wire   [0:0] src_word_V_fu_195_p1;
wire   [126:0] p_Result_i_fu_185_p4;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_src_data_V_V_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0) & ((1'd1 == tmp_28_i_fu_233_p2) | (1'd1 == tmp_i_72_reg_274)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) & (1'd1 == exitcond_i_fu_157_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) & ~(1'd1 == exitcond_i_fu_157_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) & (1'd1 == exitcond_i_fu_157_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_src_data_V_V_TREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_i_reg_265 == 1'd1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3)))) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_predicate_op48_write_state6) & (ap_block_state6_io == 1'b0)))) begin
            ap_reg_ioackin_src_data_V_V_TREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_i_reg_265 == 1'd1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) & (1'b1 == src_data_V_V_TREADY)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_predicate_op48_write_state6) & (1'b1 == src_data_V_V_TREADY)))) begin
            ap_reg_ioackin_src_data_V_V_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) & (1'd0 == exitcond_i_fu_157_p2) & (1'd0 == tmp_i_fu_168_p2))) begin
        h_i_2_fu_84 <= h_i_fu_174_p2;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) & (1'd0 == exitcond_i_fu_157_p2) & (1'd1 == tmp_i_fu_168_p2)))) begin
        h_i_2_fu_84 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_i_72_fu_204_p2))) begin
        h_i_2_i_reg_140 <= h_i_2_load_reg_250;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_i_72_reg_274) & (ap_block_state6_io == 1'b0) & (1'd0 == tmp_28_i_fu_233_p2))) begin
        h_i_2_i_reg_140 <= h_i_1_reg_283;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) & (1'd0 == exitcond_i_fu_157_p2))) begin
        i_i_reg_119 <= i_fu_162_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        i_i_reg_119 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_i_72_fu_204_p2))) begin
        p_Val2_1_reg_130 <= p_Val2_s_reg_107;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_i_72_reg_274) & (ap_block_state6_io == 1'b0) & (1'd0 == tmp_28_i_fu_233_p2))) begin
        p_Val2_1_reg_130 <= src_word_V_1_fu_225_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_256 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))))) begin
        p_Val2_s_reg_107 <= src_word_V_fu_195_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        p_Val2_s_reg_107 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))))) begin
        exitcond_i_reg_256 <= exitcond_i_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        h_i_1_reg_283 <= h_i_1_fu_219_p2;
        p_Result_i_73_reg_278 <= {{p_Val2_1_reg_130[127:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))))) begin
        h_i_2_load_reg_250 <= h_i_2_fu_84;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        k_read_reg_245 <= k_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_i_72_reg_274 <= tmp_i_72_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) & (1'd0 == exitcond_i_fu_157_p2))) begin
        tmp_i_reg_265 <= tmp_i_fu_168_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0) & ((1'd1 == tmp_28_i_fu_233_p2) | (1'd1 == tmp_i_72_reg_274))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (ap_block_state6_io == 1'b0) & ((1'd1 == tmp_28_i_fu_233_p2) | (1'd1 == tmp_i_72_reg_274)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_src_data_V_V_TREADY)) begin
        ap_sig_ioackin_src_data_V_V_TREADY = src_data_V_V_TREADY;
    end else begin
        ap_sig_ioackin_src_data_V_V_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        k_blk_n = k_empty_n;
    end else begin
        k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        k_read = 1'b1;
    end else begin
        k_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_predicate_op48_write_state6))) begin
        src_data_V_V_TDATA = src_word_V_1_fu_225_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_i_reg_265 == 1'd1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)))) begin
        src_data_V_V_TDATA = src_word_V_fu_195_p3;
    end else begin
        src_data_V_V_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_i_reg_265 == 1'd1)) | ((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_i_72_reg_274) & (1'd1 == tmp_28_i_fu_233_p2)))) begin
        src_data_V_V_TDATA_blk_n = src_data_V_V_TREADY;
    end else begin
        src_data_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_i_reg_265 == 1'd1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) & (1'b0 == ap_reg_ioackin_src_data_V_V_TREADY)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == ap_predicate_op48_write_state6) & (1'b0 == ap_reg_ioackin_src_data_V_V_TREADY)))) begin
        src_data_V_V_TVALID = 1'b1;
    end else begin
        src_data_V_V_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_256 == 1'd0))) begin
        src_data_i_V_blk_n = src_data_i_V_empty_n;
    end else begin
        src_data_i_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_256 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))))) begin
        src_data_i_V_read = 1'b1;
    end else begin
        src_data_i_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((ap_block_state1 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) & (1'd1 == exitcond_i_fu_157_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & ((1'b1 == ap_block_state3_io) | (1'b1 == ap_block_state3))) & (1'd1 == exitcond_i_fu_157_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((1'd0 == tmp_i_72_fu_204_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((ap_block_state6_io == 1'b0) & ((1'd1 == tmp_28_i_fu_233_p2) | (1'd1 == tmp_i_72_reg_274)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'd0 == tmp_i_72_reg_274) & (ap_block_state6_io == 1'b0) & (1'd0 == tmp_28_i_fu_233_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == k_empty_n));
end

always @ (*) begin
    ap_block_state3 = ((exitcond_i_reg_256 == 1'd0) & (1'b0 == src_data_i_V_empty_n));
end

always @ (*) begin
    ap_block_state3_io = ((tmp_i_reg_265 == 1'd1) & (1'b0 == ap_sig_ioackin_src_data_V_V_TREADY));
end

always @ (*) begin
    ap_block_state6_io = ((1'b0 == ap_sig_ioackin_src_data_V_V_TREADY) & (1'b1 == ap_predicate_op48_write_state6));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op48_write_state6 = ((1'd0 == tmp_i_72_reg_274) & (1'd1 == tmp_28_i_fu_233_p2));
end

assign exitcond_i_fu_157_p2 = ((i_i_reg_119 == k_read_reg_245) ? 1'b1 : 1'b0);

assign h_i_1_fu_219_p2 = (h_i_2_i_reg_140 + 16'd1);

assign h_i_fu_174_p2 = (h_i_2_fu_84 + 16'd1);

assign i_fu_162_p2 = (i_i_reg_119 + 32'd1);

assign p_Result_i_fu_185_p4 = {{p_Val2_s_reg_107[127:1]}};

assign src_word_V_1_fu_225_p3 = {{1'd0}, {p_Result_i_73_reg_278}};

assign src_word_V_fu_195_p1 = src_data_i_V_dout;

assign src_word_V_fu_195_p3 = {{src_word_V_fu_195_p1}, {p_Result_i_fu_185_p4}};

assign tmp_28_i_fu_233_p2 = ((h_i_1_reg_283 == 16'd128) ? 1'b1 : 1'b0);

assign tmp_i_72_fu_204_p2 = ((h_i_2_load_reg_250 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_i_fu_168_p2 = ((h_i_2_fu_84 == 16'd127) ? 1'b1 : 1'b0);

endmodule //compress_src
