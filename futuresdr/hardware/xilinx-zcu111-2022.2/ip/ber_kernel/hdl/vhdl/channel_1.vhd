-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity channel_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    snr_V : IN STD_LOGIC_VECTOR (16 downto 0);
    src_data_V_M_real_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    src_data_V_M_real_V_empty_n : IN STD_LOGIC;
    src_data_V_M_real_V_read : OUT STD_LOGIC;
    src_data_V_M_imag_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    src_data_V_M_imag_V_empty_n : IN STD_LOGIC;
    src_data_V_M_imag_V_read : OUT STD_LOGIC;
    src_data_last_V_dout : IN STD_LOGIC;
    src_data_last_V_empty_n : IN STD_LOGIC;
    src_data_last_V_read : OUT STD_LOGIC;
    err_data_V_M_real_V_din : OUT STD_LOGIC_VECTOR (18 downto 0);
    err_data_V_M_real_V_full_n : IN STD_LOGIC;
    err_data_V_M_real_V_write : OUT STD_LOGIC;
    err_data_V_M_imag_V_din : OUT STD_LOGIC_VECTOR (18 downto 0);
    err_data_V_M_imag_V_full_n : IN STD_LOGIC;
    err_data_V_M_imag_V_write : OUT STD_LOGIC;
    err_data_last_V_din : OUT STD_LOGIC;
    err_data_last_V_full_n : IN STD_LOGIC;
    err_data_last_V_write : OUT STD_LOGIC );
end;


architecture behav of channel_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv17_1CFD5 : STD_LOGIC_VECTOR (16 downto 0) := "11100111111010101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv16_9FAB : STD_LOGIC_VECTOR (15 downto 0) := "1001111110101011";
    constant ap_const_lv16_CFD5 : STD_LOGIC_VECTOR (15 downto 0) := "1100111111010101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_V_M_real_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal src_data_V_M_imag_V_blk_n : STD_LOGIC;
    signal src_data_last_V_blk_n : STD_LOGIC;
    signal err_data_V_M_real_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal err_data_V_M_imag_V_blk_n : STD_LOGIC;
    signal err_data_last_V_blk_n : STD_LOGIC;
    signal tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter22_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_519 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_fu_267_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sh_assign_reg_525 : STD_LOGIC_VECTOR (1 downto 0);
    signal snr_mod_V_fu_306_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal snr_mod_V_reg_530 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal signbit_reg_535 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_11_reg_542 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_reg_547 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_552 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_12_fu_357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_12_reg_558 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal carry_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_576 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_cast_fu_392_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sh_assign_cast_reg_581 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal awgn_snr_V_fu_463_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal awgn_snr_V_reg_587 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_data_V_M_real_V0_status : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal err_data_V_M_real_V1_status : STD_LOGIC;
    signal ap_block_state28 : BOOLEAN;
    signal ap_reg_pp0_iter1_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter1_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter2_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter3_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter3_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter4_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter4_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter5_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter5_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter6_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter6_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter7_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter7_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter8_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter8_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter9_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter9_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter10_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter10_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter11_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter11_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter12_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter12_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter13_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter13_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter14_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter14_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter15_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter15_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter16_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter16_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter17_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter17_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter18_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter18_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter19_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter19_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter20_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter20_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter21_empty_reg_593_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_reg_pp0_iter21_empty_reg_593_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_read_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter20_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter21_tmp_31_reg_599 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_awgn_real_fu_219_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal awgn_sample_real_V_reg_603 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal grp_awgn_imag_fu_232_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal awgn_sample_imag_V_reg_608 : STD_LOGIC_VECTOR (17 downto 0);
    signal err_sample_real_V_fu_493_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_real_V_reg_613 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal err_sample_imag_V_fu_507_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_imag_V_reg_618 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal grp_awgn_real_fu_219_ap_start : STD_LOGIC;
    signal grp_awgn_real_fu_219_ap_done : STD_LOGIC;
    signal grp_awgn_real_fu_219_ap_idle : STD_LOGIC;
    signal grp_awgn_real_fu_219_ap_ready : STD_LOGIC;
    signal grp_awgn_real_fu_219_ap_ce : STD_LOGIC;
    signal ap_block_state28_ignore_call6 : BOOLEAN;
    signal grp_awgn_imag_fu_232_ap_start : STD_LOGIC;
    signal grp_awgn_imag_fu_232_ap_done : STD_LOGIC;
    signal grp_awgn_imag_fu_232_ap_idle : STD_LOGIC;
    signal grp_awgn_imag_fu_232_ap_ready : STD_LOGIC;
    signal grp_awgn_imag_fu_232_ap_ce : STD_LOGIC;
    signal ap_block_state28_ignore_call7 : BOOLEAN;
    signal ap_reg_grp_awgn_real_fu_219_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_awgn_imag_fu_232_ap_start : STD_LOGIC := '0';
    signal src_data_V_M_real_V0_update : STD_LOGIC;
    signal err_data_V_M_real_V1_update : STD_LOGIC;
    signal tmp_24_fu_251_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_cast_fu_259_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_25_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_cast_cast_fu_282_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_294_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_cast_fu_302_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_362_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_395_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_not_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_not_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i_not_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_not_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux_fu_449_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_456_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_15_fu_477_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_fu_489_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_2_fu_485_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_16_fu_481_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_s_fu_503_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_6_fu_499_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_468 : BOOLEAN;

    component awgn_real IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component awgn_imag IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    grp_awgn_real_fu_219 : component awgn_real
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_awgn_real_fu_219_ap_start,
        ap_done => grp_awgn_real_fu_219_ap_done,
        ap_idle => grp_awgn_real_fu_219_ap_idle,
        ap_ready => grp_awgn_real_fu_219_ap_ready,
        ap_ce => grp_awgn_real_fu_219_ap_ce,
        snr_V => awgn_snr_V_reg_587,
        ap_return => grp_awgn_real_fu_219_ap_return);

    grp_awgn_imag_fu_232 : component awgn_imag
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_awgn_imag_fu_232_ap_start,
        ap_done => grp_awgn_imag_fu_232_ap_done,
        ap_idle => grp_awgn_imag_fu_232_ap_idle,
        ap_ready => grp_awgn_imag_fu_232_ap_ready,
        ap_ce => grp_awgn_imag_fu_232_ap_ce,
        snr_V => awgn_snr_V_reg_587,
        ap_return => grp_awgn_imag_fu_232_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) and (ap_const_lv1_1 = tmp_31_read_fu_194_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_awgn_imag_fu_232_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_awgn_imag_fu_232_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))))) then 
                    ap_reg_grp_awgn_imag_fu_232_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_awgn_imag_fu_232_ap_ready)) then 
                    ap_reg_grp_awgn_imag_fu_232_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_awgn_real_fu_219_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_awgn_real_fu_219_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))))) then 
                    ap_reg_grp_awgn_real_fu_219_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_awgn_real_fu_219_ap_ready)) then 
                    ap_reg_grp_awgn_real_fu_219_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Range1_all_ones_reg_570 <= Range1_all_ones_fu_382_p2;
                Range1_all_zeros_reg_576 <= Range1_all_zeros_fu_387_p2;
                carry_reg_564 <= carry_fu_376_p2;
                p_Val2_12_reg_558 <= p_Val2_12_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) then
                ap_reg_pp0_iter10_empty_reg_593_0 <= ap_reg_pp0_iter9_empty_reg_593_0;
                ap_reg_pp0_iter10_empty_reg_593_1 <= ap_reg_pp0_iter9_empty_reg_593_1;
                ap_reg_pp0_iter10_tmp_31_reg_599 <= ap_reg_pp0_iter9_tmp_31_reg_599;
                ap_reg_pp0_iter11_empty_reg_593_0 <= ap_reg_pp0_iter10_empty_reg_593_0;
                ap_reg_pp0_iter11_empty_reg_593_1 <= ap_reg_pp0_iter10_empty_reg_593_1;
                ap_reg_pp0_iter11_tmp_31_reg_599 <= ap_reg_pp0_iter10_tmp_31_reg_599;
                ap_reg_pp0_iter12_empty_reg_593_0 <= ap_reg_pp0_iter11_empty_reg_593_0;
                ap_reg_pp0_iter12_empty_reg_593_1 <= ap_reg_pp0_iter11_empty_reg_593_1;
                ap_reg_pp0_iter12_tmp_31_reg_599 <= ap_reg_pp0_iter11_tmp_31_reg_599;
                ap_reg_pp0_iter13_empty_reg_593_0 <= ap_reg_pp0_iter12_empty_reg_593_0;
                ap_reg_pp0_iter13_empty_reg_593_1 <= ap_reg_pp0_iter12_empty_reg_593_1;
                ap_reg_pp0_iter13_tmp_31_reg_599 <= ap_reg_pp0_iter12_tmp_31_reg_599;
                ap_reg_pp0_iter14_empty_reg_593_0 <= ap_reg_pp0_iter13_empty_reg_593_0;
                ap_reg_pp0_iter14_empty_reg_593_1 <= ap_reg_pp0_iter13_empty_reg_593_1;
                ap_reg_pp0_iter14_tmp_31_reg_599 <= ap_reg_pp0_iter13_tmp_31_reg_599;
                ap_reg_pp0_iter15_empty_reg_593_0 <= ap_reg_pp0_iter14_empty_reg_593_0;
                ap_reg_pp0_iter15_empty_reg_593_1 <= ap_reg_pp0_iter14_empty_reg_593_1;
                ap_reg_pp0_iter15_tmp_31_reg_599 <= ap_reg_pp0_iter14_tmp_31_reg_599;
                ap_reg_pp0_iter16_empty_reg_593_0 <= ap_reg_pp0_iter15_empty_reg_593_0;
                ap_reg_pp0_iter16_empty_reg_593_1 <= ap_reg_pp0_iter15_empty_reg_593_1;
                ap_reg_pp0_iter16_tmp_31_reg_599 <= ap_reg_pp0_iter15_tmp_31_reg_599;
                ap_reg_pp0_iter17_empty_reg_593_0 <= ap_reg_pp0_iter16_empty_reg_593_0;
                ap_reg_pp0_iter17_empty_reg_593_1 <= ap_reg_pp0_iter16_empty_reg_593_1;
                ap_reg_pp0_iter17_tmp_31_reg_599 <= ap_reg_pp0_iter16_tmp_31_reg_599;
                ap_reg_pp0_iter18_empty_reg_593_0 <= ap_reg_pp0_iter17_empty_reg_593_0;
                ap_reg_pp0_iter18_empty_reg_593_1 <= ap_reg_pp0_iter17_empty_reg_593_1;
                ap_reg_pp0_iter18_tmp_31_reg_599 <= ap_reg_pp0_iter17_tmp_31_reg_599;
                ap_reg_pp0_iter19_empty_reg_593_0 <= ap_reg_pp0_iter18_empty_reg_593_0;
                ap_reg_pp0_iter19_empty_reg_593_1 <= ap_reg_pp0_iter18_empty_reg_593_1;
                ap_reg_pp0_iter19_tmp_31_reg_599 <= ap_reg_pp0_iter18_tmp_31_reg_599;
                ap_reg_pp0_iter20_empty_reg_593_0 <= ap_reg_pp0_iter19_empty_reg_593_0;
                ap_reg_pp0_iter20_empty_reg_593_1 <= ap_reg_pp0_iter19_empty_reg_593_1;
                ap_reg_pp0_iter20_tmp_31_reg_599 <= ap_reg_pp0_iter19_tmp_31_reg_599;
                ap_reg_pp0_iter21_empty_reg_593_0 <= ap_reg_pp0_iter20_empty_reg_593_0;
                ap_reg_pp0_iter21_empty_reg_593_1 <= ap_reg_pp0_iter20_empty_reg_593_1;
                ap_reg_pp0_iter21_tmp_31_reg_599 <= ap_reg_pp0_iter20_tmp_31_reg_599;
                ap_reg_pp0_iter22_tmp_31_reg_599 <= ap_reg_pp0_iter21_tmp_31_reg_599;
                ap_reg_pp0_iter2_empty_reg_593_0 <= ap_reg_pp0_iter1_empty_reg_593_0;
                ap_reg_pp0_iter2_empty_reg_593_1 <= ap_reg_pp0_iter1_empty_reg_593_1;
                ap_reg_pp0_iter2_tmp_31_reg_599 <= ap_reg_pp0_iter1_tmp_31_reg_599;
                ap_reg_pp0_iter3_empty_reg_593_0 <= ap_reg_pp0_iter2_empty_reg_593_0;
                ap_reg_pp0_iter3_empty_reg_593_1 <= ap_reg_pp0_iter2_empty_reg_593_1;
                ap_reg_pp0_iter3_tmp_31_reg_599 <= ap_reg_pp0_iter2_tmp_31_reg_599;
                ap_reg_pp0_iter4_empty_reg_593_0 <= ap_reg_pp0_iter3_empty_reg_593_0;
                ap_reg_pp0_iter4_empty_reg_593_1 <= ap_reg_pp0_iter3_empty_reg_593_1;
                ap_reg_pp0_iter4_tmp_31_reg_599 <= ap_reg_pp0_iter3_tmp_31_reg_599;
                ap_reg_pp0_iter5_empty_reg_593_0 <= ap_reg_pp0_iter4_empty_reg_593_0;
                ap_reg_pp0_iter5_empty_reg_593_1 <= ap_reg_pp0_iter4_empty_reg_593_1;
                ap_reg_pp0_iter5_tmp_31_reg_599 <= ap_reg_pp0_iter4_tmp_31_reg_599;
                ap_reg_pp0_iter6_empty_reg_593_0 <= ap_reg_pp0_iter5_empty_reg_593_0;
                ap_reg_pp0_iter6_empty_reg_593_1 <= ap_reg_pp0_iter5_empty_reg_593_1;
                ap_reg_pp0_iter6_tmp_31_reg_599 <= ap_reg_pp0_iter5_tmp_31_reg_599;
                ap_reg_pp0_iter7_empty_reg_593_0 <= ap_reg_pp0_iter6_empty_reg_593_0;
                ap_reg_pp0_iter7_empty_reg_593_1 <= ap_reg_pp0_iter6_empty_reg_593_1;
                ap_reg_pp0_iter7_tmp_31_reg_599 <= ap_reg_pp0_iter6_tmp_31_reg_599;
                ap_reg_pp0_iter8_empty_reg_593_0 <= ap_reg_pp0_iter7_empty_reg_593_0;
                ap_reg_pp0_iter8_empty_reg_593_1 <= ap_reg_pp0_iter7_empty_reg_593_1;
                ap_reg_pp0_iter8_tmp_31_reg_599 <= ap_reg_pp0_iter7_tmp_31_reg_599;
                ap_reg_pp0_iter9_empty_reg_593_0 <= ap_reg_pp0_iter8_empty_reg_593_0;
                ap_reg_pp0_iter9_empty_reg_593_1 <= ap_reg_pp0_iter8_empty_reg_593_1;
                ap_reg_pp0_iter9_tmp_31_reg_599 <= ap_reg_pp0_iter8_tmp_31_reg_599;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28))))) then
                ap_reg_pp0_iter1_empty_reg_593_0 <= empty_reg_593_0;
                ap_reg_pp0_iter1_empty_reg_593_1 <= empty_reg_593_1;
                ap_reg_pp0_iter1_tmp_31_reg_599 <= tmp_31_reg_599;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter21))) then
                awgn_sample_imag_V_reg_608 <= grp_awgn_imag_fu_232_ap_return;
                awgn_sample_real_V_reg_603 <= grp_awgn_real_fu_219_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                awgn_snr_V_reg_587 <= awgn_snr_V_fu_463_p3;
                    sh_assign_cast_reg_581(1 downto 0) <= sh_assign_cast_fu_392_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))))) then
                empty_reg_593_0 <= src_data_V_M_real_V_dout;
                empty_reg_593_1 <= src_data_V_M_imag_V_dout;
                tmp_31_reg_599 <= (0=>src_data_last_V_dout, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter22))) then
                err_sample_imag_V_reg_618 <= err_sample_imag_V_fu_507_p2;
                err_sample_real_V_reg_613 <= err_sample_real_V_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_Result_3_reg_552 <= snr_mod_V_fu_306_p2(16 downto 15);
                p_Val2_11_reg_542 <= snr_mod_V_fu_306_p2(14 downto 7);
                signbit_reg_535 <= snr_mod_V_fu_306_p2(16 downto 16);
                snr_mod_V_reg_530 <= snr_mod_V_fu_306_p2;
                tmp_27_reg_547 <= snr_mod_V_fu_306_p2(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sh_assign_reg_525 <= sh_assign_fu_267_p3;
                tmp_reg_519 <= tmp_fu_245_p2;
            end if;
        end if;
    end process;
    sh_assign_cast_reg_581(17 downto 2) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter23, ap_block_state28, ap_enable_reg_pp0_iter22)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((ap_start = ap_const_logic_1)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28))) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28))) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_382_p2 <= "1" when (p_Result_3_reg_552 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_387_p2 <= "1" when (p_Result_3_reg_552 = ap_const_lv2_0) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state29 <= ap_CS_fsm(5);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state28_assign_proc : process(err_data_last_V_full_n, ap_reg_pp0_iter22_tmp_31_reg_599, err_data_V_M_real_V1_status)
    begin
                ap_block_state28 <= ((ap_const_logic_0 = err_data_V_M_real_V1_status) or ((ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_0) and (ap_const_logic_0 = err_data_last_V_full_n)) or ((ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_1) and (ap_const_logic_0 = err_data_last_V_full_n)));
    end process;


    ap_block_state28_ignore_call6_assign_proc : process(err_data_last_V_full_n, ap_reg_pp0_iter22_tmp_31_reg_599, err_data_V_M_real_V1_status)
    begin
                ap_block_state28_ignore_call6 <= ((ap_const_logic_0 = err_data_V_M_real_V1_status) or ((ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_0) and (ap_const_logic_0 = err_data_last_V_full_n)) or ((ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_1) and (ap_const_logic_0 = err_data_last_V_full_n)));
    end process;


    ap_block_state28_ignore_call7_assign_proc : process(err_data_last_V_full_n, ap_reg_pp0_iter22_tmp_31_reg_599, err_data_V_M_real_V1_status)
    begin
                ap_block_state28_ignore_call7 <= ((ap_const_logic_0 = err_data_V_M_real_V1_status) or ((ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_0) and (ap_const_logic_0 = err_data_last_V_full_n)) or ((ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_1) and (ap_const_logic_0 = err_data_last_V_full_n)));
    end process;


    ap_block_state5_assign_proc : process(src_data_last_V_empty_n, src_data_V_M_real_V0_status)
    begin
                ap_block_state5 <= ((ap_const_logic_0 = src_data_V_M_real_V0_status) or (ap_const_logic_0 = src_data_last_V_empty_n));
    end process;


    ap_condition_468_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_state28)
    begin
                ap_condition_468 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28))));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state29)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19) and (ap_const_logic_0 = ap_enable_reg_pp0_iter20) and (ap_const_logic_0 = ap_enable_reg_pp0_iter21) and (ap_const_logic_0 = ap_enable_reg_pp0_iter22) and (ap_const_logic_0 = ap_enable_reg_pp0_iter23))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    awgn_snr_V_fu_463_p3 <= 
        p_mux_fu_449_p3 when (brmerge_fu_443_p2(0) = '1') else 
        p_s_fu_456_p3;
    brmerge_fu_443_p2 <= (neg_src_not_fu_425_p2 or p_39_demorgan_i_not_fu_437_p2);
    brmerge_i_i_not_fu_431_p2 <= (p_39_demorgan_i_fu_415_p2 and neg_src_not_fu_425_p2);
    carry_fu_376_p2 <= (tmp_28_fu_350_p3 and tmp_8_fu_370_p2);
    deleted_zeros_fu_395_p3 <= 
        Range1_all_ones_reg_570 when (carry_reg_564(0) = '1') else 
        Range1_all_zeros_reg_576;

    err_data_V_M_imag_V_blk_n_assign_proc : process(err_data_V_M_imag_V_full_n, ap_enable_reg_pp0_iter23)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter23)) then 
            err_data_V_M_imag_V_blk_n <= err_data_V_M_imag_V_full_n;
        else 
            err_data_V_M_imag_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    err_data_V_M_imag_V_din <= err_sample_imag_V_reg_618;
    err_data_V_M_imag_V_write <= err_data_V_M_real_V1_update;
    err_data_V_M_real_V1_status <= (err_data_V_M_real_V_full_n and err_data_V_M_imag_V_full_n);

    err_data_V_M_real_V1_update_assign_proc : process(ap_enable_reg_pp0_iter23, ap_block_state28)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28))))) then 
            err_data_V_M_real_V1_update <= ap_const_logic_1;
        else 
            err_data_V_M_real_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    err_data_V_M_real_V_blk_n_assign_proc : process(err_data_V_M_real_V_full_n, ap_enable_reg_pp0_iter23)
    begin
        if ((ap_const_logic_1 = ap_enable_reg_pp0_iter23)) then 
            err_data_V_M_real_V_blk_n <= err_data_V_M_real_V_full_n;
        else 
            err_data_V_M_real_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    err_data_V_M_real_V_din <= err_sample_real_V_reg_613;
    err_data_V_M_real_V_write <= err_data_V_M_real_V1_update;

    err_data_last_V_blk_n_assign_proc : process(err_data_last_V_full_n, ap_enable_reg_pp0_iter23, ap_reg_pp0_iter22_tmp_31_reg_599)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_0)))) then 
            err_data_last_V_blk_n <= err_data_last_V_full_n;
        else 
            err_data_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    err_data_last_V_din_assign_proc : process(ap_reg_pp0_iter22_tmp_31_reg_599, ap_condition_468)
    begin
        if ((ap_condition_468 = ap_const_boolean_1)) then
            if ((ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_1)) then 
                err_data_last_V_din <= ap_const_logic_1;
            elsif ((ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_0)) then 
                err_data_last_V_din <= ap_const_logic_0;
            else 
                err_data_last_V_din <= 'X';
            end if;
        else 
            err_data_last_V_din <= 'X';
        end if; 
    end process;


    err_data_last_V_write_assign_proc : process(ap_enable_reg_pp0_iter23, ap_reg_pp0_iter22_tmp_31_reg_599, ap_block_state28)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_reg_pp0_iter22_tmp_31_reg_599 = ap_const_lv1_1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))))) then 
            err_data_last_V_write <= ap_const_logic_1;
        else 
            err_data_last_V_write <= ap_const_logic_0;
        end if; 
    end process;

    err_sample_imag_V_fu_507_p2 <= std_logic_vector(signed(tmp_s_fu_503_p1) + signed(tmp_6_fu_499_p1));
    err_sample_real_V_fu_493_p2 <= std_logic_vector(signed(tmp_3_fu_489_p1) + signed(tmp_2_fu_485_p1));

    grp_awgn_imag_fu_232_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_block_state28_ignore_call7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28_ignore_call7))))) then 
            grp_awgn_imag_fu_232_ap_ce <= ap_const_logic_1;
        else 
            grp_awgn_imag_fu_232_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_awgn_imag_fu_232_ap_start <= ap_reg_grp_awgn_imag_fu_232_ap_start;

    grp_awgn_real_fu_219_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_block_state28_ignore_call6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28_ignore_call6))))) then 
            grp_awgn_real_fu_219_ap_ce <= ap_const_logic_1;
        else 
            grp_awgn_real_fu_219_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_awgn_real_fu_219_ap_start <= ap_reg_grp_awgn_real_fu_219_ap_start;
    neg_src_fu_410_p2 <= (signbit_reg_535 and tmp_9_fu_404_p2);
    neg_src_not_fu_425_p2 <= (p_38_i_fu_400_p2 or signbit_not_fu_420_p2);
    p_2_cast_fu_259_p3 <= 
        ap_const_lv2_0 when (tmp_fu_245_p2(0) = '1') else 
        ap_const_lv2_1;
    p_38_i_fu_400_p2 <= (carry_reg_564 and Range1_all_ones_reg_570);
    p_39_demorgan_i_fu_415_p2 <= (deleted_zeros_fu_395_p3 or signbit_reg_535);
    p_39_demorgan_i_not_fu_437_p2 <= (p_39_demorgan_i_fu_415_p2 xor ap_const_lv1_1);
    p_Val2_12_fu_357_p2 <= std_logic_vector(unsigned(p_Val2_11_reg_542) + unsigned(tmp_7_fu_347_p1));
    p_Val2_15_fu_477_p2 <= std_logic_vector(shift_right(signed(awgn_sample_real_V_reg_603),to_integer(unsigned('0' & sh_assign_cast_reg_581(18-1 downto 0)))));
    p_Val2_16_fu_481_p2 <= std_logic_vector(shift_right(signed(awgn_sample_imag_V_reg_608),to_integer(unsigned('0' & sh_assign_cast_reg_581(18-1 downto 0)))));
        p_Val2_cast_fu_302_p1 <= std_logic_vector(resize(signed(p_Val2_s_fu_294_p3),17));

    p_Val2_s_fu_294_p3 <= 
        tmp_49_cast_cast_fu_282_p3 when (tmp_4_fu_289_p2(0) = '1') else 
        ap_const_lv16_0;
    p_mux_fu_449_p3 <= 
        p_Val2_12_reg_558 when (brmerge_i_i_not_fu_431_p2(0) = '1') else 
        ap_const_lv8_FF;
    p_s_fu_456_p3 <= 
        ap_const_lv8_0 when (neg_src_fu_410_p2(0) = '1') else 
        p_Val2_12_reg_558;
    sh_assign_cast_fu_392_p1 <= std_logic_vector(resize(unsigned(sh_assign_reg_525),18));
    sh_assign_fu_267_p3 <= 
        p_2_cast_fu_259_p3 when (tmp_24_fu_251_p3(0) = '1') else 
        ap_const_lv2_2;
    signbit_not_fu_420_p2 <= (signbit_reg_535 xor ap_const_lv1_1);
    snr_mod_V_fu_306_p2 <= std_logic_vector(unsigned(snr_V) - unsigned(p_Val2_cast_fu_302_p1));

    src_data_V_M_imag_V_blk_n_assign_proc : process(src_data_V_M_imag_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            src_data_V_M_imag_V_blk_n <= src_data_V_M_imag_V_empty_n;
        else 
            src_data_V_M_imag_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_data_V_M_imag_V_read <= src_data_V_M_real_V0_update;
    src_data_V_M_real_V0_status <= (src_data_V_M_real_V_empty_n and src_data_V_M_imag_V_empty_n);

    src_data_V_M_real_V0_update_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter23, ap_block_state5, ap_block_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))))) then 
            src_data_V_M_real_V0_update <= ap_const_logic_1;
        else 
            src_data_V_M_real_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    src_data_V_M_real_V_blk_n_assign_proc : process(src_data_V_M_real_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            src_data_V_M_real_V_blk_n <= src_data_V_M_real_V_empty_n;
        else 
            src_data_V_M_real_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_data_V_M_real_V_read <= src_data_V_M_real_V0_update;

    src_data_last_V_blk_n_assign_proc : process(src_data_last_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            src_data_last_V_blk_n <= src_data_last_V_empty_n;
        else 
            src_data_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_last_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter23, ap_block_state5, ap_block_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter23) and (ap_const_boolean_1 = ap_block_state28)))))) then 
            src_data_last_V_read <= ap_const_logic_1;
        else 
            src_data_last_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_24_fu_251_p3 <= snr_V(16 downto 16);
    tmp_25_fu_275_p3 <= snr_V(16 downto 16);
    tmp_28_fu_350_p3 <= snr_mod_V_reg_530(14 downto 14);
    tmp_29_fu_362_p3 <= p_Val2_12_fu_357_p2(7 downto 7);
        tmp_2_fu_485_p1 <= std_logic_vector(resize(signed(ap_reg_pp0_iter21_empty_reg_593_0),19));

    tmp_31_read_fu_194_p2 <= (0=>src_data_last_V_dout, others=>'-');
        tmp_3_fu_489_p1 <= std_logic_vector(resize(signed(p_Val2_15_fu_477_p2),19));

    tmp_49_cast_cast_fu_282_p3 <= 
        ap_const_lv16_9FAB when (tmp_reg_519(0) = '1') else 
        ap_const_lv16_CFD5;
    tmp_4_fu_289_p2 <= (tmp_reg_519 or tmp_25_fu_275_p3);
        tmp_6_fu_499_p1 <= std_logic_vector(resize(signed(ap_reg_pp0_iter21_empty_reg_593_1),19));

    tmp_7_fu_347_p1 <= std_logic_vector(resize(unsigned(tmp_27_reg_547),8));
    tmp_8_fu_370_p2 <= (tmp_29_fu_362_p3 xor ap_const_lv1_1);
    tmp_9_fu_404_p2 <= (p_38_i_fu_400_p2 xor ap_const_lv1_1);
    tmp_fu_245_p2 <= "1" when (signed(snr_V) < signed(ap_const_lv17_1CFD5)) else "0";
        tmp_s_fu_503_p1 <= std_logic_vector(resize(signed(p_Val2_16_fu_481_p2),19));

end behav;
