-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_ber is
port (
    block_cfg_code : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_n : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_k : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_term_on_pass : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_max_iterations : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_crc_type : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_skip_channel : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_mod_type : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_snr_V : IN STD_LOGIC_VECTOR (16 downto 0);
    block_cfg_inv_sigma_sq_V : IN STD_LOGIC_VECTOR (16 downto 0);
    block_cfg_outputs : IN STD_LOGIC_VECTOR (31 downto 0);
    fec_type : IN STD_LOGIC_VECTOR (31 downto 0);
    soft_words_tx : IN STD_LOGIC_VECTOR (31 downto 0);
    hard_words_tx : IN STD_LOGIC_VECTOR (31 downto 0);
    src_data_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    soft_data_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    soft_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    soft_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    soft_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    fe_ctrl_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    hard_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    hard_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    block_cfg_code_ap_vld : IN STD_LOGIC;
    block_cfg_n_ap_vld : IN STD_LOGIC;
    block_cfg_k_ap_vld : IN STD_LOGIC;
    block_cfg_term_on_pass_ap_vld : IN STD_LOGIC;
    block_cfg_max_iterations_ap_vld : IN STD_LOGIC;
    block_cfg_crc_type_ap_vld : IN STD_LOGIC;
    block_cfg_skip_channel_ap_vld : IN STD_LOGIC;
    block_cfg_mod_type_ap_vld : IN STD_LOGIC;
    block_cfg_snr_V_ap_vld : IN STD_LOGIC;
    block_cfg_inv_sigma_sq_V_ap_vld : IN STD_LOGIC;
    block_cfg_outputs_ap_vld : IN STD_LOGIC;
    fec_type_ap_vld : IN STD_LOGIC;
    soft_words_tx_ap_vld : IN STD_LOGIC;
    hard_words_tx_ap_vld : IN STD_LOGIC;
    soft_words_TVALID : OUT STD_LOGIC;
    soft_words_TREADY : IN STD_LOGIC;
    soft_data_TVALID : OUT STD_LOGIC;
    soft_data_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    fe_ctrl_V_V_TVALID : OUT STD_LOGIC;
    fe_ctrl_V_V_TREADY : IN STD_LOGIC;
    src_data_V_V_TVALID : OUT STD_LOGIC;
    src_data_V_V_TREADY : IN STD_LOGIC;
    hard_words_TVALID : OUT STD_LOGIC;
    hard_words_TREADY : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of run_ber is 
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal run_ber_entry311_U0_ap_start : STD_LOGIC;
    signal run_ber_entry311_U0_ap_done : STD_LOGIC;
    signal run_ber_entry311_U0_ap_continue : STD_LOGIC;
    signal run_ber_entry311_U0_ap_idle : STD_LOGIC;
    signal run_ber_entry311_U0_ap_ready : STD_LOGIC;
    signal run_ber_entry311_U0_start_out : STD_LOGIC;
    signal run_ber_entry311_U0_start_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_code_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_block_cfg_code_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_block_cfg_n_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_k_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_block_cfg_k_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_k_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_block_cfg_k_out1_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_term_on_pass_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_block_cfg_term_on_pass_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_max_iterations_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_block_cfg_max_iterations_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_crc_type_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_block_cfg_crc_type_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_skip_channel_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_block_cfg_skip_channel_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_mod_type_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_block_cfg_mod_type_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_snr_V_out_din : STD_LOGIC_VECTOR (16 downto 0);
    signal run_ber_entry311_U0_block_cfg_snr_V_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_din : STD_LOGIC_VECTOR (16 downto 0);
    signal run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_block_cfg_outputs_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_block_cfg_outputs_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_fec_type_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_fec_type_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_fec_type_out2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_fec_type_out2_write : STD_LOGIC;
    signal run_ber_entry311_U0_soft_words_tx_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_soft_words_tx_out_write : STD_LOGIC;
    signal run_ber_entry311_U0_hard_words_tx_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_entry311_U0_hard_words_tx_out_write : STD_LOGIC;
    signal data_source_U0_ap_start : STD_LOGIC;
    signal data_source_U0_ap_done : STD_LOGIC;
    signal data_source_U0_ap_continue : STD_LOGIC;
    signal data_source_U0_ap_idle : STD_LOGIC;
    signal data_source_U0_ap_ready : STD_LOGIC;
    signal data_source_U0_ctrl_k_read : STD_LOGIC;
    signal data_source_U0_src_data_V_din : STD_LOGIC;
    signal data_source_U0_src_data_V_write : STD_LOGIC;
    signal data_source_U0_ctrl_k_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal data_source_U0_ctrl_k_out_write : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_ap_start : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_ap_ready : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_ap_done : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_ap_continue : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_ap_idle : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_start_out : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_start_write : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_block_cfg_k_read : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_src_data_g_V_read : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_src_data_i_V_2_din : STD_LOGIC_VECTOR (0 downto 0);
    signal run_ber_Loop_dup_src_U0_src_data_i_V_2_write : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_block_cfg_outputs_read : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_src_data_i_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal run_ber_Loop_dup_src_U0_src_data_i_V_write : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_block_cfg_k_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_Loop_dup_src_U0_block_cfg_k_out_write : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_block_cfg_k_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_Loop_dup_src_U0_block_cfg_k_out1_write : STD_LOGIC;
    signal run_ber_Loop_dup_src_U0_block_cfg_outputs_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_Loop_dup_src_U0_block_cfg_outputs_out_write : STD_LOGIC;
    signal encoder_U0_ap_start : STD_LOGIC;
    signal encoder_U0_ap_done : STD_LOGIC;
    signal encoder_U0_ap_continue : STD_LOGIC;
    signal encoder_U0_ap_idle : STD_LOGIC;
    signal encoder_U0_ap_ready : STD_LOGIC;
    signal encoder_U0_ctrl_n_read : STD_LOGIC;
    signal encoder_U0_ctrl_k_read : STD_LOGIC;
    signal encoder_U0_src_data_V_dout : STD_LOGIC;
    signal encoder_U0_src_data_V_read : STD_LOGIC;
    signal encoder_U0_enc_data_V_din : STD_LOGIC;
    signal encoder_U0_enc_data_V_write : STD_LOGIC;
    signal encoder_U0_ctrl_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal encoder_U0_ctrl_n_out_write : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_ap_start : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_ap_done : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_ap_continue : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_ap_idle : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_ap_ready : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_block_cfg_n_read : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_enc_data_g_V_read : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_enc_data_i_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal run_ber_Loop_dup_enc_U0_enc_data_i_V_write : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_block_cfg_outputs_read : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_block_cfg_n_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_Loop_dup_enc_U0_block_cfg_n_out_write : STD_LOGIC;
    signal run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_write : STD_LOGIC;
    signal modulate_U0_ap_start : STD_LOGIC;
    signal modulate_U0_ap_done : STD_LOGIC;
    signal modulate_U0_ap_continue : STD_LOGIC;
    signal modulate_U0_ap_idle : STD_LOGIC;
    signal modulate_U0_ap_ready : STD_LOGIC;
    signal modulate_U0_modulation_type_read : STD_LOGIC;
    signal modulate_U0_block_size_read : STD_LOGIC;
    signal modulate_U0_src_data_V_dout : STD_LOGIC;
    signal modulate_U0_src_data_V_read : STD_LOGIC;
    signal modulate_U0_mod_data_V_M_real_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal modulate_U0_mod_data_V_M_real_V_write : STD_LOGIC;
    signal modulate_U0_mod_data_V_M_imag_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal modulate_U0_mod_data_V_M_imag_V_write : STD_LOGIC;
    signal modulate_U0_mod_data_last_V_din : STD_LOGIC;
    signal modulate_U0_mod_data_last_V_write : STD_LOGIC;
    signal modulate_U0_modulation_type_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal modulate_U0_modulation_type_out_write : STD_LOGIC;
    signal modulate_U0_block_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal modulate_U0_block_size_out_write : STD_LOGIC;
    signal channel_U0_ap_start : STD_LOGIC;
    signal channel_U0_ap_ready : STD_LOGIC;
    signal channel_U0_ap_done : STD_LOGIC;
    signal channel_U0_ap_continue : STD_LOGIC;
    signal channel_U0_ap_idle : STD_LOGIC;
    signal channel_U0_start_out : STD_LOGIC;
    signal channel_U0_start_write : STD_LOGIC;
    signal channel_U0_block_cfg_skip_channel_read : STD_LOGIC;
    signal channel_U0_block_cfg_snr_V_read : STD_LOGIC;
    signal channel_U0_mod_data_V_M_real_V_read : STD_LOGIC;
    signal channel_U0_mod_data_V_M_imag_V_read : STD_LOGIC;
    signal channel_U0_mod_data_last_V_dout : STD_LOGIC;
    signal channel_U0_mod_data_last_V_read : STD_LOGIC;
    signal channel_U0_chan_data_V_M_real_s_din : STD_LOGIC_VECTOR (18 downto 0);
    signal channel_U0_chan_data_V_M_real_s_write : STD_LOGIC;
    signal channel_U0_chan_data_V_M_imag_s_din : STD_LOGIC_VECTOR (18 downto 0);
    signal channel_U0_chan_data_V_M_imag_s_write : STD_LOGIC;
    signal channel_U0_chan_data_last_V_din : STD_LOGIC;
    signal channel_U0_chan_data_last_V_write : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_ap_start : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_ap_done : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_ap_continue : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_ap_idle : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_ap_ready : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_chan_data_g_V_M_real_V_read : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_chan_data_g_V_M_imag_V_read : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_din : STD_LOGIC_VECTOR (18 downto 0);
    signal run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_write : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_din : STD_LOGIC_VECTOR (18 downto 0);
    signal run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_write : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_block_cfg_outputs_read : STD_LOGIC;
    signal run_ber_Loop_dup_cha_U0_chan_data_last_V_read : STD_LOGIC;
    signal demodulate_U0_ap_start : STD_LOGIC;
    signal demodulate_U0_ap_done : STD_LOGIC;
    signal demodulate_U0_ap_continue : STD_LOGIC;
    signal demodulate_U0_ap_idle : STD_LOGIC;
    signal demodulate_U0_ap_ready : STD_LOGIC;
    signal demodulate_U0_modulation_type_read : STD_LOGIC;
    signal demodulate_U0_block_size_read : STD_LOGIC;
    signal demodulate_U0_inv_sigma_sq_V_read : STD_LOGIC;
    signal demodulate_U0_chan_data_V_M_real_s_read : STD_LOGIC;
    signal demodulate_U0_chan_data_V_M_imag_s_read : STD_LOGIC;
    signal demodulate_U0_soft_data_V_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal demodulate_U0_soft_data_V_V_write : STD_LOGIC;
    signal demodulate_U0_block_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal demodulate_U0_block_size_out_write : STD_LOGIC;
    signal compress_soft_U0_ap_start : STD_LOGIC;
    signal compress_soft_U0_ap_done : STD_LOGIC;
    signal compress_soft_U0_ap_continue : STD_LOGIC;
    signal compress_soft_U0_ap_idle : STD_LOGIC;
    signal compress_soft_U0_ap_ready : STD_LOGIC;
    signal compress_soft_U0_n_read : STD_LOGIC;
    signal compress_soft_U0_fec_type_read : STD_LOGIC;
    signal compress_soft_U0_soft_words_tx_read : STD_LOGIC;
    signal compress_soft_U0_soft_words_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal compress_soft_U0_soft_words_TVALID : STD_LOGIC;
    signal compress_soft_U0_soft_words_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal compress_soft_U0_soft_data_i_V_V_read : STD_LOGIC;
    signal compress_soft_U0_soft_data_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal compress_soft_U0_soft_data_TVALID : STD_LOGIC;
    signal compress_soft_U0_soft_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal run_ber_Block_data_g_U0_ap_start : STD_LOGIC;
    signal run_ber_Block_data_g_U0_ap_done : STD_LOGIC;
    signal run_ber_Block_data_g_U0_ap_continue : STD_LOGIC;
    signal run_ber_Block_data_g_U0_ap_idle : STD_LOGIC;
    signal run_ber_Block_data_g_U0_ap_ready : STD_LOGIC;
    signal run_ber_Block_data_g_U0_block_cfg_code_read : STD_LOGIC;
    signal run_ber_Block_data_g_U0_fec_type_read : STD_LOGIC;
    signal run_ber_Block_data_g_U0_block_cfg_crc_type_read : STD_LOGIC;
    signal run_ber_Block_data_g_U0_block_cfg_term_on_pass_read : STD_LOGIC;
    signal run_ber_Block_data_g_U0_block_cfg_max_iterations_read : STD_LOGIC;
    signal run_ber_Block_data_g_U0_fe_ctrl_V_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal run_ber_Block_data_g_U0_fe_ctrl_V_V_TVALID : STD_LOGIC;
    signal compress_src_U0_ap_start : STD_LOGIC;
    signal compress_src_U0_ap_done : STD_LOGIC;
    signal compress_src_U0_ap_continue : STD_LOGIC;
    signal compress_src_U0_ap_idle : STD_LOGIC;
    signal compress_src_U0_ap_ready : STD_LOGIC;
    signal compress_src_U0_k_read : STD_LOGIC;
    signal compress_src_U0_src_data_i_V_dout : STD_LOGIC;
    signal compress_src_U0_src_data_i_V_read : STD_LOGIC;
    signal compress_src_U0_src_data_V_V_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal compress_src_U0_src_data_V_V_TVALID : STD_LOGIC;
    signal gen_hard_words_U0_ap_start : STD_LOGIC;
    signal gen_hard_words_U0_ap_done : STD_LOGIC;
    signal gen_hard_words_U0_ap_continue : STD_LOGIC;
    signal gen_hard_words_U0_ap_idle : STD_LOGIC;
    signal gen_hard_words_U0_ap_ready : STD_LOGIC;
    signal gen_hard_words_U0_k_read : STD_LOGIC;
    signal gen_hard_words_U0_hard_words_tx_read : STD_LOGIC;
    signal gen_hard_words_U0_hard_words_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gen_hard_words_U0_hard_words_TVALID : STD_LOGIC;
    signal gen_hard_words_U0_hard_words_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal block_cfg_code_chann_full_n : STD_LOGIC;
    signal block_cfg_code_chann_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_code_chann_empty_n : STD_LOGIC;
    signal block_cfg_n_channel_full_n : STD_LOGIC;
    signal block_cfg_n_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_n_channel_empty_n : STD_LOGIC;
    signal block_cfg_k_channel_full_n : STD_LOGIC;
    signal block_cfg_k_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_k_channel_empty_n : STD_LOGIC;
    signal block_cfg_k_channel2_3_full_n : STD_LOGIC;
    signal block_cfg_k_channel2_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_k_channel2_3_empty_n : STD_LOGIC;
    signal block_cfg_term_on_pa_full_n : STD_LOGIC;
    signal block_cfg_term_on_pa_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_term_on_pa_empty_n : STD_LOGIC;
    signal block_cfg_max_iterat_full_n : STD_LOGIC;
    signal block_cfg_max_iterat_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_max_iterat_empty_n : STD_LOGIC;
    signal block_cfg_crc_type_c_full_n : STD_LOGIC;
    signal block_cfg_crc_type_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_crc_type_c_empty_n : STD_LOGIC;
    signal block_cfg_skip_chann_full_n : STD_LOGIC;
    signal block_cfg_skip_chann_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_skip_chann_empty_n : STD_LOGIC;
    signal block_cfg_mod_type_c_1_full_n : STD_LOGIC;
    signal block_cfg_mod_type_c_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_mod_type_c_1_empty_n : STD_LOGIC;
    signal block_cfg_snr_V_chan_full_n : STD_LOGIC;
    signal block_cfg_snr_V_chan_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal block_cfg_snr_V_chan_empty_n : STD_LOGIC;
    signal block_cfg_inv_sigma_s_full_n : STD_LOGIC;
    signal block_cfg_inv_sigma_s_dout : STD_LOGIC_VECTOR (16 downto 0);
    signal block_cfg_inv_sigma_s_empty_n : STD_LOGIC;
    signal block_cfg_outputs_ch_2_full_n : STD_LOGIC;
    signal block_cfg_outputs_ch_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_outputs_ch_2_empty_n : STD_LOGIC;
    signal fec_type_channel_full_n : STD_LOGIC;
    signal fec_type_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fec_type_channel_empty_n : STD_LOGIC;
    signal fec_type_channel23_full_n : STD_LOGIC;
    signal fec_type_channel23_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fec_type_channel23_empty_n : STD_LOGIC;
    signal soft_words_tx_channe_1_full_n : STD_LOGIC;
    signal soft_words_tx_channe_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal soft_words_tx_channe_1_empty_n : STD_LOGIC;
    signal hard_words_tx_channe_1_full_n : STD_LOGIC;
    signal hard_words_tx_channe_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal hard_words_tx_channe_1_empty_n : STD_LOGIC;
    signal src_data_g_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_g_V_full_n : STD_LOGIC;
    signal src_data_g_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_g_V_empty_n : STD_LOGIC;
    signal block_cfg_k_channel2_2_full_n : STD_LOGIC;
    signal block_cfg_k_channel2_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_k_channel2_2_empty_n : STD_LOGIC;
    signal src_data_i_V_1_full_n : STD_LOGIC;
    signal src_data_i_V_1_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_i_V_1_empty_n : STD_LOGIC;
    signal src_data_i_V_full_n : STD_LOGIC;
    signal src_data_i_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal src_data_i_V_empty_n : STD_LOGIC;
    signal block_cfg_k_channel2_1_full_n : STD_LOGIC;
    signal block_cfg_k_channel2_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_k_channel2_1_empty_n : STD_LOGIC;
    signal block_cfg_k_channel2_full_n : STD_LOGIC;
    signal block_cfg_k_channel2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_k_channel2_empty_n : STD_LOGIC;
    signal block_cfg_outputs_ch_1_full_n : STD_LOGIC;
    signal block_cfg_outputs_ch_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_outputs_ch_1_empty_n : STD_LOGIC;
    signal enc_data_g_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_data_g_V_full_n : STD_LOGIC;
    signal enc_data_g_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_data_g_V_empty_n : STD_LOGIC;
    signal block_cfg_n_channel2_1_full_n : STD_LOGIC;
    signal block_cfg_n_channel2_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_n_channel2_1_empty_n : STD_LOGIC;
    signal enc_data_i_V_full_n : STD_LOGIC;
    signal enc_data_i_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_data_i_V_empty_n : STD_LOGIC;
    signal block_cfg_n_channel2_full_n : STD_LOGIC;
    signal block_cfg_n_channel2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_n_channel2_empty_n : STD_LOGIC;
    signal block_cfg_outputs_ch_full_n : STD_LOGIC;
    signal block_cfg_outputs_ch_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_outputs_ch_empty_n : STD_LOGIC;
    signal mod_data_V_M_real_V_full_n : STD_LOGIC;
    signal mod_data_V_M_real_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal mod_data_V_M_real_V_empty_n : STD_LOGIC;
    signal mod_data_V_M_imag_V_full_n : STD_LOGIC;
    signal mod_data_V_M_imag_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal mod_data_V_M_imag_V_empty_n : STD_LOGIC;
    signal mod_data_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal mod_data_last_V_full_n : STD_LOGIC;
    signal mod_data_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal mod_data_last_V_empty_n : STD_LOGIC;
    signal block_cfg_mod_type_c_full_n : STD_LOGIC;
    signal block_cfg_mod_type_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_mod_type_c_empty_n : STD_LOGIC;
    signal block_cfg_n_channel3_1_full_n : STD_LOGIC;
    signal block_cfg_n_channel3_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_n_channel3_1_empty_n : STD_LOGIC;
    signal chan_data_g_V_M_rea_full_n : STD_LOGIC;
    signal chan_data_g_V_M_rea_dout : STD_LOGIC_VECTOR (18 downto 0);
    signal chan_data_g_V_M_rea_empty_n : STD_LOGIC;
    signal chan_data_g_V_M_ima_full_n : STD_LOGIC;
    signal chan_data_g_V_M_ima_dout : STD_LOGIC_VECTOR (18 downto 0);
    signal chan_data_g_V_M_ima_empty_n : STD_LOGIC;
    signal chan_data_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal chan_data_last_V_full_n : STD_LOGIC;
    signal chan_data_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal chan_data_last_V_empty_n : STD_LOGIC;
    signal chan_data_i_V_M_rea_full_n : STD_LOGIC;
    signal chan_data_i_V_M_rea_dout : STD_LOGIC_VECTOR (18 downto 0);
    signal chan_data_i_V_M_rea_empty_n : STD_LOGIC;
    signal chan_data_i_V_M_ima_full_n : STD_LOGIC;
    signal chan_data_i_V_M_ima_dout : STD_LOGIC_VECTOR (18 downto 0);
    signal chan_data_i_V_M_ima_empty_n : STD_LOGIC;
    signal soft_data_i_V_V_full_n : STD_LOGIC;
    signal soft_data_i_V_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal soft_data_i_V_V_empty_n : STD_LOGIC;
    signal block_cfg_n_channel3_full_n : STD_LOGIC;
    signal block_cfg_n_channel3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_n_channel3_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_reg_compress_src_U0_ap_done : STD_LOGIC := '0';
    signal ap_reg_compress_soft_U0_ap_done : STD_LOGIC := '0';
    signal ap_reg_run_ber_Block_data_g_U0_ap_done : STD_LOGIC := '0';
    signal ap_reg_gen_hard_words_U0_ap_done : STD_LOGIC := '0';
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_data_source_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_data_source_U0_full_n : STD_LOGIC;
    signal start_for_data_source_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_data_source_U0_empty_n : STD_LOGIC;
    signal start_for_run_ber_Loop_dup_src_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_run_ber_Loop_dup_src_U0_full_n : STD_LOGIC;
    signal start_for_run_ber_Loop_dup_src_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_run_ber_Loop_dup_src_U0_empty_n : STD_LOGIC;
    signal start_for_encoder_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_encoder_U0_full_n : STD_LOGIC;
    signal start_for_encoder_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_encoder_U0_empty_n : STD_LOGIC;
    signal start_for_modulate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_modulate_U0_full_n : STD_LOGIC;
    signal start_for_modulate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_modulate_U0_empty_n : STD_LOGIC;
    signal start_for_channel_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_channel_U0_full_n : STD_LOGIC;
    signal start_for_channel_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_channel_U0_empty_n : STD_LOGIC;
    signal start_for_demodulate_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_demodulate_U0_full_n : STD_LOGIC;
    signal start_for_demodulate_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_demodulate_U0_empty_n : STD_LOGIC;
    signal start_for_compress_soft_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compress_soft_U0_full_n : STD_LOGIC;
    signal start_for_compress_soft_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compress_soft_U0_empty_n : STD_LOGIC;
    signal start_for_run_ber_Block_data_g_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_run_ber_Block_data_g_U0_full_n : STD_LOGIC;
    signal start_for_run_ber_Block_data_g_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_run_ber_Block_data_g_U0_empty_n : STD_LOGIC;
    signal start_for_gen_hard_words_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gen_hard_words_U0_full_n : STD_LOGIC;
    signal start_for_gen_hard_words_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gen_hard_words_U0_empty_n : STD_LOGIC;
    signal start_for_run_ber_Loop_dup_enc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_run_ber_Loop_dup_enc_U0_full_n : STD_LOGIC;
    signal start_for_run_ber_Loop_dup_enc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_run_ber_Loop_dup_enc_U0_empty_n : STD_LOGIC;
    signal start_for_compress_src_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compress_src_U0_full_n : STD_LOGIC;
    signal start_for_compress_src_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_compress_src_U0_empty_n : STD_LOGIC;
    signal start_for_run_ber_Loop_dup_cha_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_run_ber_Loop_dup_cha_U0_full_n : STD_LOGIC;
    signal start_for_run_ber_Loop_dup_cha_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_run_ber_Loop_dup_cha_U0_empty_n : STD_LOGIC;

    component run_ber_entry311 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        block_cfg_code : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_n : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_k : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_term_on_pass : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_max_iterations : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_crc_type : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_skip_channel : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_mod_type : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_snr_V : IN STD_LOGIC_VECTOR (16 downto 0);
        block_cfg_inv_sigma_sq_V : IN STD_LOGIC_VECTOR (16 downto 0);
        block_cfg_outputs : IN STD_LOGIC_VECTOR (31 downto 0);
        fec_type : IN STD_LOGIC_VECTOR (31 downto 0);
        soft_words_tx : IN STD_LOGIC_VECTOR (31 downto 0);
        hard_words_tx : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_code_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_code_out_full_n : IN STD_LOGIC;
        block_cfg_code_out_write : OUT STD_LOGIC;
        block_cfg_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_n_out_full_n : IN STD_LOGIC;
        block_cfg_n_out_write : OUT STD_LOGIC;
        block_cfg_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_k_out_full_n : IN STD_LOGIC;
        block_cfg_k_out_write : OUT STD_LOGIC;
        block_cfg_k_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_k_out1_full_n : IN STD_LOGIC;
        block_cfg_k_out1_write : OUT STD_LOGIC;
        block_cfg_term_on_pass_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_term_on_pass_out_full_n : IN STD_LOGIC;
        block_cfg_term_on_pass_out_write : OUT STD_LOGIC;
        block_cfg_max_iterations_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_max_iterations_out_full_n : IN STD_LOGIC;
        block_cfg_max_iterations_out_write : OUT STD_LOGIC;
        block_cfg_crc_type_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_crc_type_out_full_n : IN STD_LOGIC;
        block_cfg_crc_type_out_write : OUT STD_LOGIC;
        block_cfg_skip_channel_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_skip_channel_out_full_n : IN STD_LOGIC;
        block_cfg_skip_channel_out_write : OUT STD_LOGIC;
        block_cfg_mod_type_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_mod_type_out_full_n : IN STD_LOGIC;
        block_cfg_mod_type_out_write : OUT STD_LOGIC;
        block_cfg_snr_V_out_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        block_cfg_snr_V_out_full_n : IN STD_LOGIC;
        block_cfg_snr_V_out_write : OUT STD_LOGIC;
        block_cfg_inv_sigma_sq_V_out_din : OUT STD_LOGIC_VECTOR (16 downto 0);
        block_cfg_inv_sigma_sq_V_out_full_n : IN STD_LOGIC;
        block_cfg_inv_sigma_sq_V_out_write : OUT STD_LOGIC;
        block_cfg_outputs_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_outputs_out_full_n : IN STD_LOGIC;
        block_cfg_outputs_out_write : OUT STD_LOGIC;
        fec_type_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fec_type_out_full_n : IN STD_LOGIC;
        fec_type_out_write : OUT STD_LOGIC;
        fec_type_out2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fec_type_out2_full_n : IN STD_LOGIC;
        fec_type_out2_write : OUT STD_LOGIC;
        soft_words_tx_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        soft_words_tx_out_full_n : IN STD_LOGIC;
        soft_words_tx_out_write : OUT STD_LOGIC;
        hard_words_tx_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        hard_words_tx_out_full_n : IN STD_LOGIC;
        hard_words_tx_out_write : OUT STD_LOGIC );
    end component;


    component data_source IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctrl_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl_k_empty_n : IN STD_LOGIC;
        ctrl_k_read : OUT STD_LOGIC;
        src_data_V_din : OUT STD_LOGIC;
        src_data_V_full_n : IN STD_LOGIC;
        src_data_V_write : OUT STD_LOGIC;
        ctrl_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl_k_out_full_n : IN STD_LOGIC;
        ctrl_k_out_write : OUT STD_LOGIC );
    end component;


    component run_ber_Loop_dup_src IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        block_cfg_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_k_empty_n : IN STD_LOGIC;
        block_cfg_k_read : OUT STD_LOGIC;
        src_data_g_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        src_data_g_V_empty_n : IN STD_LOGIC;
        src_data_g_V_read : OUT STD_LOGIC;
        src_data_i_V_2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        src_data_i_V_2_full_n : IN STD_LOGIC;
        src_data_i_V_2_write : OUT STD_LOGIC;
        block_cfg_outputs_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_outputs_empty_n : IN STD_LOGIC;
        block_cfg_outputs_read : OUT STD_LOGIC;
        src_data_i_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        src_data_i_V_full_n : IN STD_LOGIC;
        src_data_i_V_write : OUT STD_LOGIC;
        block_cfg_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_k_out_full_n : IN STD_LOGIC;
        block_cfg_k_out_write : OUT STD_LOGIC;
        block_cfg_k_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_k_out1_full_n : IN STD_LOGIC;
        block_cfg_k_out1_write : OUT STD_LOGIC;
        block_cfg_outputs_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_outputs_out_full_n : IN STD_LOGIC;
        block_cfg_outputs_out_write : OUT STD_LOGIC );
    end component;


    component encoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctrl_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl_n_empty_n : IN STD_LOGIC;
        ctrl_n_read : OUT STD_LOGIC;
        ctrl_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctrl_k_empty_n : IN STD_LOGIC;
        ctrl_k_read : OUT STD_LOGIC;
        src_data_V_dout : IN STD_LOGIC;
        src_data_V_empty_n : IN STD_LOGIC;
        src_data_V_read : OUT STD_LOGIC;
        enc_data_V_din : OUT STD_LOGIC;
        enc_data_V_full_n : IN STD_LOGIC;
        enc_data_V_write : OUT STD_LOGIC;
        ctrl_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        ctrl_n_out_full_n : IN STD_LOGIC;
        ctrl_n_out_write : OUT STD_LOGIC );
    end component;


    component run_ber_Loop_dup_enc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        block_cfg_n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_n_empty_n : IN STD_LOGIC;
        block_cfg_n_read : OUT STD_LOGIC;
        enc_data_g_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        enc_data_g_V_empty_n : IN STD_LOGIC;
        enc_data_g_V_read : OUT STD_LOGIC;
        enc_data_i_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        enc_data_i_V_full_n : IN STD_LOGIC;
        enc_data_i_V_write : OUT STD_LOGIC;
        block_cfg_outputs_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_outputs_empty_n : IN STD_LOGIC;
        block_cfg_outputs_read : OUT STD_LOGIC;
        block_cfg_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_n_out_full_n : IN STD_LOGIC;
        block_cfg_n_out_write : OUT STD_LOGIC;
        block_cfg_outputs_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_outputs_out_full_n : IN STD_LOGIC;
        block_cfg_outputs_out_write : OUT STD_LOGIC );
    end component;


    component modulate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        modulation_type_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        modulation_type_empty_n : IN STD_LOGIC;
        modulation_type_read : OUT STD_LOGIC;
        block_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_size_empty_n : IN STD_LOGIC;
        block_size_read : OUT STD_LOGIC;
        src_data_V_dout : IN STD_LOGIC;
        src_data_V_empty_n : IN STD_LOGIC;
        src_data_V_read : OUT STD_LOGIC;
        mod_data_V_M_real_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        mod_data_V_M_real_V_full_n : IN STD_LOGIC;
        mod_data_V_M_real_V_write : OUT STD_LOGIC;
        mod_data_V_M_imag_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        mod_data_V_M_imag_V_full_n : IN STD_LOGIC;
        mod_data_V_M_imag_V_write : OUT STD_LOGIC;
        mod_data_last_V_din : OUT STD_LOGIC;
        mod_data_last_V_full_n : IN STD_LOGIC;
        mod_data_last_V_write : OUT STD_LOGIC;
        modulation_type_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        modulation_type_out_full_n : IN STD_LOGIC;
        modulation_type_out_write : OUT STD_LOGIC;
        block_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_size_out_full_n : IN STD_LOGIC;
        block_size_out_write : OUT STD_LOGIC );
    end component;


    component channel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        block_cfg_skip_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_skip_channel_empty_n : IN STD_LOGIC;
        block_cfg_skip_channel_read : OUT STD_LOGIC;
        block_cfg_snr_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        block_cfg_snr_V_empty_n : IN STD_LOGIC;
        block_cfg_snr_V_read : OUT STD_LOGIC;
        mod_data_V_M_real_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        mod_data_V_M_real_V_empty_n : IN STD_LOGIC;
        mod_data_V_M_real_V_read : OUT STD_LOGIC;
        mod_data_V_M_imag_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        mod_data_V_M_imag_V_empty_n : IN STD_LOGIC;
        mod_data_V_M_imag_V_read : OUT STD_LOGIC;
        mod_data_last_V_dout : IN STD_LOGIC;
        mod_data_last_V_empty_n : IN STD_LOGIC;
        mod_data_last_V_read : OUT STD_LOGIC;
        chan_data_V_M_real_s_din : OUT STD_LOGIC_VECTOR (18 downto 0);
        chan_data_V_M_real_s_full_n : IN STD_LOGIC;
        chan_data_V_M_real_s_write : OUT STD_LOGIC;
        chan_data_V_M_imag_s_din : OUT STD_LOGIC_VECTOR (18 downto 0);
        chan_data_V_M_imag_s_full_n : IN STD_LOGIC;
        chan_data_V_M_imag_s_write : OUT STD_LOGIC;
        chan_data_last_V_din : OUT STD_LOGIC;
        chan_data_last_V_full_n : IN STD_LOGIC;
        chan_data_last_V_write : OUT STD_LOGIC );
    end component;


    component run_ber_Loop_dup_cha IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        chan_data_g_V_M_real_V_dout : IN STD_LOGIC_VECTOR (18 downto 0);
        chan_data_g_V_M_real_V_empty_n : IN STD_LOGIC;
        chan_data_g_V_M_real_V_read : OUT STD_LOGIC;
        chan_data_g_V_M_imag_V_dout : IN STD_LOGIC_VECTOR (18 downto 0);
        chan_data_g_V_M_imag_V_empty_n : IN STD_LOGIC;
        chan_data_g_V_M_imag_V_read : OUT STD_LOGIC;
        chan_data_i_V_M_real_V_din : OUT STD_LOGIC_VECTOR (18 downto 0);
        chan_data_i_V_M_real_V_full_n : IN STD_LOGIC;
        chan_data_i_V_M_real_V_write : OUT STD_LOGIC;
        chan_data_i_V_M_imag_V_din : OUT STD_LOGIC_VECTOR (18 downto 0);
        chan_data_i_V_M_imag_V_full_n : IN STD_LOGIC;
        chan_data_i_V_M_imag_V_write : OUT STD_LOGIC;
        block_cfg_outputs_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_outputs_empty_n : IN STD_LOGIC;
        block_cfg_outputs_read : OUT STD_LOGIC;
        chan_data_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        chan_data_last_V_empty_n : IN STD_LOGIC;
        chan_data_last_V_read : OUT STD_LOGIC );
    end component;


    component demodulate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        modulation_type_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        modulation_type_empty_n : IN STD_LOGIC;
        modulation_type_read : OUT STD_LOGIC;
        block_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_size_empty_n : IN STD_LOGIC;
        block_size_read : OUT STD_LOGIC;
        inv_sigma_sq_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
        inv_sigma_sq_V_empty_n : IN STD_LOGIC;
        inv_sigma_sq_V_read : OUT STD_LOGIC;
        chan_data_V_M_real_s_dout : IN STD_LOGIC_VECTOR (18 downto 0);
        chan_data_V_M_real_s_empty_n : IN STD_LOGIC;
        chan_data_V_M_real_s_read : OUT STD_LOGIC;
        chan_data_V_M_imag_s_dout : IN STD_LOGIC_VECTOR (18 downto 0);
        chan_data_V_M_imag_s_empty_n : IN STD_LOGIC;
        chan_data_V_M_imag_s_read : OUT STD_LOGIC;
        soft_data_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        soft_data_V_V_full_n : IN STD_LOGIC;
        soft_data_V_V_write : OUT STD_LOGIC;
        block_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_size_out_full_n : IN STD_LOGIC;
        block_size_out_write : OUT STD_LOGIC );
    end component;


    component compress_soft IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        n_empty_n : IN STD_LOGIC;
        n_read : OUT STD_LOGIC;
        fec_type_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fec_type_empty_n : IN STD_LOGIC;
        fec_type_read : OUT STD_LOGIC;
        soft_words_tx_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        soft_words_tx_empty_n : IN STD_LOGIC;
        soft_words_tx_read : OUT STD_LOGIC;
        soft_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        soft_words_TVALID : OUT STD_LOGIC;
        soft_words_TREADY : IN STD_LOGIC;
        soft_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        soft_data_i_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        soft_data_i_V_V_empty_n : IN STD_LOGIC;
        soft_data_i_V_V_read : OUT STD_LOGIC;
        soft_data_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        soft_data_TVALID : OUT STD_LOGIC;
        soft_data_TREADY : IN STD_LOGIC;
        soft_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component run_ber_Block_data_g IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        block_cfg_code_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_code_empty_n : IN STD_LOGIC;
        block_cfg_code_read : OUT STD_LOGIC;
        fec_type_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fec_type_empty_n : IN STD_LOGIC;
        fec_type_read : OUT STD_LOGIC;
        block_cfg_crc_type_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_crc_type_empty_n : IN STD_LOGIC;
        block_cfg_crc_type_read : OUT STD_LOGIC;
        block_cfg_term_on_pass_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_term_on_pass_empty_n : IN STD_LOGIC;
        block_cfg_term_on_pass_read : OUT STD_LOGIC;
        block_cfg_max_iterations_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_max_iterations_empty_n : IN STD_LOGIC;
        block_cfg_max_iterations_read : OUT STD_LOGIC;
        fe_ctrl_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        fe_ctrl_V_V_TVALID : OUT STD_LOGIC;
        fe_ctrl_V_V_TREADY : IN STD_LOGIC );
    end component;


    component compress_src IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_empty_n : IN STD_LOGIC;
        k_read : OUT STD_LOGIC;
        src_data_i_V_dout : IN STD_LOGIC;
        src_data_i_V_empty_n : IN STD_LOGIC;
        src_data_i_V_read : OUT STD_LOGIC;
        src_data_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        src_data_V_V_TVALID : OUT STD_LOGIC;
        src_data_V_V_TREADY : IN STD_LOGIC );
    end component;


    component gen_hard_words IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        k_empty_n : IN STD_LOGIC;
        k_read : OUT STD_LOGIC;
        hard_words_tx_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        hard_words_tx_empty_n : IN STD_LOGIC;
        hard_words_tx_read : OUT STD_LOGIC;
        hard_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        hard_words_TVALID : OUT STD_LOGIC;
        hard_words_TREADY : IN STD_LOGIC;
        hard_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d5_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w17_d6_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (16 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (16 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w17_d8_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (16 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (16 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d9_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d32_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d32_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w19_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (18 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (18 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_data_soDeQ IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_run_berEe0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_encoderFfa IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_modulatGfk IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_channelHfu IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_demodulIfE IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_compresJfO IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_run_berKfY IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_gen_harLf8 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_run_berMgi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_compresNgs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_run_berOgC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    run_ber_entry311_U0 : component run_ber_entry311
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => run_ber_entry311_U0_ap_start,
        start_full_n => start_for_gen_hard_words_U0_full_n,
        ap_done => run_ber_entry311_U0_ap_done,
        ap_continue => run_ber_entry311_U0_ap_continue,
        ap_idle => run_ber_entry311_U0_ap_idle,
        ap_ready => run_ber_entry311_U0_ap_ready,
        start_out => run_ber_entry311_U0_start_out,
        start_write => run_ber_entry311_U0_start_write,
        block_cfg_code => block_cfg_code,
        block_cfg_n => block_cfg_n,
        block_cfg_k => block_cfg_k,
        block_cfg_term_on_pass => block_cfg_term_on_pass,
        block_cfg_max_iterations => block_cfg_max_iterations,
        block_cfg_crc_type => block_cfg_crc_type,
        block_cfg_skip_channel => block_cfg_skip_channel,
        block_cfg_mod_type => block_cfg_mod_type,
        block_cfg_snr_V => block_cfg_snr_V,
        block_cfg_inv_sigma_sq_V => block_cfg_inv_sigma_sq_V,
        block_cfg_outputs => block_cfg_outputs,
        fec_type => fec_type,
        soft_words_tx => soft_words_tx,
        hard_words_tx => hard_words_tx,
        block_cfg_code_out_din => run_ber_entry311_U0_block_cfg_code_out_din,
        block_cfg_code_out_full_n => block_cfg_code_chann_full_n,
        block_cfg_code_out_write => run_ber_entry311_U0_block_cfg_code_out_write,
        block_cfg_n_out_din => run_ber_entry311_U0_block_cfg_n_out_din,
        block_cfg_n_out_full_n => block_cfg_n_channel_full_n,
        block_cfg_n_out_write => run_ber_entry311_U0_block_cfg_n_out_write,
        block_cfg_k_out_din => run_ber_entry311_U0_block_cfg_k_out_din,
        block_cfg_k_out_full_n => block_cfg_k_channel_full_n,
        block_cfg_k_out_write => run_ber_entry311_U0_block_cfg_k_out_write,
        block_cfg_k_out1_din => run_ber_entry311_U0_block_cfg_k_out1_din,
        block_cfg_k_out1_full_n => block_cfg_k_channel2_3_full_n,
        block_cfg_k_out1_write => run_ber_entry311_U0_block_cfg_k_out1_write,
        block_cfg_term_on_pass_out_din => run_ber_entry311_U0_block_cfg_term_on_pass_out_din,
        block_cfg_term_on_pass_out_full_n => block_cfg_term_on_pa_full_n,
        block_cfg_term_on_pass_out_write => run_ber_entry311_U0_block_cfg_term_on_pass_out_write,
        block_cfg_max_iterations_out_din => run_ber_entry311_U0_block_cfg_max_iterations_out_din,
        block_cfg_max_iterations_out_full_n => block_cfg_max_iterat_full_n,
        block_cfg_max_iterations_out_write => run_ber_entry311_U0_block_cfg_max_iterations_out_write,
        block_cfg_crc_type_out_din => run_ber_entry311_U0_block_cfg_crc_type_out_din,
        block_cfg_crc_type_out_full_n => block_cfg_crc_type_c_full_n,
        block_cfg_crc_type_out_write => run_ber_entry311_U0_block_cfg_crc_type_out_write,
        block_cfg_skip_channel_out_din => run_ber_entry311_U0_block_cfg_skip_channel_out_din,
        block_cfg_skip_channel_out_full_n => block_cfg_skip_chann_full_n,
        block_cfg_skip_channel_out_write => run_ber_entry311_U0_block_cfg_skip_channel_out_write,
        block_cfg_mod_type_out_din => run_ber_entry311_U0_block_cfg_mod_type_out_din,
        block_cfg_mod_type_out_full_n => block_cfg_mod_type_c_1_full_n,
        block_cfg_mod_type_out_write => run_ber_entry311_U0_block_cfg_mod_type_out_write,
        block_cfg_snr_V_out_din => run_ber_entry311_U0_block_cfg_snr_V_out_din,
        block_cfg_snr_V_out_full_n => block_cfg_snr_V_chan_full_n,
        block_cfg_snr_V_out_write => run_ber_entry311_U0_block_cfg_snr_V_out_write,
        block_cfg_inv_sigma_sq_V_out_din => run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_din,
        block_cfg_inv_sigma_sq_V_out_full_n => block_cfg_inv_sigma_s_full_n,
        block_cfg_inv_sigma_sq_V_out_write => run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_write,
        block_cfg_outputs_out_din => run_ber_entry311_U0_block_cfg_outputs_out_din,
        block_cfg_outputs_out_full_n => block_cfg_outputs_ch_2_full_n,
        block_cfg_outputs_out_write => run_ber_entry311_U0_block_cfg_outputs_out_write,
        fec_type_out_din => run_ber_entry311_U0_fec_type_out_din,
        fec_type_out_full_n => fec_type_channel_full_n,
        fec_type_out_write => run_ber_entry311_U0_fec_type_out_write,
        fec_type_out2_din => run_ber_entry311_U0_fec_type_out2_din,
        fec_type_out2_full_n => fec_type_channel23_full_n,
        fec_type_out2_write => run_ber_entry311_U0_fec_type_out2_write,
        soft_words_tx_out_din => run_ber_entry311_U0_soft_words_tx_out_din,
        soft_words_tx_out_full_n => soft_words_tx_channe_1_full_n,
        soft_words_tx_out_write => run_ber_entry311_U0_soft_words_tx_out_write,
        hard_words_tx_out_din => run_ber_entry311_U0_hard_words_tx_out_din,
        hard_words_tx_out_full_n => hard_words_tx_channe_1_full_n,
        hard_words_tx_out_write => run_ber_entry311_U0_hard_words_tx_out_write);

    data_source_U0 : component data_source
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => data_source_U0_ap_start,
        ap_done => data_source_U0_ap_done,
        ap_continue => data_source_U0_ap_continue,
        ap_idle => data_source_U0_ap_idle,
        ap_ready => data_source_U0_ap_ready,
        ctrl_k_dout => block_cfg_k_channel_dout,
        ctrl_k_empty_n => block_cfg_k_channel_empty_n,
        ctrl_k_read => data_source_U0_ctrl_k_read,
        src_data_V_din => data_source_U0_src_data_V_din,
        src_data_V_full_n => src_data_g_V_full_n,
        src_data_V_write => data_source_U0_src_data_V_write,
        ctrl_k_out_din => data_source_U0_ctrl_k_out_din,
        ctrl_k_out_full_n => block_cfg_k_channel2_2_full_n,
        ctrl_k_out_write => data_source_U0_ctrl_k_out_write);

    run_ber_Loop_dup_src_U0 : component run_ber_Loop_dup_src
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => run_ber_Loop_dup_src_U0_ap_start,
        start_full_n => start_for_compress_src_U0_full_n,
        ap_ready => run_ber_Loop_dup_src_U0_ap_ready,
        ap_done => run_ber_Loop_dup_src_U0_ap_done,
        ap_continue => run_ber_Loop_dup_src_U0_ap_continue,
        ap_idle => run_ber_Loop_dup_src_U0_ap_idle,
        start_out => run_ber_Loop_dup_src_U0_start_out,
        start_write => run_ber_Loop_dup_src_U0_start_write,
        block_cfg_k_dout => block_cfg_k_channel2_2_dout,
        block_cfg_k_empty_n => block_cfg_k_channel2_2_empty_n,
        block_cfg_k_read => run_ber_Loop_dup_src_U0_block_cfg_k_read,
        src_data_g_V_dout => src_data_g_V_dout,
        src_data_g_V_empty_n => src_data_g_V_empty_n,
        src_data_g_V_read => run_ber_Loop_dup_src_U0_src_data_g_V_read,
        src_data_i_V_2_din => run_ber_Loop_dup_src_U0_src_data_i_V_2_din,
        src_data_i_V_2_full_n => src_data_i_V_1_full_n,
        src_data_i_V_2_write => run_ber_Loop_dup_src_U0_src_data_i_V_2_write,
        block_cfg_outputs_dout => block_cfg_outputs_ch_2_dout,
        block_cfg_outputs_empty_n => block_cfg_outputs_ch_2_empty_n,
        block_cfg_outputs_read => run_ber_Loop_dup_src_U0_block_cfg_outputs_read,
        src_data_i_V_din => run_ber_Loop_dup_src_U0_src_data_i_V_din,
        src_data_i_V_full_n => src_data_i_V_full_n,
        src_data_i_V_write => run_ber_Loop_dup_src_U0_src_data_i_V_write,
        block_cfg_k_out_din => run_ber_Loop_dup_src_U0_block_cfg_k_out_din,
        block_cfg_k_out_full_n => block_cfg_k_channel2_1_full_n,
        block_cfg_k_out_write => run_ber_Loop_dup_src_U0_block_cfg_k_out_write,
        block_cfg_k_out1_din => run_ber_Loop_dup_src_U0_block_cfg_k_out1_din,
        block_cfg_k_out1_full_n => block_cfg_k_channel2_full_n,
        block_cfg_k_out1_write => run_ber_Loop_dup_src_U0_block_cfg_k_out1_write,
        block_cfg_outputs_out_din => run_ber_Loop_dup_src_U0_block_cfg_outputs_out_din,
        block_cfg_outputs_out_full_n => block_cfg_outputs_ch_1_full_n,
        block_cfg_outputs_out_write => run_ber_Loop_dup_src_U0_block_cfg_outputs_out_write);

    encoder_U0 : component encoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => encoder_U0_ap_start,
        ap_done => encoder_U0_ap_done,
        ap_continue => encoder_U0_ap_continue,
        ap_idle => encoder_U0_ap_idle,
        ap_ready => encoder_U0_ap_ready,
        ctrl_n_dout => block_cfg_n_channel_dout,
        ctrl_n_empty_n => block_cfg_n_channel_empty_n,
        ctrl_n_read => encoder_U0_ctrl_n_read,
        ctrl_k_dout => block_cfg_k_channel2_dout,
        ctrl_k_empty_n => block_cfg_k_channel2_empty_n,
        ctrl_k_read => encoder_U0_ctrl_k_read,
        src_data_V_dout => encoder_U0_src_data_V_dout,
        src_data_V_empty_n => src_data_i_V_empty_n,
        src_data_V_read => encoder_U0_src_data_V_read,
        enc_data_V_din => encoder_U0_enc_data_V_din,
        enc_data_V_full_n => enc_data_g_V_full_n,
        enc_data_V_write => encoder_U0_enc_data_V_write,
        ctrl_n_out_din => encoder_U0_ctrl_n_out_din,
        ctrl_n_out_full_n => block_cfg_n_channel2_1_full_n,
        ctrl_n_out_write => encoder_U0_ctrl_n_out_write);

    run_ber_Loop_dup_enc_U0 : component run_ber_Loop_dup_enc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => run_ber_Loop_dup_enc_U0_ap_start,
        ap_done => run_ber_Loop_dup_enc_U0_ap_done,
        ap_continue => run_ber_Loop_dup_enc_U0_ap_continue,
        ap_idle => run_ber_Loop_dup_enc_U0_ap_idle,
        ap_ready => run_ber_Loop_dup_enc_U0_ap_ready,
        block_cfg_n_dout => block_cfg_n_channel2_1_dout,
        block_cfg_n_empty_n => block_cfg_n_channel2_1_empty_n,
        block_cfg_n_read => run_ber_Loop_dup_enc_U0_block_cfg_n_read,
        enc_data_g_V_dout => enc_data_g_V_dout,
        enc_data_g_V_empty_n => enc_data_g_V_empty_n,
        enc_data_g_V_read => run_ber_Loop_dup_enc_U0_enc_data_g_V_read,
        enc_data_i_V_din => run_ber_Loop_dup_enc_U0_enc_data_i_V_din,
        enc_data_i_V_full_n => enc_data_i_V_full_n,
        enc_data_i_V_write => run_ber_Loop_dup_enc_U0_enc_data_i_V_write,
        block_cfg_outputs_dout => block_cfg_outputs_ch_1_dout,
        block_cfg_outputs_empty_n => block_cfg_outputs_ch_1_empty_n,
        block_cfg_outputs_read => run_ber_Loop_dup_enc_U0_block_cfg_outputs_read,
        block_cfg_n_out_din => run_ber_Loop_dup_enc_U0_block_cfg_n_out_din,
        block_cfg_n_out_full_n => block_cfg_n_channel2_full_n,
        block_cfg_n_out_write => run_ber_Loop_dup_enc_U0_block_cfg_n_out_write,
        block_cfg_outputs_out_din => run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_din,
        block_cfg_outputs_out_full_n => block_cfg_outputs_ch_full_n,
        block_cfg_outputs_out_write => run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_write);

    modulate_U0 : component modulate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => modulate_U0_ap_start,
        ap_done => modulate_U0_ap_done,
        ap_continue => modulate_U0_ap_continue,
        ap_idle => modulate_U0_ap_idle,
        ap_ready => modulate_U0_ap_ready,
        modulation_type_dout => block_cfg_mod_type_c_1_dout,
        modulation_type_empty_n => block_cfg_mod_type_c_1_empty_n,
        modulation_type_read => modulate_U0_modulation_type_read,
        block_size_dout => block_cfg_n_channel2_dout,
        block_size_empty_n => block_cfg_n_channel2_empty_n,
        block_size_read => modulate_U0_block_size_read,
        src_data_V_dout => modulate_U0_src_data_V_dout,
        src_data_V_empty_n => enc_data_i_V_empty_n,
        src_data_V_read => modulate_U0_src_data_V_read,
        mod_data_V_M_real_V_din => modulate_U0_mod_data_V_M_real_V_din,
        mod_data_V_M_real_V_full_n => mod_data_V_M_real_V_full_n,
        mod_data_V_M_real_V_write => modulate_U0_mod_data_V_M_real_V_write,
        mod_data_V_M_imag_V_din => modulate_U0_mod_data_V_M_imag_V_din,
        mod_data_V_M_imag_V_full_n => mod_data_V_M_imag_V_full_n,
        mod_data_V_M_imag_V_write => modulate_U0_mod_data_V_M_imag_V_write,
        mod_data_last_V_din => modulate_U0_mod_data_last_V_din,
        mod_data_last_V_full_n => mod_data_last_V_full_n,
        mod_data_last_V_write => modulate_U0_mod_data_last_V_write,
        modulation_type_out_din => modulate_U0_modulation_type_out_din,
        modulation_type_out_full_n => block_cfg_mod_type_c_full_n,
        modulation_type_out_write => modulate_U0_modulation_type_out_write,
        block_size_out_din => modulate_U0_block_size_out_din,
        block_size_out_full_n => block_cfg_n_channel3_1_full_n,
        block_size_out_write => modulate_U0_block_size_out_write);

    channel_U0 : component channel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => channel_U0_ap_start,
        start_full_n => start_for_run_ber_Loop_dup_cha_U0_full_n,
        ap_ready => channel_U0_ap_ready,
        ap_done => channel_U0_ap_done,
        ap_continue => channel_U0_ap_continue,
        ap_idle => channel_U0_ap_idle,
        start_out => channel_U0_start_out,
        start_write => channel_U0_start_write,
        block_cfg_skip_channel_dout => block_cfg_skip_chann_dout,
        block_cfg_skip_channel_empty_n => block_cfg_skip_chann_empty_n,
        block_cfg_skip_channel_read => channel_U0_block_cfg_skip_channel_read,
        block_cfg_snr_V_dout => block_cfg_snr_V_chan_dout,
        block_cfg_snr_V_empty_n => block_cfg_snr_V_chan_empty_n,
        block_cfg_snr_V_read => channel_U0_block_cfg_snr_V_read,
        mod_data_V_M_real_V_dout => mod_data_V_M_real_V_dout,
        mod_data_V_M_real_V_empty_n => mod_data_V_M_real_V_empty_n,
        mod_data_V_M_real_V_read => channel_U0_mod_data_V_M_real_V_read,
        mod_data_V_M_imag_V_dout => mod_data_V_M_imag_V_dout,
        mod_data_V_M_imag_V_empty_n => mod_data_V_M_imag_V_empty_n,
        mod_data_V_M_imag_V_read => channel_U0_mod_data_V_M_imag_V_read,
        mod_data_last_V_dout => channel_U0_mod_data_last_V_dout,
        mod_data_last_V_empty_n => mod_data_last_V_empty_n,
        mod_data_last_V_read => channel_U0_mod_data_last_V_read,
        chan_data_V_M_real_s_din => channel_U0_chan_data_V_M_real_s_din,
        chan_data_V_M_real_s_full_n => chan_data_g_V_M_rea_full_n,
        chan_data_V_M_real_s_write => channel_U0_chan_data_V_M_real_s_write,
        chan_data_V_M_imag_s_din => channel_U0_chan_data_V_M_imag_s_din,
        chan_data_V_M_imag_s_full_n => chan_data_g_V_M_ima_full_n,
        chan_data_V_M_imag_s_write => channel_U0_chan_data_V_M_imag_s_write,
        chan_data_last_V_din => channel_U0_chan_data_last_V_din,
        chan_data_last_V_full_n => chan_data_last_V_full_n,
        chan_data_last_V_write => channel_U0_chan_data_last_V_write);

    run_ber_Loop_dup_cha_U0 : component run_ber_Loop_dup_cha
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => run_ber_Loop_dup_cha_U0_ap_start,
        ap_done => run_ber_Loop_dup_cha_U0_ap_done,
        ap_continue => run_ber_Loop_dup_cha_U0_ap_continue,
        ap_idle => run_ber_Loop_dup_cha_U0_ap_idle,
        ap_ready => run_ber_Loop_dup_cha_U0_ap_ready,
        chan_data_g_V_M_real_V_dout => chan_data_g_V_M_rea_dout,
        chan_data_g_V_M_real_V_empty_n => chan_data_g_V_M_rea_empty_n,
        chan_data_g_V_M_real_V_read => run_ber_Loop_dup_cha_U0_chan_data_g_V_M_real_V_read,
        chan_data_g_V_M_imag_V_dout => chan_data_g_V_M_ima_dout,
        chan_data_g_V_M_imag_V_empty_n => chan_data_g_V_M_ima_empty_n,
        chan_data_g_V_M_imag_V_read => run_ber_Loop_dup_cha_U0_chan_data_g_V_M_imag_V_read,
        chan_data_i_V_M_real_V_din => run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_din,
        chan_data_i_V_M_real_V_full_n => chan_data_i_V_M_rea_full_n,
        chan_data_i_V_M_real_V_write => run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_write,
        chan_data_i_V_M_imag_V_din => run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_din,
        chan_data_i_V_M_imag_V_full_n => chan_data_i_V_M_ima_full_n,
        chan_data_i_V_M_imag_V_write => run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_write,
        block_cfg_outputs_dout => block_cfg_outputs_ch_dout,
        block_cfg_outputs_empty_n => block_cfg_outputs_ch_empty_n,
        block_cfg_outputs_read => run_ber_Loop_dup_cha_U0_block_cfg_outputs_read,
        chan_data_last_V_dout => chan_data_last_V_dout,
        chan_data_last_V_empty_n => chan_data_last_V_empty_n,
        chan_data_last_V_read => run_ber_Loop_dup_cha_U0_chan_data_last_V_read);

    demodulate_U0 : component demodulate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => demodulate_U0_ap_start,
        ap_done => demodulate_U0_ap_done,
        ap_continue => demodulate_U0_ap_continue,
        ap_idle => demodulate_U0_ap_idle,
        ap_ready => demodulate_U0_ap_ready,
        modulation_type_dout => block_cfg_mod_type_c_dout,
        modulation_type_empty_n => block_cfg_mod_type_c_empty_n,
        modulation_type_read => demodulate_U0_modulation_type_read,
        block_size_dout => block_cfg_n_channel3_1_dout,
        block_size_empty_n => block_cfg_n_channel3_1_empty_n,
        block_size_read => demodulate_U0_block_size_read,
        inv_sigma_sq_V_dout => block_cfg_inv_sigma_s_dout,
        inv_sigma_sq_V_empty_n => block_cfg_inv_sigma_s_empty_n,
        inv_sigma_sq_V_read => demodulate_U0_inv_sigma_sq_V_read,
        chan_data_V_M_real_s_dout => chan_data_i_V_M_rea_dout,
        chan_data_V_M_real_s_empty_n => chan_data_i_V_M_rea_empty_n,
        chan_data_V_M_real_s_read => demodulate_U0_chan_data_V_M_real_s_read,
        chan_data_V_M_imag_s_dout => chan_data_i_V_M_ima_dout,
        chan_data_V_M_imag_s_empty_n => chan_data_i_V_M_ima_empty_n,
        chan_data_V_M_imag_s_read => demodulate_U0_chan_data_V_M_imag_s_read,
        soft_data_V_V_din => demodulate_U0_soft_data_V_V_din,
        soft_data_V_V_full_n => soft_data_i_V_V_full_n,
        soft_data_V_V_write => demodulate_U0_soft_data_V_V_write,
        block_size_out_din => demodulate_U0_block_size_out_din,
        block_size_out_full_n => block_cfg_n_channel3_full_n,
        block_size_out_write => demodulate_U0_block_size_out_write);

    compress_soft_U0 : component compress_soft
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => compress_soft_U0_ap_start,
        ap_done => compress_soft_U0_ap_done,
        ap_continue => compress_soft_U0_ap_continue,
        ap_idle => compress_soft_U0_ap_idle,
        ap_ready => compress_soft_U0_ap_ready,
        n_dout => block_cfg_n_channel3_dout,
        n_empty_n => block_cfg_n_channel3_empty_n,
        n_read => compress_soft_U0_n_read,
        fec_type_dout => fec_type_channel_dout,
        fec_type_empty_n => fec_type_channel_empty_n,
        fec_type_read => compress_soft_U0_fec_type_read,
        soft_words_tx_dout => soft_words_tx_channe_1_dout,
        soft_words_tx_empty_n => soft_words_tx_channe_1_empty_n,
        soft_words_tx_read => compress_soft_U0_soft_words_tx_read,
        soft_words_TDATA => compress_soft_U0_soft_words_TDATA,
        soft_words_TVALID => compress_soft_U0_soft_words_TVALID,
        soft_words_TREADY => soft_words_TREADY,
        soft_words_TLAST => compress_soft_U0_soft_words_TLAST,
        soft_data_i_V_V_dout => soft_data_i_V_V_dout,
        soft_data_i_V_V_empty_n => soft_data_i_V_V_empty_n,
        soft_data_i_V_V_read => compress_soft_U0_soft_data_i_V_V_read,
        soft_data_TDATA => compress_soft_U0_soft_data_TDATA,
        soft_data_TVALID => compress_soft_U0_soft_data_TVALID,
        soft_data_TREADY => soft_data_TREADY,
        soft_data_TLAST => compress_soft_U0_soft_data_TLAST);

    run_ber_Block_data_g_U0 : component run_ber_Block_data_g
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => run_ber_Block_data_g_U0_ap_start,
        ap_done => run_ber_Block_data_g_U0_ap_done,
        ap_continue => run_ber_Block_data_g_U0_ap_continue,
        ap_idle => run_ber_Block_data_g_U0_ap_idle,
        ap_ready => run_ber_Block_data_g_U0_ap_ready,
        block_cfg_code_dout => block_cfg_code_chann_dout,
        block_cfg_code_empty_n => block_cfg_code_chann_empty_n,
        block_cfg_code_read => run_ber_Block_data_g_U0_block_cfg_code_read,
        fec_type_dout => fec_type_channel23_dout,
        fec_type_empty_n => fec_type_channel23_empty_n,
        fec_type_read => run_ber_Block_data_g_U0_fec_type_read,
        block_cfg_crc_type_dout => block_cfg_crc_type_c_dout,
        block_cfg_crc_type_empty_n => block_cfg_crc_type_c_empty_n,
        block_cfg_crc_type_read => run_ber_Block_data_g_U0_block_cfg_crc_type_read,
        block_cfg_term_on_pass_dout => block_cfg_term_on_pa_dout,
        block_cfg_term_on_pass_empty_n => block_cfg_term_on_pa_empty_n,
        block_cfg_term_on_pass_read => run_ber_Block_data_g_U0_block_cfg_term_on_pass_read,
        block_cfg_max_iterations_dout => block_cfg_max_iterat_dout,
        block_cfg_max_iterations_empty_n => block_cfg_max_iterat_empty_n,
        block_cfg_max_iterations_read => run_ber_Block_data_g_U0_block_cfg_max_iterations_read,
        fe_ctrl_V_V_TDATA => run_ber_Block_data_g_U0_fe_ctrl_V_V_TDATA,
        fe_ctrl_V_V_TVALID => run_ber_Block_data_g_U0_fe_ctrl_V_V_TVALID,
        fe_ctrl_V_V_TREADY => fe_ctrl_V_V_TREADY);

    compress_src_U0 : component compress_src
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => compress_src_U0_ap_start,
        ap_done => compress_src_U0_ap_done,
        ap_continue => compress_src_U0_ap_continue,
        ap_idle => compress_src_U0_ap_idle,
        ap_ready => compress_src_U0_ap_ready,
        k_dout => block_cfg_k_channel2_1_dout,
        k_empty_n => block_cfg_k_channel2_1_empty_n,
        k_read => compress_src_U0_k_read,
        src_data_i_V_dout => compress_src_U0_src_data_i_V_dout,
        src_data_i_V_empty_n => src_data_i_V_1_empty_n,
        src_data_i_V_read => compress_src_U0_src_data_i_V_read,
        src_data_V_V_TDATA => compress_src_U0_src_data_V_V_TDATA,
        src_data_V_V_TVALID => compress_src_U0_src_data_V_V_TVALID,
        src_data_V_V_TREADY => src_data_V_V_TREADY);

    gen_hard_words_U0 : component gen_hard_words
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => gen_hard_words_U0_ap_start,
        ap_done => gen_hard_words_U0_ap_done,
        ap_continue => gen_hard_words_U0_ap_continue,
        ap_idle => gen_hard_words_U0_ap_idle,
        ap_ready => gen_hard_words_U0_ap_ready,
        k_dout => block_cfg_k_channel2_3_dout,
        k_empty_n => block_cfg_k_channel2_3_empty_n,
        k_read => gen_hard_words_U0_k_read,
        hard_words_tx_dout => hard_words_tx_channe_1_dout,
        hard_words_tx_empty_n => hard_words_tx_channe_1_empty_n,
        hard_words_tx_read => gen_hard_words_U0_hard_words_tx_read,
        hard_words_TDATA => gen_hard_words_U0_hard_words_TDATA,
        hard_words_TVALID => gen_hard_words_U0_hard_words_TVALID,
        hard_words_TREADY => hard_words_TREADY,
        hard_words_TLAST => gen_hard_words_U0_hard_words_TLAST);

    block_cfg_code_chann_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_code_out_din,
        if_full_n => block_cfg_code_chann_full_n,
        if_write => run_ber_entry311_U0_block_cfg_code_out_write,
        if_dout => block_cfg_code_chann_dout,
        if_empty_n => block_cfg_code_chann_empty_n,
        if_read => run_ber_Block_data_g_U0_block_cfg_code_read);

    block_cfg_n_channel_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_n_out_din,
        if_full_n => block_cfg_n_channel_full_n,
        if_write => run_ber_entry311_U0_block_cfg_n_out_write,
        if_dout => block_cfg_n_channel_dout,
        if_empty_n => block_cfg_n_channel_empty_n,
        if_read => encoder_U0_ctrl_n_read);

    block_cfg_k_channel_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_k_out_din,
        if_full_n => block_cfg_k_channel_full_n,
        if_write => run_ber_entry311_U0_block_cfg_k_out_write,
        if_dout => block_cfg_k_channel_dout,
        if_empty_n => block_cfg_k_channel_empty_n,
        if_read => data_source_U0_ctrl_k_read);

    block_cfg_k_channel2_3_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_k_out1_din,
        if_full_n => block_cfg_k_channel2_3_full_n,
        if_write => run_ber_entry311_U0_block_cfg_k_out1_write,
        if_dout => block_cfg_k_channel2_3_dout,
        if_empty_n => block_cfg_k_channel2_3_empty_n,
        if_read => gen_hard_words_U0_k_read);

    block_cfg_term_on_pa_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_term_on_pass_out_din,
        if_full_n => block_cfg_term_on_pa_full_n,
        if_write => run_ber_entry311_U0_block_cfg_term_on_pass_out_write,
        if_dout => block_cfg_term_on_pa_dout,
        if_empty_n => block_cfg_term_on_pa_empty_n,
        if_read => run_ber_Block_data_g_U0_block_cfg_term_on_pass_read);

    block_cfg_max_iterat_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_max_iterations_out_din,
        if_full_n => block_cfg_max_iterat_full_n,
        if_write => run_ber_entry311_U0_block_cfg_max_iterations_out_write,
        if_dout => block_cfg_max_iterat_dout,
        if_empty_n => block_cfg_max_iterat_empty_n,
        if_read => run_ber_Block_data_g_U0_block_cfg_max_iterations_read);

    block_cfg_crc_type_c_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_crc_type_out_din,
        if_full_n => block_cfg_crc_type_c_full_n,
        if_write => run_ber_entry311_U0_block_cfg_crc_type_out_write,
        if_dout => block_cfg_crc_type_c_dout,
        if_empty_n => block_cfg_crc_type_c_empty_n,
        if_read => run_ber_Block_data_g_U0_block_cfg_crc_type_read);

    block_cfg_skip_chann_U : component fifo_w32_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_skip_channel_out_din,
        if_full_n => block_cfg_skip_chann_full_n,
        if_write => run_ber_entry311_U0_block_cfg_skip_channel_out_write,
        if_dout => block_cfg_skip_chann_dout,
        if_empty_n => block_cfg_skip_chann_empty_n,
        if_read => channel_U0_block_cfg_skip_channel_read);

    block_cfg_mod_type_c_1_U : component fifo_w32_d5_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_mod_type_out_din,
        if_full_n => block_cfg_mod_type_c_1_full_n,
        if_write => run_ber_entry311_U0_block_cfg_mod_type_out_write,
        if_dout => block_cfg_mod_type_c_1_dout,
        if_empty_n => block_cfg_mod_type_c_1_empty_n,
        if_read => modulate_U0_modulation_type_read);

    block_cfg_snr_V_chan_U : component fifo_w17_d6_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_snr_V_out_din,
        if_full_n => block_cfg_snr_V_chan_full_n,
        if_write => run_ber_entry311_U0_block_cfg_snr_V_out_write,
        if_dout => block_cfg_snr_V_chan_dout,
        if_empty_n => block_cfg_snr_V_chan_empty_n,
        if_read => channel_U0_block_cfg_snr_V_read);

    block_cfg_inv_sigma_s_U : component fifo_w17_d8_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_din,
        if_full_n => block_cfg_inv_sigma_s_full_n,
        if_write => run_ber_entry311_U0_block_cfg_inv_sigma_sq_V_out_write,
        if_dout => block_cfg_inv_sigma_s_dout,
        if_empty_n => block_cfg_inv_sigma_s_empty_n,
        if_read => demodulate_U0_inv_sigma_sq_V_read);

    block_cfg_outputs_ch_2_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_block_cfg_outputs_out_din,
        if_full_n => block_cfg_outputs_ch_2_full_n,
        if_write => run_ber_entry311_U0_block_cfg_outputs_out_write,
        if_dout => block_cfg_outputs_ch_2_dout,
        if_empty_n => block_cfg_outputs_ch_2_empty_n,
        if_read => run_ber_Loop_dup_src_U0_block_cfg_outputs_read);

    fec_type_channel_U : component fifo_w32_d9_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_fec_type_out_din,
        if_full_n => fec_type_channel_full_n,
        if_write => run_ber_entry311_U0_fec_type_out_write,
        if_dout => fec_type_channel_dout,
        if_empty_n => fec_type_channel_empty_n,
        if_read => compress_soft_U0_fec_type_read);

    fec_type_channel23_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_fec_type_out2_din,
        if_full_n => fec_type_channel23_full_n,
        if_write => run_ber_entry311_U0_fec_type_out2_write,
        if_dout => fec_type_channel23_dout,
        if_empty_n => fec_type_channel23_empty_n,
        if_read => run_ber_Block_data_g_U0_fec_type_read);

    soft_words_tx_channe_1_U : component fifo_w32_d9_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_soft_words_tx_out_din,
        if_full_n => soft_words_tx_channe_1_full_n,
        if_write => run_ber_entry311_U0_soft_words_tx_out_write,
        if_dout => soft_words_tx_channe_1_dout,
        if_empty_n => soft_words_tx_channe_1_empty_n,
        if_read => compress_soft_U0_soft_words_tx_read);

    hard_words_tx_channe_1_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_entry311_U0_hard_words_tx_out_din,
        if_full_n => hard_words_tx_channe_1_full_n,
        if_write => run_ber_entry311_U0_hard_words_tx_out_write,
        if_dout => hard_words_tx_channe_1_dout,
        if_empty_n => hard_words_tx_channe_1_empty_n,
        if_read => gen_hard_words_U0_hard_words_tx_read);

    src_data_g_V_U : component fifo_w1_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => src_data_g_V_din,
        if_full_n => src_data_g_V_full_n,
        if_write => data_source_U0_src_data_V_write,
        if_dout => src_data_g_V_dout,
        if_empty_n => src_data_g_V_empty_n,
        if_read => run_ber_Loop_dup_src_U0_src_data_g_V_read);

    block_cfg_k_channel2_2_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => data_source_U0_ctrl_k_out_din,
        if_full_n => block_cfg_k_channel2_2_full_n,
        if_write => data_source_U0_ctrl_k_out_write,
        if_dout => block_cfg_k_channel2_2_dout,
        if_empty_n => block_cfg_k_channel2_2_empty_n,
        if_read => run_ber_Loop_dup_src_U0_block_cfg_k_read);

    src_data_i_V_1_U : component fifo_w1_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_Loop_dup_src_U0_src_data_i_V_2_din,
        if_full_n => src_data_i_V_1_full_n,
        if_write => run_ber_Loop_dup_src_U0_src_data_i_V_2_write,
        if_dout => src_data_i_V_1_dout,
        if_empty_n => src_data_i_V_1_empty_n,
        if_read => compress_src_U0_src_data_i_V_read);

    src_data_i_V_U : component fifo_w1_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_Loop_dup_src_U0_src_data_i_V_din,
        if_full_n => src_data_i_V_full_n,
        if_write => run_ber_Loop_dup_src_U0_src_data_i_V_write,
        if_dout => src_data_i_V_dout,
        if_empty_n => src_data_i_V_empty_n,
        if_read => encoder_U0_src_data_V_read);

    block_cfg_k_channel2_1_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_Loop_dup_src_U0_block_cfg_k_out_din,
        if_full_n => block_cfg_k_channel2_1_full_n,
        if_write => run_ber_Loop_dup_src_U0_block_cfg_k_out_write,
        if_dout => block_cfg_k_channel2_1_dout,
        if_empty_n => block_cfg_k_channel2_1_empty_n,
        if_read => compress_src_U0_k_read);

    block_cfg_k_channel2_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_Loop_dup_src_U0_block_cfg_k_out1_din,
        if_full_n => block_cfg_k_channel2_full_n,
        if_write => run_ber_Loop_dup_src_U0_block_cfg_k_out1_write,
        if_dout => block_cfg_k_channel2_dout,
        if_empty_n => block_cfg_k_channel2_empty_n,
        if_read => encoder_U0_ctrl_k_read);

    block_cfg_outputs_ch_1_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_Loop_dup_src_U0_block_cfg_outputs_out_din,
        if_full_n => block_cfg_outputs_ch_1_full_n,
        if_write => run_ber_Loop_dup_src_U0_block_cfg_outputs_out_write,
        if_dout => block_cfg_outputs_ch_1_dout,
        if_empty_n => block_cfg_outputs_ch_1_empty_n,
        if_read => run_ber_Loop_dup_enc_U0_block_cfg_outputs_read);

    enc_data_g_V_U : component fifo_w1_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => enc_data_g_V_din,
        if_full_n => enc_data_g_V_full_n,
        if_write => encoder_U0_enc_data_V_write,
        if_dout => enc_data_g_V_dout,
        if_empty_n => enc_data_g_V_empty_n,
        if_read => run_ber_Loop_dup_enc_U0_enc_data_g_V_read);

    block_cfg_n_channel2_1_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => encoder_U0_ctrl_n_out_din,
        if_full_n => block_cfg_n_channel2_1_full_n,
        if_write => encoder_U0_ctrl_n_out_write,
        if_dout => block_cfg_n_channel2_1_dout,
        if_empty_n => block_cfg_n_channel2_1_empty_n,
        if_read => run_ber_Loop_dup_enc_U0_block_cfg_n_read);

    enc_data_i_V_U : component fifo_w1_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_Loop_dup_enc_U0_enc_data_i_V_din,
        if_full_n => enc_data_i_V_full_n,
        if_write => run_ber_Loop_dup_enc_U0_enc_data_i_V_write,
        if_dout => enc_data_i_V_dout,
        if_empty_n => enc_data_i_V_empty_n,
        if_read => modulate_U0_src_data_V_read);

    block_cfg_n_channel2_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_Loop_dup_enc_U0_block_cfg_n_out_din,
        if_full_n => block_cfg_n_channel2_full_n,
        if_write => run_ber_Loop_dup_enc_U0_block_cfg_n_out_write,
        if_dout => block_cfg_n_channel2_dout,
        if_empty_n => block_cfg_n_channel2_empty_n,
        if_read => modulate_U0_block_size_read);

    block_cfg_outputs_ch_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_din,
        if_full_n => block_cfg_outputs_ch_full_n,
        if_write => run_ber_Loop_dup_enc_U0_block_cfg_outputs_out_write,
        if_dout => block_cfg_outputs_ch_dout,
        if_empty_n => block_cfg_outputs_ch_empty_n,
        if_read => run_ber_Loop_dup_cha_U0_block_cfg_outputs_read);

    mod_data_V_M_real_V_U : component fifo_w16_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => modulate_U0_mod_data_V_M_real_V_din,
        if_full_n => mod_data_V_M_real_V_full_n,
        if_write => modulate_U0_mod_data_V_M_real_V_write,
        if_dout => mod_data_V_M_real_V_dout,
        if_empty_n => mod_data_V_M_real_V_empty_n,
        if_read => channel_U0_mod_data_V_M_real_V_read);

    mod_data_V_M_imag_V_U : component fifo_w16_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => modulate_U0_mod_data_V_M_imag_V_din,
        if_full_n => mod_data_V_M_imag_V_full_n,
        if_write => modulate_U0_mod_data_V_M_imag_V_write,
        if_dout => mod_data_V_M_imag_V_dout,
        if_empty_n => mod_data_V_M_imag_V_empty_n,
        if_read => channel_U0_mod_data_V_M_imag_V_read);

    mod_data_last_V_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mod_data_last_V_din,
        if_full_n => mod_data_last_V_full_n,
        if_write => modulate_U0_mod_data_last_V_write,
        if_dout => mod_data_last_V_dout,
        if_empty_n => mod_data_last_V_empty_n,
        if_read => channel_U0_mod_data_last_V_read);

    block_cfg_mod_type_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => modulate_U0_modulation_type_out_din,
        if_full_n => block_cfg_mod_type_c_full_n,
        if_write => modulate_U0_modulation_type_out_write,
        if_dout => block_cfg_mod_type_c_dout,
        if_empty_n => block_cfg_mod_type_c_empty_n,
        if_read => demodulate_U0_modulation_type_read);

    block_cfg_n_channel3_1_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => modulate_U0_block_size_out_din,
        if_full_n => block_cfg_n_channel3_1_full_n,
        if_write => modulate_U0_block_size_out_write,
        if_dout => block_cfg_n_channel3_1_dout,
        if_empty_n => block_cfg_n_channel3_1_empty_n,
        if_read => demodulate_U0_block_size_read);

    chan_data_g_V_M_rea_U : component fifo_w19_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => channel_U0_chan_data_V_M_real_s_din,
        if_full_n => chan_data_g_V_M_rea_full_n,
        if_write => channel_U0_chan_data_V_M_real_s_write,
        if_dout => chan_data_g_V_M_rea_dout,
        if_empty_n => chan_data_g_V_M_rea_empty_n,
        if_read => run_ber_Loop_dup_cha_U0_chan_data_g_V_M_real_V_read);

    chan_data_g_V_M_ima_U : component fifo_w19_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => channel_U0_chan_data_V_M_imag_s_din,
        if_full_n => chan_data_g_V_M_ima_full_n,
        if_write => channel_U0_chan_data_V_M_imag_s_write,
        if_dout => chan_data_g_V_M_ima_dout,
        if_empty_n => chan_data_g_V_M_ima_empty_n,
        if_read => run_ber_Loop_dup_cha_U0_chan_data_g_V_M_imag_V_read);

    chan_data_last_V_U : component fifo_w1_d32_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => chan_data_last_V_din,
        if_full_n => chan_data_last_V_full_n,
        if_write => channel_U0_chan_data_last_V_write,
        if_dout => chan_data_last_V_dout,
        if_empty_n => chan_data_last_V_empty_n,
        if_read => run_ber_Loop_dup_cha_U0_chan_data_last_V_read);

    chan_data_i_V_M_rea_U : component fifo_w19_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_din,
        if_full_n => chan_data_i_V_M_rea_full_n,
        if_write => run_ber_Loop_dup_cha_U0_chan_data_i_V_M_real_V_write,
        if_dout => chan_data_i_V_M_rea_dout,
        if_empty_n => chan_data_i_V_M_rea_empty_n,
        if_read => demodulate_U0_chan_data_V_M_real_s_read);

    chan_data_i_V_M_ima_U : component fifo_w19_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_din,
        if_full_n => chan_data_i_V_M_ima_full_n,
        if_write => run_ber_Loop_dup_cha_U0_chan_data_i_V_M_imag_V_write,
        if_dout => chan_data_i_V_M_ima_dout,
        if_empty_n => chan_data_i_V_M_ima_empty_n,
        if_read => demodulate_U0_chan_data_V_M_imag_s_read);

    soft_data_i_V_V_U : component fifo_w16_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => demodulate_U0_soft_data_V_V_din,
        if_full_n => soft_data_i_V_V_full_n,
        if_write => demodulate_U0_soft_data_V_V_write,
        if_dout => soft_data_i_V_V_dout,
        if_empty_n => soft_data_i_V_V_empty_n,
        if_read => compress_soft_U0_soft_data_i_V_V_read);

    block_cfg_n_channel3_U : component fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => demodulate_U0_block_size_out_din,
        if_full_n => block_cfg_n_channel3_full_n,
        if_write => demodulate_U0_block_size_out_write,
        if_dout => block_cfg_n_channel3_dout,
        if_empty_n => block_cfg_n_channel3_empty_n,
        if_read => compress_soft_U0_n_read);

    start_for_data_soDeQ_U : component start_for_data_soDeQ
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_data_source_U0_din,
        if_full_n => start_for_data_source_U0_full_n,
        if_write => run_ber_entry311_U0_start_write,
        if_dout => start_for_data_source_U0_dout,
        if_empty_n => start_for_data_source_U0_empty_n,
        if_read => data_source_U0_ap_ready);

    start_for_run_berEe0_U : component start_for_run_berEe0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_run_ber_Loop_dup_src_U0_din,
        if_full_n => start_for_run_ber_Loop_dup_src_U0_full_n,
        if_write => run_ber_entry311_U0_start_write,
        if_dout => start_for_run_ber_Loop_dup_src_U0_dout,
        if_empty_n => start_for_run_ber_Loop_dup_src_U0_empty_n,
        if_read => run_ber_Loop_dup_src_U0_ap_ready);

    start_for_encoderFfa_U : component start_for_encoderFfa
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_encoder_U0_din,
        if_full_n => start_for_encoder_U0_full_n,
        if_write => run_ber_entry311_U0_start_write,
        if_dout => start_for_encoder_U0_dout,
        if_empty_n => start_for_encoder_U0_empty_n,
        if_read => encoder_U0_ap_ready);

    start_for_modulatGfk_U : component start_for_modulatGfk
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_modulate_U0_din,
        if_full_n => start_for_modulate_U0_full_n,
        if_write => run_ber_entry311_U0_start_write,
        if_dout => start_for_modulate_U0_dout,
        if_empty_n => start_for_modulate_U0_empty_n,
        if_read => modulate_U0_ap_ready);

    start_for_channelHfu_U : component start_for_channelHfu
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_channel_U0_din,
        if_full_n => start_for_channel_U0_full_n,
        if_write => run_ber_entry311_U0_start_write,
        if_dout => start_for_channel_U0_dout,
        if_empty_n => start_for_channel_U0_empty_n,
        if_read => channel_U0_ap_ready);

    start_for_demodulIfE_U : component start_for_demodulIfE
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_demodulate_U0_din,
        if_full_n => start_for_demodulate_U0_full_n,
        if_write => run_ber_entry311_U0_start_write,
        if_dout => start_for_demodulate_U0_dout,
        if_empty_n => start_for_demodulate_U0_empty_n,
        if_read => demodulate_U0_ap_ready);

    start_for_compresJfO_U : component start_for_compresJfO
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compress_soft_U0_din,
        if_full_n => start_for_compress_soft_U0_full_n,
        if_write => run_ber_entry311_U0_start_write,
        if_dout => start_for_compress_soft_U0_dout,
        if_empty_n => start_for_compress_soft_U0_empty_n,
        if_read => compress_soft_U0_ap_ready);

    start_for_run_berKfY_U : component start_for_run_berKfY
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_run_ber_Block_data_g_U0_din,
        if_full_n => start_for_run_ber_Block_data_g_U0_full_n,
        if_write => run_ber_entry311_U0_start_write,
        if_dout => start_for_run_ber_Block_data_g_U0_dout,
        if_empty_n => start_for_run_ber_Block_data_g_U0_empty_n,
        if_read => run_ber_Block_data_g_U0_ap_ready);

    start_for_gen_harLf8_U : component start_for_gen_harLf8
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gen_hard_words_U0_din,
        if_full_n => start_for_gen_hard_words_U0_full_n,
        if_write => run_ber_entry311_U0_start_write,
        if_dout => start_for_gen_hard_words_U0_dout,
        if_empty_n => start_for_gen_hard_words_U0_empty_n,
        if_read => gen_hard_words_U0_ap_ready);

    start_for_run_berMgi_U : component start_for_run_berMgi
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_run_ber_Loop_dup_enc_U0_din,
        if_full_n => start_for_run_ber_Loop_dup_enc_U0_full_n,
        if_write => run_ber_Loop_dup_src_U0_start_write,
        if_dout => start_for_run_ber_Loop_dup_enc_U0_dout,
        if_empty_n => start_for_run_ber_Loop_dup_enc_U0_empty_n,
        if_read => run_ber_Loop_dup_enc_U0_ap_ready);

    start_for_compresNgs_U : component start_for_compresNgs
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_compress_src_U0_din,
        if_full_n => start_for_compress_src_U0_full_n,
        if_write => run_ber_Loop_dup_src_U0_start_write,
        if_dout => start_for_compress_src_U0_dout,
        if_empty_n => start_for_compress_src_U0_empty_n,
        if_read => compress_src_U0_ap_ready);

    start_for_run_berOgC_U : component start_for_run_berOgC
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_run_ber_Loop_dup_cha_U0_din,
        if_full_n => start_for_run_ber_Loop_dup_cha_U0_full_n,
        if_write => channel_U0_start_write,
        if_dout => start_for_run_ber_Loop_dup_cha_U0_dout,
        if_empty_n => start_for_run_ber_Loop_dup_cha_U0_empty_n,
        if_read => run_ber_Loop_dup_cha_U0_ap_ready);





    ap_reg_compress_soft_U0_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_compress_soft_U0_ap_done <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sync_done)) then 
                    ap_reg_compress_soft_U0_ap_done <= ap_const_logic_0;
                else 
                    ap_reg_compress_soft_U0_ap_done <= (compress_soft_U0_ap_done or ap_reg_compress_soft_U0_ap_done);
                end if; 
            end if;
        end if;
    end process;


    ap_reg_compress_src_U0_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_compress_src_U0_ap_done <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sync_done)) then 
                    ap_reg_compress_src_U0_ap_done <= ap_const_logic_0;
                else 
                    ap_reg_compress_src_U0_ap_done <= (compress_src_U0_ap_done or ap_reg_compress_src_U0_ap_done);
                end if; 
            end if;
        end if;
    end process;


    ap_reg_gen_hard_words_U0_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_gen_hard_words_U0_ap_done <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sync_done)) then 
                    ap_reg_gen_hard_words_U0_ap_done <= ap_const_logic_0;
                else 
                    ap_reg_gen_hard_words_U0_ap_done <= (gen_hard_words_U0_ap_done or ap_reg_gen_hard_words_U0_ap_done);
                end if; 
            end if;
        end if;
    end process;


    ap_reg_run_ber_Block_data_g_U0_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_run_ber_Block_data_g_U0_ap_done <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sync_done)) then 
                    ap_reg_run_ber_Block_data_g_U0_ap_done <= ap_const_logic_0;
                else 
                    ap_reg_run_ber_Block_data_g_U0_ap_done <= (run_ber_Block_data_g_U0_ap_done or ap_reg_run_ber_Block_data_g_U0_ap_done);
                end if; 
            end if;
        end if;
    end process;

    ap_done <= ap_sync_done;
    ap_idle <= (run_ber_entry311_U0_ap_idle and data_source_U0_ap_idle and run_ber_Loop_dup_src_U0_ap_idle and encoder_U0_ap_idle and run_ber_Loop_dup_enc_U0_ap_idle and modulate_U0_ap_idle and channel_U0_ap_idle and run_ber_Loop_dup_cha_U0_ap_idle and demodulate_U0_ap_idle and compress_soft_U0_ap_idle and run_ber_Block_data_g_U0_ap_idle and compress_src_U0_ap_idle and gen_hard_words_U0_ap_idle);
    ap_ready <= run_ber_entry311_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= (ap_reg_compress_src_U0_ap_done and ap_reg_compress_soft_U0_ap_done and ap_reg_run_ber_Block_data_g_U0_ap_done and ap_reg_gen_hard_words_U0_ap_done);
    ap_sync_ready <= run_ber_entry311_U0_ap_ready;
    chan_data_last_V_din <= (0=>channel_U0_chan_data_last_V_din, others=>'-');
    channel_U0_ap_continue <= ap_const_logic_1;
    channel_U0_ap_start <= start_for_channel_U0_empty_n;
    channel_U0_mod_data_last_V_dout <= mod_data_last_V_dout(0);
    compress_soft_U0_ap_continue <= ap_continue;
    compress_soft_U0_ap_start <= start_for_compress_soft_U0_empty_n;
    compress_src_U0_ap_continue <= ap_continue;
    compress_src_U0_ap_start <= start_for_compress_src_U0_empty_n;
    compress_src_U0_src_data_i_V_dout <= src_data_i_V_1_dout(0);
    data_source_U0_ap_continue <= ap_const_logic_1;
    data_source_U0_ap_start <= start_for_data_source_U0_empty_n;
    demodulate_U0_ap_continue <= ap_const_logic_1;
    demodulate_U0_ap_start <= start_for_demodulate_U0_empty_n;
    enc_data_g_V_din <= (0=>encoder_U0_enc_data_V_din, others=>'-');
    encoder_U0_ap_continue <= ap_const_logic_1;
    encoder_U0_ap_start <= start_for_encoder_U0_empty_n;
    encoder_U0_src_data_V_dout <= src_data_i_V_dout(0);
    fe_ctrl_V_V_TDATA <= run_ber_Block_data_g_U0_fe_ctrl_V_V_TDATA;
    fe_ctrl_V_V_TVALID <= run_ber_Block_data_g_U0_fe_ctrl_V_V_TVALID;
    gen_hard_words_U0_ap_continue <= ap_continue;
    gen_hard_words_U0_ap_start <= start_for_gen_hard_words_U0_empty_n;
    hard_words_TDATA <= gen_hard_words_U0_hard_words_TDATA;
    hard_words_TLAST <= gen_hard_words_U0_hard_words_TLAST;
    hard_words_TVALID <= gen_hard_words_U0_hard_words_TVALID;
    mod_data_last_V_din <= (0=>modulate_U0_mod_data_last_V_din, others=>'-');
    modulate_U0_ap_continue <= ap_const_logic_1;
    modulate_U0_ap_start <= start_for_modulate_U0_empty_n;
    modulate_U0_src_data_V_dout <= enc_data_i_V_dout(0);
    run_ber_Block_data_g_U0_ap_continue <= ap_continue;
    run_ber_Block_data_g_U0_ap_start <= start_for_run_ber_Block_data_g_U0_empty_n;
    run_ber_Loop_dup_cha_U0_ap_continue <= ap_const_logic_1;
    run_ber_Loop_dup_cha_U0_ap_start <= start_for_run_ber_Loop_dup_cha_U0_empty_n;
    run_ber_Loop_dup_enc_U0_ap_continue <= ap_const_logic_1;
    run_ber_Loop_dup_enc_U0_ap_start <= start_for_run_ber_Loop_dup_enc_U0_empty_n;
    run_ber_Loop_dup_src_U0_ap_continue <= ap_const_logic_1;
    run_ber_Loop_dup_src_U0_ap_start <= start_for_run_ber_Loop_dup_src_U0_empty_n;
    run_ber_entry311_U0_ap_continue <= ap_const_logic_1;
    run_ber_entry311_U0_ap_start <= ap_start;
    soft_data_TDATA <= compress_soft_U0_soft_data_TDATA;
    soft_data_TLAST <= compress_soft_U0_soft_data_TLAST;
    soft_data_TVALID <= compress_soft_U0_soft_data_TVALID;
    soft_words_TDATA <= compress_soft_U0_soft_words_TDATA;
    soft_words_TLAST <= compress_soft_U0_soft_words_TLAST;
    soft_words_TVALID <= compress_soft_U0_soft_words_TVALID;
    src_data_V_V_TDATA <= compress_src_U0_src_data_V_V_TDATA;
    src_data_V_V_TVALID <= compress_src_U0_src_data_V_V_TVALID;
    src_data_g_V_din <= (0=>data_source_U0_src_data_V_din, others=>'-');
    start_for_channel_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_compress_soft_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_compress_src_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_data_source_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_demodulate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_encoder_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gen_hard_words_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_modulate_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_run_ber_Block_data_g_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_run_ber_Loop_dup_cha_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_run_ber_Loop_dup_enc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_run_ber_Loop_dup_src_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
