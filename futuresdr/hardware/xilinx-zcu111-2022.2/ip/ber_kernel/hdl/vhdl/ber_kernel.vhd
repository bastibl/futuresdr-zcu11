-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ber_kernel is
generic (
    C_S_AXI_CNTRL_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_CNTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    src_data_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    src_data_V_V_TVALID : OUT STD_LOGIC;
    src_data_V_V_TREADY : IN STD_LOGIC;
    soft_data_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    soft_data_TVALID : OUT STD_LOGIC;
    soft_data_TREADY : IN STD_LOGIC;
    soft_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    soft_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    soft_words_TVALID : OUT STD_LOGIC;
    soft_words_TREADY : IN STD_LOGIC;
    soft_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    fe_ctrl_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    fe_ctrl_V_V_TVALID : OUT STD_LOGIC;
    fe_ctrl_V_V_TREADY : IN STD_LOGIC;
    hard_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    hard_words_TVALID : OUT STD_LOGIC;
    hard_words_TREADY : IN STD_LOGIC;
    hard_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CNTRL_AWVALID : IN STD_LOGIC;
    s_axi_CNTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CNTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CNTRL_WVALID : IN STD_LOGIC;
    s_axi_CNTRL_WREADY : OUT STD_LOGIC;
    s_axi_CNTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_CNTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CNTRL_ARVALID : IN STD_LOGIC;
    s_axi_CNTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CNTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CNTRL_RVALID : OUT STD_LOGIC;
    s_axi_CNTRL_RREADY : IN STD_LOGIC;
    s_axi_CNTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_CNTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CNTRL_BVALID : OUT STD_LOGIC;
    s_axi_CNTRL_BREADY : IN STD_LOGIC;
    s_axi_CNTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    cntrl_aclk : IN STD_LOGIC;
    ap_rst_n_cntrl_aclk : IN STD_LOGIC );
end;


architecture behav of ber_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ber_kernel,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e-es1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=38,HLS_SYN_DSP=24,HLS_SYN_FF=10303,HLS_SYN_LUT=11594}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal block_cfg_code_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_code_ce0 : STD_LOGIC;
    signal block_cfg_code_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_n_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_n_ce0 : STD_LOGIC;
    signal block_cfg_n_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_k_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_k_ce0 : STD_LOGIC;
    signal block_cfg_k_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_term_on_pass_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_term_on_pass_ce0 : STD_LOGIC;
    signal block_cfg_term_on_pass_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_max_iterations_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_max_iterations_ce0 : STD_LOGIC;
    signal block_cfg_max_iterations_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_crc_type_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_crc_type_ce0 : STD_LOGIC;
    signal block_cfg_crc_type_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_skip_channel_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_skip_channel_ce0 : STD_LOGIC;
    signal block_cfg_skip_channel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_mod_type_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_mod_type_ce0 : STD_LOGIC;
    signal block_cfg_mod_type_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_snr_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_snr_V_ce0 : STD_LOGIC;
    signal block_cfg_snr_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal block_cfg_inv_sigma_sq_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_inv_sigma_sq_V_ce0 : STD_LOGIC;
    signal block_cfg_inv_sigma_sq_V_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal block_cfg_outputs_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal block_cfg_outputs_ce0 : STD_LOGIC;
    signal block_cfg_outputs_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fec_type : STD_LOGIC_VECTOR (31 downto 0);
    signal soft_words_tx : STD_LOGIC_VECTOR (31 downto 0);
    signal hard_words_tx : STD_LOGIC_VECTOR (31 downto 0);
    signal block_def_cfg_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal block_def_cfg_ce0 : STD_LOGIC;
    signal block_def_cfg_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_def_cnt_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal block_def_cnt_ce0 : STD_LOGIC;
    signal block_def_cnt_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_defs : STD_LOGIC_VECTOR (31 downto 0);
    signal num_blocks : STD_LOGIC_VECTOR (31 downto 0);
    signal src_data_V_V_1_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal src_data_V_V_1_vld_in : STD_LOGIC;
    signal src_data_V_V_1_vld_out : STD_LOGIC;
    signal src_data_V_V_1_ack_in : STD_LOGIC;
    signal src_data_V_V_1_ack_out : STD_LOGIC;
    signal src_data_V_V_1_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal src_data_V_V_1_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal src_data_V_V_1_sel_rd : STD_LOGIC := '0';
    signal src_data_V_V_1_sel_wr : STD_LOGIC := '0';
    signal src_data_V_V_1_sel : STD_LOGIC;
    signal src_data_V_V_1_load_A : STD_LOGIC;
    signal src_data_V_V_1_load_B : STD_LOGIC;
    signal src_data_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_data_V_V_1_state_cmp_full : STD_LOGIC;
    signal soft_data_V_data_V_1_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal soft_data_V_data_V_1_vld_in : STD_LOGIC;
    signal soft_data_V_data_V_1_vld_out : STD_LOGIC;
    signal soft_data_V_data_V_1_ack_in : STD_LOGIC;
    signal soft_data_V_data_V_1_ack_out : STD_LOGIC;
    signal soft_data_V_data_V_1_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal soft_data_V_data_V_1_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal soft_data_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal soft_data_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal soft_data_V_data_V_1_sel : STD_LOGIC;
    signal soft_data_V_data_V_1_load_A : STD_LOGIC;
    signal soft_data_V_data_V_1_load_B : STD_LOGIC;
    signal soft_data_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal soft_data_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal soft_data_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal soft_data_V_last_V_1_vld_in : STD_LOGIC;
    signal soft_data_V_last_V_1_vld_out : STD_LOGIC;
    signal soft_data_V_last_V_1_ack_in : STD_LOGIC;
    signal soft_data_V_last_V_1_ack_out : STD_LOGIC;
    signal soft_data_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal soft_data_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal soft_data_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal soft_data_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal soft_data_V_last_V_1_sel : STD_LOGIC;
    signal soft_data_V_last_V_1_load_A : STD_LOGIC;
    signal soft_data_V_last_V_1_load_B : STD_LOGIC;
    signal soft_data_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal soft_data_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal soft_words_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal soft_words_V_data_V_1_vld_in : STD_LOGIC;
    signal soft_words_V_data_V_1_vld_out : STD_LOGIC;
    signal soft_words_V_data_V_1_ack_in : STD_LOGIC;
    signal soft_words_V_data_V_1_ack_out : STD_LOGIC;
    signal soft_words_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal soft_words_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal soft_words_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal soft_words_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal soft_words_V_data_V_1_sel : STD_LOGIC;
    signal soft_words_V_data_V_1_load_A : STD_LOGIC;
    signal soft_words_V_data_V_1_load_B : STD_LOGIC;
    signal soft_words_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal soft_words_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal soft_words_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal soft_words_V_last_V_1_vld_in : STD_LOGIC;
    signal soft_words_V_last_V_1_vld_out : STD_LOGIC;
    signal soft_words_V_last_V_1_ack_in : STD_LOGIC;
    signal soft_words_V_last_V_1_ack_out : STD_LOGIC;
    signal soft_words_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal soft_words_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal soft_words_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal soft_words_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal soft_words_V_last_V_1_sel : STD_LOGIC;
    signal soft_words_V_last_V_1_load_A : STD_LOGIC;
    signal soft_words_V_last_V_1_load_B : STD_LOGIC;
    signal soft_words_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal soft_words_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal fe_ctrl_V_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_ctrl_V_V_1_vld_in : STD_LOGIC;
    signal fe_ctrl_V_V_1_vld_out : STD_LOGIC;
    signal fe_ctrl_V_V_1_ack_in : STD_LOGIC;
    signal fe_ctrl_V_V_1_ack_out : STD_LOGIC;
    signal fe_ctrl_V_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_ctrl_V_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal fe_ctrl_V_V_1_sel_rd : STD_LOGIC := '0';
    signal fe_ctrl_V_V_1_sel_wr : STD_LOGIC := '0';
    signal fe_ctrl_V_V_1_sel : STD_LOGIC;
    signal fe_ctrl_V_V_1_load_A : STD_LOGIC;
    signal fe_ctrl_V_V_1_load_B : STD_LOGIC;
    signal fe_ctrl_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal fe_ctrl_V_V_1_state_cmp_full : STD_LOGIC;
    signal hard_words_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal hard_words_V_data_V_1_vld_in : STD_LOGIC;
    signal hard_words_V_data_V_1_vld_out : STD_LOGIC;
    signal hard_words_V_data_V_1_ack_in : STD_LOGIC;
    signal hard_words_V_data_V_1_ack_out : STD_LOGIC;
    signal hard_words_V_data_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal hard_words_V_data_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal hard_words_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal hard_words_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal hard_words_V_data_V_1_sel : STD_LOGIC;
    signal hard_words_V_data_V_1_load_A : STD_LOGIC;
    signal hard_words_V_data_V_1_load_B : STD_LOGIC;
    signal hard_words_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal hard_words_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal hard_words_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal hard_words_V_last_V_1_vld_in : STD_LOGIC;
    signal hard_words_V_last_V_1_vld_out : STD_LOGIC;
    signal hard_words_V_last_V_1_ack_in : STD_LOGIC;
    signal hard_words_V_last_V_1_ack_out : STD_LOGIC;
    signal hard_words_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal hard_words_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal hard_words_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal hard_words_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal hard_words_V_last_V_1_sel : STD_LOGIC;
    signal hard_words_V_last_V_1_load_A : STD_LOGIC;
    signal hard_words_V_last_V_1_load_B : STD_LOGIC;
    signal hard_words_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal hard_words_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal ap_rst_n_cntrl_aclk_inv : STD_LOGIC;
    signal num_blocks_read_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_defs_read_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal hard_words_tx_read_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal soft_words_tx_read_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal fec_type_read_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal def_i_1_fu_500_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal def_i_1_reg_652 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_658 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal def_cfg_reg_664 : STD_LOGIC_VECTOR (31 downto 0);
    signal def_cnt_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_674 : STD_LOGIC_VECTOR (0 downto 0);
    signal def_cnt_1_fu_526_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal def_cnt_1_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal def_cfg_1_fu_532_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal def_cfg_1_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_i_1_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_i_1_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_12_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal total_blocks_1_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_blocks_1_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_code_load_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal block_cfg_n_load_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_k_load_reg_773 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_term_on_pa_2_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_max_iterat_2_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_crc_type_l_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_skip_chann_2_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_mod_type_l_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_snr_V_load_reg_803 : STD_LOGIC_VECTOR (16 downto 0);
    signal block_cfg_inv_sigma_2_reg_808 : STD_LOGIC_VECTOR (16 downto 0);
    signal block_cfg_outputs_lo_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal def_i_be_fu_583_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal def_i_be_reg_818 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_i_be_fu_590_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_i_be_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_blocks_2_fu_596_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_blocks_2_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_run_ber_fu_398_src_data_V_V_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_run_ber_fu_398_soft_data_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_run_ber_fu_398_soft_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_run_ber_fu_398_soft_words_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_run_ber_fu_398_soft_words_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_run_ber_fu_398_fe_ctrl_V_V_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_run_ber_fu_398_hard_words_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_run_ber_fu_398_hard_words_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_run_ber_fu_398_soft_words_TVALID : STD_LOGIC;
    signal grp_run_ber_fu_398_soft_words_TREADY : STD_LOGIC;
    signal grp_run_ber_fu_398_soft_data_TVALID : STD_LOGIC;
    signal grp_run_ber_fu_398_soft_data_TREADY : STD_LOGIC;
    signal grp_run_ber_fu_398_ap_done : STD_LOGIC;
    signal grp_run_ber_fu_398_fe_ctrl_V_V_TVALID : STD_LOGIC;
    signal grp_run_ber_fu_398_fe_ctrl_V_V_TREADY : STD_LOGIC;
    signal grp_run_ber_fu_398_src_data_V_V_TVALID : STD_LOGIC;
    signal grp_run_ber_fu_398_src_data_V_V_TREADY : STD_LOGIC;
    signal grp_run_ber_fu_398_hard_words_TVALID : STD_LOGIC;
    signal grp_run_ber_fu_398_hard_words_TREADY : STD_LOGIC;
    signal grp_run_ber_fu_398_ap_start : STD_LOGIC;
    signal grp_run_ber_fu_398_ap_ready : STD_LOGIC;
    signal grp_run_ber_fu_398_ap_idle : STD_LOGIC;
    signal grp_run_ber_fu_398_ap_continue : STD_LOGIC;
    signal def_i_reg_362 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal b_i_reg_374 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_blocks_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_run_ber_fu_398_ap_start : STD_LOGIC := '0';
    signal ap_sync_reg_grp_run_ber_fu_398_ap_ready : STD_LOGIC := '0';
    signal ap_sync_grp_run_ber_fu_398_ap_ready : STD_LOGIC;
    signal tmp_10_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal def_cfg_2_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal def_cnt_2_fu_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_577_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);

    component run_ber IS
    port (
        block_cfg_code : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_n : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_k : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_term_on_pass : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_max_iterations : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_crc_type : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_skip_channel : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_mod_type : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_snr_V : IN STD_LOGIC_VECTOR (16 downto 0);
        block_cfg_inv_sigma_sq_V : IN STD_LOGIC_VECTOR (16 downto 0);
        block_cfg_outputs : IN STD_LOGIC_VECTOR (31 downto 0);
        fec_type : IN STD_LOGIC_VECTOR (31 downto 0);
        soft_words_tx : IN STD_LOGIC_VECTOR (31 downto 0);
        hard_words_tx : IN STD_LOGIC_VECTOR (31 downto 0);
        src_data_V_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        soft_data_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        soft_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        soft_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        soft_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        fe_ctrl_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        hard_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        hard_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        block_cfg_code_ap_vld : IN STD_LOGIC;
        block_cfg_n_ap_vld : IN STD_LOGIC;
        block_cfg_k_ap_vld : IN STD_LOGIC;
        block_cfg_term_on_pass_ap_vld : IN STD_LOGIC;
        block_cfg_max_iterations_ap_vld : IN STD_LOGIC;
        block_cfg_crc_type_ap_vld : IN STD_LOGIC;
        block_cfg_skip_channel_ap_vld : IN STD_LOGIC;
        block_cfg_mod_type_ap_vld : IN STD_LOGIC;
        block_cfg_snr_V_ap_vld : IN STD_LOGIC;
        block_cfg_inv_sigma_sq_V_ap_vld : IN STD_LOGIC;
        block_cfg_outputs_ap_vld : IN STD_LOGIC;
        fec_type_ap_vld : IN STD_LOGIC;
        soft_words_tx_ap_vld : IN STD_LOGIC;
        hard_words_tx_ap_vld : IN STD_LOGIC;
        soft_words_TVALID : OUT STD_LOGIC;
        soft_words_TREADY : IN STD_LOGIC;
        soft_data_TVALID : OUT STD_LOGIC;
        soft_data_TREADY : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        fe_ctrl_V_V_TVALID : OUT STD_LOGIC;
        fe_ctrl_V_V_TREADY : IN STD_LOGIC;
        src_data_V_V_TVALID : OUT STD_LOGIC;
        src_data_V_V_TREADY : IN STD_LOGIC;
        hard_words_TVALID : OUT STD_LOGIC;
        hard_words_TREADY : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component ber_kernel_CNTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        block_cfg_code_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_code_ce0 : IN STD_LOGIC;
        block_cfg_code_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_n_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_n_ce0 : IN STD_LOGIC;
        block_cfg_n_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_k_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_k_ce0 : IN STD_LOGIC;
        block_cfg_k_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_term_on_pass_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_term_on_pass_ce0 : IN STD_LOGIC;
        block_cfg_term_on_pass_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_max_iterations_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_max_iterations_ce0 : IN STD_LOGIC;
        block_cfg_max_iterations_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_crc_type_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_crc_type_ce0 : IN STD_LOGIC;
        block_cfg_crc_type_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_skip_channel_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_skip_channel_ce0 : IN STD_LOGIC;
        block_cfg_skip_channel_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_mod_type_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_mod_type_ce0 : IN STD_LOGIC;
        block_cfg_mod_type_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_cfg_snr_V_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_snr_V_ce0 : IN STD_LOGIC;
        block_cfg_snr_V_q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        block_cfg_inv_sigma_sq_V_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_inv_sigma_sq_V_ce0 : IN STD_LOGIC;
        block_cfg_inv_sigma_sq_V_q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        block_cfg_outputs_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        block_cfg_outputs_ce0 : IN STD_LOGIC;
        block_cfg_outputs_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fec_type : OUT STD_LOGIC_VECTOR (31 downto 0);
        soft_words_tx : OUT STD_LOGIC_VECTOR (31 downto 0);
        hard_words_tx : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_def_cfg_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        block_def_cfg_ce0 : IN STD_LOGIC;
        block_def_cfg_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        block_def_cnt_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        block_def_cnt_ce0 : IN STD_LOGIC;
        block_def_cnt_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_defs : OUT STD_LOGIC_VECTOR (31 downto 0);
        num_blocks : OUT STD_LOGIC_VECTOR (31 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;



begin
    ber_kernel_CNTRL_s_axi_U : component ber_kernel_CNTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CNTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CNTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CNTRL_AWVALID,
        AWREADY => s_axi_CNTRL_AWREADY,
        AWADDR => s_axi_CNTRL_AWADDR,
        WVALID => s_axi_CNTRL_WVALID,
        WREADY => s_axi_CNTRL_WREADY,
        WDATA => s_axi_CNTRL_WDATA,
        WSTRB => s_axi_CNTRL_WSTRB,
        ARVALID => s_axi_CNTRL_ARVALID,
        ARREADY => s_axi_CNTRL_ARREADY,
        ARADDR => s_axi_CNTRL_ARADDR,
        RVALID => s_axi_CNTRL_RVALID,
        RREADY => s_axi_CNTRL_RREADY,
        RDATA => s_axi_CNTRL_RDATA,
        RRESP => s_axi_CNTRL_RRESP,
        BVALID => s_axi_CNTRL_BVALID,
        BREADY => s_axi_CNTRL_BREADY,
        BRESP => s_axi_CNTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        block_cfg_code_address0 => block_cfg_code_address0,
        block_cfg_code_ce0 => block_cfg_code_ce0,
        block_cfg_code_q0 => block_cfg_code_q0,
        block_cfg_n_address0 => block_cfg_n_address0,
        block_cfg_n_ce0 => block_cfg_n_ce0,
        block_cfg_n_q0 => block_cfg_n_q0,
        block_cfg_k_address0 => block_cfg_k_address0,
        block_cfg_k_ce0 => block_cfg_k_ce0,
        block_cfg_k_q0 => block_cfg_k_q0,
        block_cfg_term_on_pass_address0 => block_cfg_term_on_pass_address0,
        block_cfg_term_on_pass_ce0 => block_cfg_term_on_pass_ce0,
        block_cfg_term_on_pass_q0 => block_cfg_term_on_pass_q0,
        block_cfg_max_iterations_address0 => block_cfg_max_iterations_address0,
        block_cfg_max_iterations_ce0 => block_cfg_max_iterations_ce0,
        block_cfg_max_iterations_q0 => block_cfg_max_iterations_q0,
        block_cfg_crc_type_address0 => block_cfg_crc_type_address0,
        block_cfg_crc_type_ce0 => block_cfg_crc_type_ce0,
        block_cfg_crc_type_q0 => block_cfg_crc_type_q0,
        block_cfg_skip_channel_address0 => block_cfg_skip_channel_address0,
        block_cfg_skip_channel_ce0 => block_cfg_skip_channel_ce0,
        block_cfg_skip_channel_q0 => block_cfg_skip_channel_q0,
        block_cfg_mod_type_address0 => block_cfg_mod_type_address0,
        block_cfg_mod_type_ce0 => block_cfg_mod_type_ce0,
        block_cfg_mod_type_q0 => block_cfg_mod_type_q0,
        block_cfg_snr_V_address0 => block_cfg_snr_V_address0,
        block_cfg_snr_V_ce0 => block_cfg_snr_V_ce0,
        block_cfg_snr_V_q0 => block_cfg_snr_V_q0,
        block_cfg_inv_sigma_sq_V_address0 => block_cfg_inv_sigma_sq_V_address0,
        block_cfg_inv_sigma_sq_V_ce0 => block_cfg_inv_sigma_sq_V_ce0,
        block_cfg_inv_sigma_sq_V_q0 => block_cfg_inv_sigma_sq_V_q0,
        block_cfg_outputs_address0 => block_cfg_outputs_address0,
        block_cfg_outputs_ce0 => block_cfg_outputs_ce0,
        block_cfg_outputs_q0 => block_cfg_outputs_q0,
        fec_type => fec_type,
        soft_words_tx => soft_words_tx,
        hard_words_tx => hard_words_tx,
        block_def_cfg_address0 => block_def_cfg_address0,
        block_def_cfg_ce0 => block_def_cfg_ce0,
        block_def_cfg_q0 => block_def_cfg_q0,
        block_def_cnt_address0 => block_def_cnt_address0,
        block_def_cnt_ce0 => block_def_cnt_ce0,
        block_def_cnt_q0 => block_def_cnt_q0,
        num_defs => num_defs,
        num_blocks => num_blocks,
        clk => cntrl_aclk,
        rst => ap_rst_n_cntrl_aclk_inv);

    grp_run_ber_fu_398 : component run_ber
    port map (
        block_cfg_code => block_cfg_code_load_reg_763,
        block_cfg_n => block_cfg_n_load_reg_768,
        block_cfg_k => block_cfg_k_load_reg_773,
        block_cfg_term_on_pass => block_cfg_term_on_pa_2_reg_778,
        block_cfg_max_iterations => block_cfg_max_iterat_2_reg_783,
        block_cfg_crc_type => block_cfg_crc_type_l_reg_788,
        block_cfg_skip_channel => block_cfg_skip_chann_2_reg_793,
        block_cfg_mod_type => block_cfg_mod_type_l_reg_798,
        block_cfg_snr_V => block_cfg_snr_V_load_reg_803,
        block_cfg_inv_sigma_sq_V => block_cfg_inv_sigma_2_reg_808,
        block_cfg_outputs => block_cfg_outputs_lo_reg_813,
        fec_type => fec_type_read_reg_634,
        soft_words_tx => soft_words_tx_read_reg_629,
        hard_words_tx => hard_words_tx_read_reg_624,
        src_data_V_V_TDATA => grp_run_ber_fu_398_src_data_V_V_TDATA,
        soft_data_TDATA => grp_run_ber_fu_398_soft_data_TDATA,
        soft_data_TLAST => grp_run_ber_fu_398_soft_data_TLAST,
        soft_words_TDATA => grp_run_ber_fu_398_soft_words_TDATA,
        soft_words_TLAST => grp_run_ber_fu_398_soft_words_TLAST,
        fe_ctrl_V_V_TDATA => grp_run_ber_fu_398_fe_ctrl_V_V_TDATA,
        hard_words_TDATA => grp_run_ber_fu_398_hard_words_TDATA,
        hard_words_TLAST => grp_run_ber_fu_398_hard_words_TLAST,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        block_cfg_code_ap_vld => ap_const_logic_1,
        block_cfg_n_ap_vld => ap_const_logic_1,
        block_cfg_k_ap_vld => ap_const_logic_1,
        block_cfg_term_on_pass_ap_vld => ap_const_logic_1,
        block_cfg_max_iterations_ap_vld => ap_const_logic_1,
        block_cfg_crc_type_ap_vld => ap_const_logic_1,
        block_cfg_skip_channel_ap_vld => ap_const_logic_1,
        block_cfg_mod_type_ap_vld => ap_const_logic_1,
        block_cfg_snr_V_ap_vld => ap_const_logic_1,
        block_cfg_inv_sigma_sq_V_ap_vld => ap_const_logic_1,
        block_cfg_outputs_ap_vld => ap_const_logic_1,
        fec_type_ap_vld => ap_const_logic_1,
        soft_words_tx_ap_vld => ap_const_logic_1,
        hard_words_tx_ap_vld => ap_const_logic_1,
        soft_words_TVALID => grp_run_ber_fu_398_soft_words_TVALID,
        soft_words_TREADY => grp_run_ber_fu_398_soft_words_TREADY,
        soft_data_TVALID => grp_run_ber_fu_398_soft_data_TVALID,
        soft_data_TREADY => grp_run_ber_fu_398_soft_data_TREADY,
        ap_done => grp_run_ber_fu_398_ap_done,
        fe_ctrl_V_V_TVALID => grp_run_ber_fu_398_fe_ctrl_V_V_TVALID,
        fe_ctrl_V_V_TREADY => grp_run_ber_fu_398_fe_ctrl_V_V_TREADY,
        src_data_V_V_TVALID => grp_run_ber_fu_398_src_data_V_V_TVALID,
        src_data_V_V_TREADY => grp_run_ber_fu_398_src_data_V_V_TREADY,
        hard_words_TVALID => grp_run_ber_fu_398_hard_words_TVALID,
        hard_words_TREADY => grp_run_ber_fu_398_hard_words_TREADY,
        ap_start => grp_run_ber_fu_398_ap_start,
        ap_ready => grp_run_ber_fu_398_ap_ready,
        ap_idle => grp_run_ber_fu_398_ap_idle,
        ap_continue => grp_run_ber_fu_398_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_run_ber_fu_398_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_run_ber_fu_398_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_logic_0 = ap_sync_grp_run_ber_fu_398_ap_ready)))) then 
                    ap_reg_grp_run_ber_fu_398_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_run_ber_fu_398_ap_ready)) then 
                    ap_reg_grp_run_ber_fu_398_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_run_ber_fu_398_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_run_ber_fu_398_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    if ((grp_run_ber_fu_398_ap_done = ap_const_logic_1)) then 
                        ap_sync_reg_grp_run_ber_fu_398_ap_ready <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = grp_run_ber_fu_398_ap_ready)) then 
                        ap_sync_reg_grp_run_ber_fu_398_ap_ready <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    fe_ctrl_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fe_ctrl_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = fe_ctrl_V_V_1_ack_out) and (ap_const_logic_1 = fe_ctrl_V_V_1_vld_out))) then 
                                        fe_ctrl_V_V_1_sel_rd <= not(fe_ctrl_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    fe_ctrl_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fe_ctrl_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = fe_ctrl_V_V_1_vld_in) and (ap_const_logic_1 = fe_ctrl_V_V_1_ack_in))) then 
                                        fe_ctrl_V_V_1_sel_wr <= not(fe_ctrl_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    fe_ctrl_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fe_ctrl_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = fe_ctrl_V_V_1_vld_in) and (ap_const_logic_1 = fe_ctrl_V_V_1_ack_out) and (ap_const_lv2_3 = fe_ctrl_V_V_1_state)) or ((ap_const_logic_0 = fe_ctrl_V_V_1_vld_in) and (ap_const_lv2_2 = fe_ctrl_V_V_1_state)))) then 
                    fe_ctrl_V_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = fe_ctrl_V_V_1_vld_in) and (ap_const_logic_0 = fe_ctrl_V_V_1_ack_out) and (ap_const_lv2_3 = fe_ctrl_V_V_1_state)) or ((ap_const_logic_0 = fe_ctrl_V_V_1_ack_out) and (ap_const_lv2_1 = fe_ctrl_V_V_1_state)))) then 
                    fe_ctrl_V_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = fe_ctrl_V_V_1_vld_in) and (ap_const_lv2_2 = fe_ctrl_V_V_1_state)) or ((ap_const_logic_1 = fe_ctrl_V_V_1_ack_out) and (ap_const_lv2_1 = fe_ctrl_V_V_1_state)) or ((ap_const_lv2_3 = fe_ctrl_V_V_1_state) and not(((ap_const_logic_1 = fe_ctrl_V_V_1_vld_in) and (ap_const_logic_0 = fe_ctrl_V_V_1_ack_out))) and not(((ap_const_logic_0 = fe_ctrl_V_V_1_vld_in) and (ap_const_logic_1 = fe_ctrl_V_V_1_ack_out)))))) then 
                    fe_ctrl_V_V_1_state <= ap_const_lv2_3;
                else 
                    fe_ctrl_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    hard_words_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_words_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = hard_words_V_data_V_1_ack_out) and (ap_const_logic_1 = hard_words_V_data_V_1_vld_out))) then 
                                        hard_words_V_data_V_1_sel_rd <= not(hard_words_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    hard_words_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_words_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = hard_words_V_data_V_1_vld_in) and (ap_const_logic_1 = hard_words_V_data_V_1_ack_in))) then 
                                        hard_words_V_data_V_1_sel_wr <= not(hard_words_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    hard_words_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_words_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = hard_words_V_data_V_1_vld_in) and (ap_const_logic_1 = hard_words_V_data_V_1_ack_out) and (ap_const_lv2_3 = hard_words_V_data_V_1_state)) or ((ap_const_logic_0 = hard_words_V_data_V_1_vld_in) and (ap_const_lv2_2 = hard_words_V_data_V_1_state)))) then 
                    hard_words_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = hard_words_V_data_V_1_vld_in) and (ap_const_logic_0 = hard_words_V_data_V_1_ack_out) and (ap_const_lv2_3 = hard_words_V_data_V_1_state)) or ((ap_const_logic_0 = hard_words_V_data_V_1_ack_out) and (ap_const_lv2_1 = hard_words_V_data_V_1_state)))) then 
                    hard_words_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = hard_words_V_data_V_1_vld_in) and (ap_const_lv2_2 = hard_words_V_data_V_1_state)) or ((ap_const_logic_1 = hard_words_V_data_V_1_ack_out) and (ap_const_lv2_1 = hard_words_V_data_V_1_state)) or ((ap_const_lv2_3 = hard_words_V_data_V_1_state) and not(((ap_const_logic_1 = hard_words_V_data_V_1_vld_in) and (ap_const_logic_0 = hard_words_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = hard_words_V_data_V_1_vld_in) and (ap_const_logic_1 = hard_words_V_data_V_1_ack_out)))))) then 
                    hard_words_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    hard_words_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    hard_words_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_words_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = hard_words_V_last_V_1_ack_out) and (ap_const_logic_1 = hard_words_V_last_V_1_vld_out))) then 
                                        hard_words_V_last_V_1_sel_rd <= not(hard_words_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    hard_words_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_words_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = hard_words_V_last_V_1_vld_in) and (ap_const_logic_1 = hard_words_V_last_V_1_ack_in))) then 
                                        hard_words_V_last_V_1_sel_wr <= not(hard_words_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    hard_words_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_words_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = hard_words_V_last_V_1_vld_in) and (ap_const_logic_1 = hard_words_V_last_V_1_ack_out) and (ap_const_lv2_3 = hard_words_V_last_V_1_state)) or ((ap_const_logic_0 = hard_words_V_last_V_1_vld_in) and (ap_const_lv2_2 = hard_words_V_last_V_1_state)))) then 
                    hard_words_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = hard_words_V_last_V_1_vld_in) and (ap_const_logic_0 = hard_words_V_last_V_1_ack_out) and (ap_const_lv2_3 = hard_words_V_last_V_1_state)) or ((ap_const_logic_0 = hard_words_V_last_V_1_ack_out) and (ap_const_lv2_1 = hard_words_V_last_V_1_state)))) then 
                    hard_words_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = hard_words_V_last_V_1_vld_in) and (ap_const_lv2_2 = hard_words_V_last_V_1_state)) or ((ap_const_logic_1 = hard_words_V_last_V_1_ack_out) and (ap_const_lv2_1 = hard_words_V_last_V_1_state)) or ((ap_const_lv2_3 = hard_words_V_last_V_1_state) and not(((ap_const_logic_1 = hard_words_V_last_V_1_vld_in) and (ap_const_logic_0 = hard_words_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = hard_words_V_last_V_1_vld_in) and (ap_const_logic_1 = hard_words_V_last_V_1_ack_out)))))) then 
                    hard_words_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    hard_words_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    soft_data_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_data_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = soft_data_V_data_V_1_ack_out) and (ap_const_logic_1 = soft_data_V_data_V_1_vld_out))) then 
                                        soft_data_V_data_V_1_sel_rd <= not(soft_data_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    soft_data_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_data_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = soft_data_V_data_V_1_vld_in) and (ap_const_logic_1 = soft_data_V_data_V_1_ack_in))) then 
                                        soft_data_V_data_V_1_sel_wr <= not(soft_data_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    soft_data_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_data_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = soft_data_V_data_V_1_vld_in) and (ap_const_logic_1 = soft_data_V_data_V_1_ack_out) and (ap_const_lv2_3 = soft_data_V_data_V_1_state)) or ((ap_const_logic_0 = soft_data_V_data_V_1_vld_in) and (ap_const_lv2_2 = soft_data_V_data_V_1_state)))) then 
                    soft_data_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = soft_data_V_data_V_1_vld_in) and (ap_const_logic_0 = soft_data_V_data_V_1_ack_out) and (ap_const_lv2_3 = soft_data_V_data_V_1_state)) or ((ap_const_logic_0 = soft_data_V_data_V_1_ack_out) and (ap_const_lv2_1 = soft_data_V_data_V_1_state)))) then 
                    soft_data_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = soft_data_V_data_V_1_vld_in) and (ap_const_lv2_2 = soft_data_V_data_V_1_state)) or ((ap_const_logic_1 = soft_data_V_data_V_1_ack_out) and (ap_const_lv2_1 = soft_data_V_data_V_1_state)) or ((ap_const_lv2_3 = soft_data_V_data_V_1_state) and not(((ap_const_logic_1 = soft_data_V_data_V_1_vld_in) and (ap_const_logic_0 = soft_data_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = soft_data_V_data_V_1_vld_in) and (ap_const_logic_1 = soft_data_V_data_V_1_ack_out)))))) then 
                    soft_data_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    soft_data_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    soft_data_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_data_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = soft_data_V_last_V_1_ack_out) and (ap_const_logic_1 = soft_data_V_last_V_1_vld_out))) then 
                                        soft_data_V_last_V_1_sel_rd <= not(soft_data_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    soft_data_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_data_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = soft_data_V_last_V_1_vld_in) and (ap_const_logic_1 = soft_data_V_last_V_1_ack_in))) then 
                                        soft_data_V_last_V_1_sel_wr <= not(soft_data_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    soft_data_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_data_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = soft_data_V_last_V_1_vld_in) and (ap_const_logic_1 = soft_data_V_last_V_1_ack_out) and (ap_const_lv2_3 = soft_data_V_last_V_1_state)) or ((ap_const_logic_0 = soft_data_V_last_V_1_vld_in) and (ap_const_lv2_2 = soft_data_V_last_V_1_state)))) then 
                    soft_data_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = soft_data_V_last_V_1_vld_in) and (ap_const_logic_0 = soft_data_V_last_V_1_ack_out) and (ap_const_lv2_3 = soft_data_V_last_V_1_state)) or ((ap_const_logic_0 = soft_data_V_last_V_1_ack_out) and (ap_const_lv2_1 = soft_data_V_last_V_1_state)))) then 
                    soft_data_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = soft_data_V_last_V_1_vld_in) and (ap_const_lv2_2 = soft_data_V_last_V_1_state)) or ((ap_const_logic_1 = soft_data_V_last_V_1_ack_out) and (ap_const_lv2_1 = soft_data_V_last_V_1_state)) or ((ap_const_lv2_3 = soft_data_V_last_V_1_state) and not(((ap_const_logic_1 = soft_data_V_last_V_1_vld_in) and (ap_const_logic_0 = soft_data_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = soft_data_V_last_V_1_vld_in) and (ap_const_logic_1 = soft_data_V_last_V_1_ack_out)))))) then 
                    soft_data_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    soft_data_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    soft_words_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_words_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = soft_words_V_data_V_1_ack_out) and (ap_const_logic_1 = soft_words_V_data_V_1_vld_out))) then 
                                        soft_words_V_data_V_1_sel_rd <= not(soft_words_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    soft_words_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_words_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = soft_words_V_data_V_1_vld_in) and (ap_const_logic_1 = soft_words_V_data_V_1_ack_in))) then 
                                        soft_words_V_data_V_1_sel_wr <= not(soft_words_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    soft_words_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_words_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = soft_words_V_data_V_1_vld_in) and (ap_const_logic_1 = soft_words_V_data_V_1_ack_out) and (ap_const_lv2_3 = soft_words_V_data_V_1_state)) or ((ap_const_logic_0 = soft_words_V_data_V_1_vld_in) and (ap_const_lv2_2 = soft_words_V_data_V_1_state)))) then 
                    soft_words_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = soft_words_V_data_V_1_vld_in) and (ap_const_logic_0 = soft_words_V_data_V_1_ack_out) and (ap_const_lv2_3 = soft_words_V_data_V_1_state)) or ((ap_const_logic_0 = soft_words_V_data_V_1_ack_out) and (ap_const_lv2_1 = soft_words_V_data_V_1_state)))) then 
                    soft_words_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = soft_words_V_data_V_1_vld_in) and (ap_const_lv2_2 = soft_words_V_data_V_1_state)) or ((ap_const_logic_1 = soft_words_V_data_V_1_ack_out) and (ap_const_lv2_1 = soft_words_V_data_V_1_state)) or ((ap_const_lv2_3 = soft_words_V_data_V_1_state) and not(((ap_const_logic_1 = soft_words_V_data_V_1_vld_in) and (ap_const_logic_0 = soft_words_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = soft_words_V_data_V_1_vld_in) and (ap_const_logic_1 = soft_words_V_data_V_1_ack_out)))))) then 
                    soft_words_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    soft_words_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    soft_words_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_words_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = soft_words_V_last_V_1_ack_out) and (ap_const_logic_1 = soft_words_V_last_V_1_vld_out))) then 
                                        soft_words_V_last_V_1_sel_rd <= not(soft_words_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    soft_words_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_words_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = soft_words_V_last_V_1_vld_in) and (ap_const_logic_1 = soft_words_V_last_V_1_ack_in))) then 
                                        soft_words_V_last_V_1_sel_wr <= not(soft_words_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    soft_words_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                soft_words_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = soft_words_V_last_V_1_vld_in) and (ap_const_logic_1 = soft_words_V_last_V_1_ack_out) and (ap_const_lv2_3 = soft_words_V_last_V_1_state)) or ((ap_const_logic_0 = soft_words_V_last_V_1_vld_in) and (ap_const_lv2_2 = soft_words_V_last_V_1_state)))) then 
                    soft_words_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = soft_words_V_last_V_1_vld_in) and (ap_const_logic_0 = soft_words_V_last_V_1_ack_out) and (ap_const_lv2_3 = soft_words_V_last_V_1_state)) or ((ap_const_logic_0 = soft_words_V_last_V_1_ack_out) and (ap_const_lv2_1 = soft_words_V_last_V_1_state)))) then 
                    soft_words_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = soft_words_V_last_V_1_vld_in) and (ap_const_lv2_2 = soft_words_V_last_V_1_state)) or ((ap_const_logic_1 = soft_words_V_last_V_1_ack_out) and (ap_const_lv2_1 = soft_words_V_last_V_1_state)) or ((ap_const_lv2_3 = soft_words_V_last_V_1_state) and not(((ap_const_logic_1 = soft_words_V_last_V_1_vld_in) and (ap_const_logic_0 = soft_words_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = soft_words_V_last_V_1_vld_in) and (ap_const_logic_1 = soft_words_V_last_V_1_ack_out)))))) then 
                    soft_words_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    soft_words_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_data_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_data_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = src_data_V_V_1_ack_out) and (ap_const_logic_1 = src_data_V_V_1_vld_out))) then 
                                        src_data_V_V_1_sel_rd <= not(src_data_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_data_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_data_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = src_data_V_V_1_vld_in) and (ap_const_logic_1 = src_data_V_V_1_ack_in))) then 
                                        src_data_V_V_1_sel_wr <= not(src_data_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_data_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_data_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = src_data_V_V_1_vld_in) and (ap_const_logic_1 = src_data_V_V_1_ack_out) and (src_data_V_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = src_data_V_V_1_vld_in) and (src_data_V_V_1_state = ap_const_lv2_2)))) then 
                    src_data_V_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = src_data_V_V_1_vld_in) and (ap_const_logic_0 = src_data_V_V_1_ack_out) and (src_data_V_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = src_data_V_V_1_ack_out) and (src_data_V_V_1_state = ap_const_lv2_1)))) then 
                    src_data_V_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = src_data_V_V_1_vld_in) and (src_data_V_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = src_data_V_V_1_ack_out) and (src_data_V_V_1_state = ap_const_lv2_1)) or ((src_data_V_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = src_data_V_V_1_vld_in) and (ap_const_logic_0 = src_data_V_V_1_ack_out))) and not(((ap_const_logic_0 = src_data_V_V_1_vld_in) and (ap_const_logic_1 = src_data_V_V_1_ack_out)))))) then 
                    src_data_V_V_1_state <= ap_const_lv2_3;
                else 
                    src_data_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    b_i_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_run_ber_fu_398_ap_done = ap_const_logic_1))) then 
                b_i_reg_374 <= b_i_be_reg_823;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                b_i_reg_374 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    def_i_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_run_ber_fu_398_ap_done = ap_const_logic_1))) then 
                def_i_reg_362 <= def_i_be_reg_818;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                def_i_reg_362 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    total_blocks_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_run_ber_fu_398_ap_done = ap_const_logic_1))) then 
                total_blocks_reg_386 <= total_blocks_2_reg_828;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                total_blocks_reg_386 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                b_i_1_reg_690 <= b_i_1_fu_538_p2;
                def_cfg_1_reg_685 <= def_cfg_1_fu_532_p3;
                def_cfg_2_fu_168 <= def_cfg_1_fu_532_p3;
                def_cnt_1_reg_679 <= def_cnt_1_fu_526_p3;
                def_cnt_2_fu_172 <= def_cnt_1_fu_526_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                b_i_be_reg_823 <= b_i_be_fu_590_p3;
                block_cfg_code_load_reg_763 <= block_cfg_code_q0;
                block_cfg_crc_type_l_reg_788 <= block_cfg_crc_type_q0;
                block_cfg_inv_sigma_2_reg_808 <= block_cfg_inv_sigma_sq_V_q0;
                block_cfg_k_load_reg_773 <= block_cfg_k_q0;
                block_cfg_max_iterat_2_reg_783 <= block_cfg_max_iterations_q0;
                block_cfg_mod_type_l_reg_798 <= block_cfg_mod_type_q0;
                block_cfg_n_load_reg_768 <= block_cfg_n_q0;
                block_cfg_outputs_lo_reg_813 <= block_cfg_outputs_q0;
                block_cfg_skip_chann_2_reg_793 <= block_cfg_skip_channel_q0;
                block_cfg_snr_V_load_reg_803 <= block_cfg_snr_V_q0;
                block_cfg_term_on_pa_2_reg_778 <= block_cfg_term_on_pass_q0;
                def_i_be_reg_818 <= def_i_be_fu_583_p3;
                total_blocks_2_reg_828 <= total_blocks_2_fu_596_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                def_cfg_reg_664 <= block_def_cfg_q0;
                def_cnt_reg_669 <= block_def_cnt_q0;
                tmp_14_reg_674 <= tmp_14_fu_515_p2;
                tmp_s_reg_658 <= tmp_s_fu_506_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_489_p2))) then
                def_i_1_reg_652 <= def_i_1_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = fe_ctrl_V_V_1_load_A)) then
                fe_ctrl_V_V_1_payload_A <= grp_run_ber_fu_398_fe_ctrl_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = fe_ctrl_V_V_1_load_B)) then
                fe_ctrl_V_V_1_payload_B <= grp_run_ber_fu_398_fe_ctrl_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                fec_type_read_reg_634 <= fec_type;
                hard_words_tx_read_reg_624 <= hard_words_tx;
                num_blocks_read_reg_614 <= num_blocks;
                num_defs_read_reg_619 <= num_defs;
                soft_words_tx_read_reg_629 <= soft_words_tx;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = hard_words_V_data_V_1_load_A)) then
                hard_words_V_data_V_1_payload_A <= grp_run_ber_fu_398_hard_words_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = hard_words_V_data_V_1_load_B)) then
                hard_words_V_data_V_1_payload_B <= grp_run_ber_fu_398_hard_words_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = hard_words_V_last_V_1_load_A)) then
                hard_words_V_last_V_1_payload_A <= grp_run_ber_fu_398_hard_words_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = hard_words_V_last_V_1_load_B)) then
                hard_words_V_last_V_1_payload_B <= grp_run_ber_fu_398_hard_words_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = soft_data_V_data_V_1_load_A)) then
                soft_data_V_data_V_1_payload_A <= grp_run_ber_fu_398_soft_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = soft_data_V_data_V_1_load_B)) then
                soft_data_V_data_V_1_payload_B <= grp_run_ber_fu_398_soft_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = soft_data_V_last_V_1_load_A)) then
                soft_data_V_last_V_1_payload_A <= grp_run_ber_fu_398_soft_data_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = soft_data_V_last_V_1_load_B)) then
                soft_data_V_last_V_1_payload_B <= grp_run_ber_fu_398_soft_data_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = soft_words_V_data_V_1_load_A)) then
                soft_words_V_data_V_1_payload_A <= grp_run_ber_fu_398_soft_words_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = soft_words_V_data_V_1_load_B)) then
                soft_words_V_data_V_1_payload_B <= grp_run_ber_fu_398_soft_words_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = soft_words_V_last_V_1_load_A)) then
                soft_words_V_last_V_1_payload_A <= grp_run_ber_fu_398_soft_words_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = soft_words_V_last_V_1_load_B)) then
                soft_words_V_last_V_1_payload_B <= grp_run_ber_fu_398_soft_words_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = src_data_V_V_1_load_A)) then
                src_data_V_V_1_payload_A <= grp_run_ber_fu_398_src_data_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = src_data_V_V_1_load_B)) then
                src_data_V_V_1_payload_B <= grp_run_ber_fu_398_src_data_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_12_reg_751 <= tmp_12_fu_568_p2;
                total_blocks_1_reg_758 <= total_blocks_1_fu_572_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, tmp_fu_489_p2, grp_run_ber_fu_398_ap_done, ap_block_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((ap_start = ap_const_logic_1)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_lv1_0 = tmp_fu_489_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if ((grp_run_ber_fu_398_ap_done = ap_const_logic_1)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((ap_block_state8 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state8_assign_proc : process(src_data_V_V_1_ack_in, soft_data_V_data_V_1_ack_in, soft_data_V_last_V_1_ack_in, soft_words_V_data_V_1_ack_in, soft_words_V_last_V_1_ack_in, fe_ctrl_V_V_1_ack_in, hard_words_V_data_V_1_ack_in, hard_words_V_last_V_1_ack_in)
    begin
                ap_block_state8 <= ((ap_const_logic_0 = src_data_V_V_1_ack_in) or (ap_const_logic_0 = soft_data_V_data_V_1_ack_in) or (ap_const_logic_0 = soft_data_V_last_V_1_ack_in) or (ap_const_logic_0 = soft_words_V_data_V_1_ack_in) or (ap_const_logic_0 = soft_words_V_last_V_1_ack_in) or (ap_const_logic_0 = fe_ctrl_V_V_1_ack_in) or (ap_const_logic_0 = hard_words_V_data_V_1_ack_in) or (ap_const_logic_0 = hard_words_V_last_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8, ap_block_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_block_state8 = ap_const_boolean_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8, ap_block_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_block_state8 = ap_const_boolean_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_cntrl_aclk_inv_assign_proc : process(ap_rst_n_cntrl_aclk)
    begin
                ap_rst_n_cntrl_aclk_inv <= not(ap_rst_n_cntrl_aclk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sync_grp_run_ber_fu_398_ap_ready_assign_proc : process(grp_run_ber_fu_398_ap_ready, ap_sync_reg_grp_run_ber_fu_398_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_sync_reg_grp_run_ber_fu_398_ap_ready)) then 
            ap_sync_grp_run_ber_fu_398_ap_ready <= grp_run_ber_fu_398_ap_ready;
        else 
            ap_sync_grp_run_ber_fu_398_ap_ready <= ap_const_logic_1;
        end if; 
    end process;

    b_i_1_fu_538_p2 <= std_logic_vector(unsigned(b_i_reg_374) + unsigned(ap_const_lv32_1));
    b_i_be_fu_590_p3 <= 
        ap_const_lv32_0 when (tmp_12_reg_751(0) = '1') else 
        b_i_1_reg_690;
    block_cfg_code_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_code_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_code_ce0 <= ap_const_logic_1;
        else 
            block_cfg_code_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_cfg_crc_type_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_crc_type_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_crc_type_ce0 <= ap_const_logic_1;
        else 
            block_cfg_crc_type_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_cfg_inv_sigma_sq_V_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_inv_sigma_sq_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_inv_sigma_sq_V_ce0 <= ap_const_logic_1;
        else 
            block_cfg_inv_sigma_sq_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_cfg_k_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_k_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_k_ce0 <= ap_const_logic_1;
        else 
            block_cfg_k_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_cfg_max_iterations_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_max_iterations_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_max_iterations_ce0 <= ap_const_logic_1;
        else 
            block_cfg_max_iterations_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_cfg_mod_type_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_mod_type_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_mod_type_ce0 <= ap_const_logic_1;
        else 
            block_cfg_mod_type_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_cfg_n_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_n_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_n_ce0 <= ap_const_logic_1;
        else 
            block_cfg_n_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_cfg_outputs_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_outputs_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_outputs_ce0 <= ap_const_logic_1;
        else 
            block_cfg_outputs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_cfg_skip_channel_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_skip_channel_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_skip_channel_ce0 <= ap_const_logic_1;
        else 
            block_cfg_skip_channel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_cfg_snr_V_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_snr_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_snr_V_ce0 <= ap_const_logic_1;
        else 
            block_cfg_snr_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_cfg_term_on_pass_address0 <= tmp_11_fu_554_p1(5 - 1 downto 0);

    block_cfg_term_on_pass_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            block_cfg_term_on_pass_ce0 <= ap_const_logic_1;
        else 
            block_cfg_term_on_pass_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_def_cfg_address0 <= tmp_10_fu_494_p1(6 - 1 downto 0);

    block_def_cfg_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            block_def_cfg_ce0 <= ap_const_logic_1;
        else 
            block_def_cfg_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    block_def_cnt_address0 <= tmp_10_fu_494_p1(6 - 1 downto 0);

    block_def_cnt_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            block_def_cnt_ce0 <= ap_const_logic_1;
        else 
            block_def_cnt_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    def_cfg_1_fu_532_p3 <= 
        def_cfg_reg_664 when (tmp_s_reg_658(0) = '1') else 
        def_cfg_2_fu_168;
    def_cnt_1_fu_526_p3 <= 
        def_cnt_reg_669 when (tmp_s_reg_658(0) = '1') else 
        def_cnt_2_fu_172;
    def_i_1_fu_500_p2 <= std_logic_vector(unsigned(def_i_reg_362) + unsigned(ap_const_lv8_1));
    def_i_be_fu_583_p3 <= 
        p_s_fu_577_p3 when (tmp_12_reg_751(0) = '1') else 
        def_i_reg_362;
    fe_ctrl_V_V_1_ack_in <= fe_ctrl_V_V_1_state(1);
    fe_ctrl_V_V_1_ack_out <= fe_ctrl_V_V_TREADY;

    fe_ctrl_V_V_1_data_out_assign_proc : process(fe_ctrl_V_V_1_payload_A, fe_ctrl_V_V_1_payload_B, fe_ctrl_V_V_1_sel)
    begin
        if ((ap_const_logic_1 = fe_ctrl_V_V_1_sel)) then 
            fe_ctrl_V_V_1_data_out <= fe_ctrl_V_V_1_payload_B;
        else 
            fe_ctrl_V_V_1_data_out <= fe_ctrl_V_V_1_payload_A;
        end if; 
    end process;

    fe_ctrl_V_V_1_load_A <= (fe_ctrl_V_V_1_state_cmp_full and not(fe_ctrl_V_V_1_sel_wr));
    fe_ctrl_V_V_1_load_B <= (fe_ctrl_V_V_1_sel_wr and fe_ctrl_V_V_1_state_cmp_full);
    fe_ctrl_V_V_1_sel <= fe_ctrl_V_V_1_sel_rd;
    fe_ctrl_V_V_1_state_cmp_full <= '0' when (fe_ctrl_V_V_1_state = ap_const_lv2_1) else '1';
    fe_ctrl_V_V_1_vld_in <= grp_run_ber_fu_398_fe_ctrl_V_V_TVALID;
    fe_ctrl_V_V_1_vld_out <= fe_ctrl_V_V_1_state(0);
    fe_ctrl_V_V_TDATA <= fe_ctrl_V_V_1_data_out;
    fe_ctrl_V_V_TVALID <= fe_ctrl_V_V_1_state(0);

    grp_run_ber_fu_398_ap_continue_assign_proc : process(grp_run_ber_fu_398_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_run_ber_fu_398_ap_done = ap_const_logic_1))) then 
            grp_run_ber_fu_398_ap_continue <= ap_const_logic_1;
        else 
            grp_run_ber_fu_398_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_run_ber_fu_398_ap_start <= ap_reg_grp_run_ber_fu_398_ap_start;
    grp_run_ber_fu_398_fe_ctrl_V_V_TREADY <= fe_ctrl_V_V_1_state(1);
    grp_run_ber_fu_398_hard_words_TREADY <= hard_words_V_last_V_1_state(1);
    grp_run_ber_fu_398_soft_data_TREADY <= soft_data_V_last_V_1_state(1);
    grp_run_ber_fu_398_soft_words_TREADY <= soft_words_V_last_V_1_state(1);
    grp_run_ber_fu_398_src_data_V_V_TREADY <= src_data_V_V_1_state(1);
    hard_words_TDATA <= hard_words_V_data_V_1_data_out;
    hard_words_TLAST <= hard_words_V_last_V_1_data_out;
    hard_words_TVALID <= hard_words_V_last_V_1_state(0);
    hard_words_V_data_V_1_ack_in <= hard_words_V_data_V_1_state(1);
    hard_words_V_data_V_1_ack_out <= hard_words_TREADY;

    hard_words_V_data_V_1_data_out_assign_proc : process(hard_words_V_data_V_1_payload_A, hard_words_V_data_V_1_payload_B, hard_words_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = hard_words_V_data_V_1_sel)) then 
            hard_words_V_data_V_1_data_out <= hard_words_V_data_V_1_payload_B;
        else 
            hard_words_V_data_V_1_data_out <= hard_words_V_data_V_1_payload_A;
        end if; 
    end process;

    hard_words_V_data_V_1_load_A <= (hard_words_V_data_V_1_state_cmp_full and not(hard_words_V_data_V_1_sel_wr));
    hard_words_V_data_V_1_load_B <= (hard_words_V_data_V_1_sel_wr and hard_words_V_data_V_1_state_cmp_full);
    hard_words_V_data_V_1_sel <= hard_words_V_data_V_1_sel_rd;
    hard_words_V_data_V_1_state_cmp_full <= '0' when (hard_words_V_data_V_1_state = ap_const_lv2_1) else '1';
    hard_words_V_data_V_1_vld_in <= grp_run_ber_fu_398_hard_words_TVALID;
    hard_words_V_data_V_1_vld_out <= hard_words_V_data_V_1_state(0);
    hard_words_V_last_V_1_ack_in <= hard_words_V_last_V_1_state(1);
    hard_words_V_last_V_1_ack_out <= hard_words_TREADY;

    hard_words_V_last_V_1_data_out_assign_proc : process(hard_words_V_last_V_1_payload_A, hard_words_V_last_V_1_payload_B, hard_words_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = hard_words_V_last_V_1_sel)) then 
            hard_words_V_last_V_1_data_out <= hard_words_V_last_V_1_payload_B;
        else 
            hard_words_V_last_V_1_data_out <= hard_words_V_last_V_1_payload_A;
        end if; 
    end process;

    hard_words_V_last_V_1_load_A <= (hard_words_V_last_V_1_state_cmp_full and not(hard_words_V_last_V_1_sel_wr));
    hard_words_V_last_V_1_load_B <= (hard_words_V_last_V_1_sel_wr and hard_words_V_last_V_1_state_cmp_full);
    hard_words_V_last_V_1_sel <= hard_words_V_last_V_1_sel_rd;
    hard_words_V_last_V_1_state_cmp_full <= '0' when (hard_words_V_last_V_1_state = ap_const_lv2_1) else '1';
    hard_words_V_last_V_1_vld_in <= grp_run_ber_fu_398_hard_words_TVALID;
    hard_words_V_last_V_1_vld_out <= hard_words_V_last_V_1_state(0);
    p_s_fu_577_p3 <= 
        ap_const_lv8_0 when (tmp_14_reg_674(0) = '1') else 
        def_i_1_reg_652;
    soft_data_TDATA <= soft_data_V_data_V_1_data_out;
    soft_data_TLAST <= soft_data_V_last_V_1_data_out;
    soft_data_TVALID <= soft_data_V_last_V_1_state(0);
    soft_data_V_data_V_1_ack_in <= soft_data_V_data_V_1_state(1);
    soft_data_V_data_V_1_ack_out <= soft_data_TREADY;

    soft_data_V_data_V_1_data_out_assign_proc : process(soft_data_V_data_V_1_payload_A, soft_data_V_data_V_1_payload_B, soft_data_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = soft_data_V_data_V_1_sel)) then 
            soft_data_V_data_V_1_data_out <= soft_data_V_data_V_1_payload_B;
        else 
            soft_data_V_data_V_1_data_out <= soft_data_V_data_V_1_payload_A;
        end if; 
    end process;

    soft_data_V_data_V_1_load_A <= (soft_data_V_data_V_1_state_cmp_full and not(soft_data_V_data_V_1_sel_wr));
    soft_data_V_data_V_1_load_B <= (soft_data_V_data_V_1_sel_wr and soft_data_V_data_V_1_state_cmp_full);
    soft_data_V_data_V_1_sel <= soft_data_V_data_V_1_sel_rd;
    soft_data_V_data_V_1_state_cmp_full <= '0' when (soft_data_V_data_V_1_state = ap_const_lv2_1) else '1';
    soft_data_V_data_V_1_vld_in <= grp_run_ber_fu_398_soft_data_TVALID;
    soft_data_V_data_V_1_vld_out <= soft_data_V_data_V_1_state(0);
    soft_data_V_last_V_1_ack_in <= soft_data_V_last_V_1_state(1);
    soft_data_V_last_V_1_ack_out <= soft_data_TREADY;

    soft_data_V_last_V_1_data_out_assign_proc : process(soft_data_V_last_V_1_payload_A, soft_data_V_last_V_1_payload_B, soft_data_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = soft_data_V_last_V_1_sel)) then 
            soft_data_V_last_V_1_data_out <= soft_data_V_last_V_1_payload_B;
        else 
            soft_data_V_last_V_1_data_out <= soft_data_V_last_V_1_payload_A;
        end if; 
    end process;

    soft_data_V_last_V_1_load_A <= (soft_data_V_last_V_1_state_cmp_full and not(soft_data_V_last_V_1_sel_wr));
    soft_data_V_last_V_1_load_B <= (soft_data_V_last_V_1_sel_wr and soft_data_V_last_V_1_state_cmp_full);
    soft_data_V_last_V_1_sel <= soft_data_V_last_V_1_sel_rd;
    soft_data_V_last_V_1_state_cmp_full <= '0' when (soft_data_V_last_V_1_state = ap_const_lv2_1) else '1';
    soft_data_V_last_V_1_vld_in <= grp_run_ber_fu_398_soft_data_TVALID;
    soft_data_V_last_V_1_vld_out <= soft_data_V_last_V_1_state(0);
    soft_words_TDATA <= soft_words_V_data_V_1_data_out;
    soft_words_TLAST <= soft_words_V_last_V_1_data_out;
    soft_words_TVALID <= soft_words_V_last_V_1_state(0);
    soft_words_V_data_V_1_ack_in <= soft_words_V_data_V_1_state(1);
    soft_words_V_data_V_1_ack_out <= soft_words_TREADY;

    soft_words_V_data_V_1_data_out_assign_proc : process(soft_words_V_data_V_1_payload_A, soft_words_V_data_V_1_payload_B, soft_words_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = soft_words_V_data_V_1_sel)) then 
            soft_words_V_data_V_1_data_out <= soft_words_V_data_V_1_payload_B;
        else 
            soft_words_V_data_V_1_data_out <= soft_words_V_data_V_1_payload_A;
        end if; 
    end process;

    soft_words_V_data_V_1_load_A <= (soft_words_V_data_V_1_state_cmp_full and not(soft_words_V_data_V_1_sel_wr));
    soft_words_V_data_V_1_load_B <= (soft_words_V_data_V_1_sel_wr and soft_words_V_data_V_1_state_cmp_full);
    soft_words_V_data_V_1_sel <= soft_words_V_data_V_1_sel_rd;
    soft_words_V_data_V_1_state_cmp_full <= '0' when (soft_words_V_data_V_1_state = ap_const_lv2_1) else '1';
    soft_words_V_data_V_1_vld_in <= grp_run_ber_fu_398_soft_words_TVALID;
    soft_words_V_data_V_1_vld_out <= soft_words_V_data_V_1_state(0);
    soft_words_V_last_V_1_ack_in <= soft_words_V_last_V_1_state(1);
    soft_words_V_last_V_1_ack_out <= soft_words_TREADY;

    soft_words_V_last_V_1_data_out_assign_proc : process(soft_words_V_last_V_1_payload_A, soft_words_V_last_V_1_payload_B, soft_words_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = soft_words_V_last_V_1_sel)) then 
            soft_words_V_last_V_1_data_out <= soft_words_V_last_V_1_payload_B;
        else 
            soft_words_V_last_V_1_data_out <= soft_words_V_last_V_1_payload_A;
        end if; 
    end process;

    soft_words_V_last_V_1_load_A <= (soft_words_V_last_V_1_state_cmp_full and not(soft_words_V_last_V_1_sel_wr));
    soft_words_V_last_V_1_load_B <= (soft_words_V_last_V_1_sel_wr and soft_words_V_last_V_1_state_cmp_full);
    soft_words_V_last_V_1_sel <= soft_words_V_last_V_1_sel_rd;
    soft_words_V_last_V_1_state_cmp_full <= '0' when (soft_words_V_last_V_1_state = ap_const_lv2_1) else '1';
    soft_words_V_last_V_1_vld_in <= grp_run_ber_fu_398_soft_words_TVALID;
    soft_words_V_last_V_1_vld_out <= soft_words_V_last_V_1_state(0);
    src_data_V_V_1_ack_in <= src_data_V_V_1_state(1);
    src_data_V_V_1_ack_out <= src_data_V_V_TREADY;

    src_data_V_V_1_data_out_assign_proc : process(src_data_V_V_1_payload_A, src_data_V_V_1_payload_B, src_data_V_V_1_sel)
    begin
        if ((ap_const_logic_1 = src_data_V_V_1_sel)) then 
            src_data_V_V_1_data_out <= src_data_V_V_1_payload_B;
        else 
            src_data_V_V_1_data_out <= src_data_V_V_1_payload_A;
        end if; 
    end process;

    src_data_V_V_1_load_A <= (src_data_V_V_1_state_cmp_full and not(src_data_V_V_1_sel_wr));
    src_data_V_V_1_load_B <= (src_data_V_V_1_sel_wr and src_data_V_V_1_state_cmp_full);
    src_data_V_V_1_sel <= src_data_V_V_1_sel_rd;
    src_data_V_V_1_state_cmp_full <= '0' when (src_data_V_V_1_state = ap_const_lv2_1) else '1';
    src_data_V_V_1_vld_in <= grp_run_ber_fu_398_src_data_V_V_TVALID;
    src_data_V_V_1_vld_out <= src_data_V_V_1_state(0);
    src_data_V_V_TDATA <= src_data_V_V_1_data_out;
    src_data_V_V_TVALID <= src_data_V_V_1_state(0);
    tmp_10_fu_494_p1 <= std_logic_vector(resize(unsigned(def_i_reg_362),64));
    tmp_11_fu_554_p1 <= std_logic_vector(resize(unsigned(def_cfg_1_reg_685),64));
    tmp_12_fu_568_p2 <= "1" when (b_i_1_reg_690 = def_cnt_1_reg_679) else "0";
    tmp_13_fu_512_p1 <= std_logic_vector(resize(unsigned(def_i_1_reg_652),32));
    tmp_14_fu_515_p2 <= "1" when (tmp_13_fu_512_p1 = num_defs_read_reg_619) else "0";
    tmp_fu_489_p2 <= "1" when (unsigned(total_blocks_reg_386) < unsigned(num_blocks_read_reg_614)) else "0";
    tmp_s_fu_506_p2 <= "1" when (b_i_reg_374 = ap_const_lv32_0) else "0";
    total_blocks_1_fu_572_p2 <= std_logic_vector(unsigned(def_cnt_1_reg_679) + unsigned(total_blocks_reg_386));
    total_blocks_2_fu_596_p3 <= 
        total_blocks_1_reg_758 when (tmp_12_reg_751(0) = '1') else 
        total_blocks_reg_386;
end behav;
