-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity demodulate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    modulation_type_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    modulation_type_empty_n : IN STD_LOGIC;
    modulation_type_read : OUT STD_LOGIC;
    block_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    block_size_empty_n : IN STD_LOGIC;
    block_size_read : OUT STD_LOGIC;
    inv_sigma_sq_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
    inv_sigma_sq_V_empty_n : IN STD_LOGIC;
    inv_sigma_sq_V_read : OUT STD_LOGIC;
    chan_data_V_M_real_s_dout : IN STD_LOGIC_VECTOR (18 downto 0);
    chan_data_V_M_real_s_empty_n : IN STD_LOGIC;
    chan_data_V_M_real_s_read : OUT STD_LOGIC;
    chan_data_V_M_imag_s_dout : IN STD_LOGIC_VECTOR (18 downto 0);
    chan_data_V_M_imag_s_empty_n : IN STD_LOGIC;
    chan_data_V_M_imag_s_read : OUT STD_LOGIC;
    soft_data_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    soft_data_V_V_full_n : IN STD_LOGIC;
    soft_data_V_V_write : OUT STD_LOGIC;
    block_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_size_out_full_n : IN STD_LOGIC;
    block_size_out_write : OUT STD_LOGIC );
end;


architecture behav of demodulate is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal modulation_type_blk_n : STD_LOGIC;
    signal block_size_blk_n : STD_LOGIC;
    signal inv_sigma_sq_V_blk_n : STD_LOGIC;
    signal chan_data_V_M_real_s_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal chan_data_V_M_imag_s_blk_n : STD_LOGIC;
    signal soft_data_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter20_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal block_size_out_blk_n : STD_LOGIC;
    signal sym_i_i_reg_271 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal modulation_type_read_read_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal modulation_type_read_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal block_size_read_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal inv_sigma_sq_V_read_reg_494 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_316_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_542 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal symbol_bits_cast_i_fu_325_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal symbol_bits_cast_i_reg_547 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal inv_sigma_sq_mod_V_1_fu_334_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal inv_sigma_sq_mod_V_1_reg_552 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_i_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal chan_data_V_M_real_s0_status : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_state25 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_exitcond_i_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_i_70_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_tmp_i_70_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_357_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter1_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter2_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter3_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter4_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter5_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter6_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter7_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter8_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter9_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter10_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter11_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter12_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter13_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter14_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter15_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter16_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter17_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter18_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter19_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter20_tmp_12_reg_570 : STD_LOGIC_VECTOR (2 downto 0);
    signal sym_i_1_fu_376_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal grp_operator_s_fu_293_ap_start : STD_LOGIC;
    signal grp_operator_s_fu_293_ap_done : STD_LOGIC;
    signal grp_operator_s_fu_293_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_293_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_293_ap_ce : STD_LOGIC;
    signal grp_operator_s_fu_293_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_293_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_293_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_293_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_293_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_operator_s_fu_293_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state5_ignore_call3 : BOOLEAN;
    signal ap_block_state25_ignore_call3 : BOOLEAN;
    signal p_i_reg_233 : STD_LOGIC_VECTOR (1 downto 0);
    signal symbol_bits_i_reg_254 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_grp_operator_s_fu_293_ap_start : STD_LOGIC := '0';
    signal chan_data_V_M_real_s0_update : STD_LOGIC;
    signal p_Val2_s_fu_466_p8 : STD_LOGIC_VECTOR (15 downto 0);
    signal llr_0_V_1_fu_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal llr_1_V_1_fu_172 : STD_LOGIC_VECTOR (15 downto 0);
    signal llr_2_V_1_fu_176 : STD_LOGIC_VECTOR (15 downto 0);
    signal llr_3_V_1_fu_180 : STD_LOGIC_VECTOR (15 downto 0);
    signal llr_4_V_1_fu_184 : STD_LOGIC_VECTOR (15 downto 0);
    signal llr_5_V_1_fu_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal inv_sigma_sq_mod_V_fu_329_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_26_cast_i_fu_361_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_i_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sym_i_fu_370_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component operator_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        mod_type_V : IN STD_LOGIC_VECTOR (1 downto 0);
        sym_M_real_V : IN STD_LOGIC_VECTOR (18 downto 0);
        sym_M_imag_V : IN STD_LOGIC_VECTOR (18 downto 0);
        inv_sigma_sq_V : IN STD_LOGIC_VECTOR (16 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component ber_kernel_mux_63CeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_operator_s_fu_293 : component operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_operator_s_fu_293_ap_start,
        ap_done => grp_operator_s_fu_293_ap_done,
        ap_idle => grp_operator_s_fu_293_ap_idle,
        ap_ready => grp_operator_s_fu_293_ap_ready,
        ap_ce => grp_operator_s_fu_293_ap_ce,
        mod_type_V => p_i_reg_233,
        sym_M_real_V => chan_data_V_M_real_s_dout,
        sym_M_imag_V => chan_data_V_M_imag_s_dout,
        inv_sigma_sq_V => inv_sigma_sq_mod_V_1_reg_552,
        ap_return_0 => grp_operator_s_fu_293_ap_return_0,
        ap_return_1 => grp_operator_s_fu_293_ap_return_1,
        ap_return_2 => grp_operator_s_fu_293_ap_return_2,
        ap_return_3 => grp_operator_s_fu_293_ap_return_3,
        ap_return_4 => grp_operator_s_fu_293_ap_return_4,
        ap_return_5 => grp_operator_s_fu_293_ap_return_5);

    ber_kernel_mux_63CeG_U126 : component ber_kernel_mux_63CeG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din1 => llr_0_V_1_fu_168,
        din2 => llr_1_V_1_fu_172,
        din3 => llr_2_V_1_fu_176,
        din4 => llr_3_V_1_fu_180,
        din5 => llr_4_V_1_fu_184,
        din6 => llr_5_V_1_fu_188,
        din7 => ap_reg_pp0_iter20_tmp_12_reg_570,
        dout => p_Val2_s_fu_466_p8);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_const_lv1_1 = exitcond_i_fu_340_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and not((ap_const_lv1_1 = exitcond_i_fu_340_p2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_const_lv1_1 = exitcond_i_fu_340_p2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_operator_s_fu_293_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_operator_s_fu_293_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_i_70_fu_351_p2))) then 
                    ap_reg_grp_operator_s_fu_293_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_operator_s_fu_293_ap_ready)) then 
                    ap_reg_grp_operator_s_fu_293_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_i_fu_340_p2))) then 
                i_i_reg_282 <= i_fu_345_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_i_reg_282 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_i_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and (ap_const_lv32_0 = modulation_type_read_read_fu_192_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and (modulation_type_read_read_fu_192_p2 = ap_const_lv32_1)))) then 
                p_i_reg_233 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and (modulation_type_read_read_fu_192_p2 = ap_const_lv32_2))) then 
                p_i_reg_233 <= ap_const_lv2_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and (ap_const_lv32_3 = modulation_type_read_read_fu_192_p2))) then 
                p_i_reg_233 <= ap_const_lv2_2;
            end if; 
        end if;
    end process;

    sym_i_i_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_i_fu_340_p2))) then 
                sym_i_i_reg_271 <= sym_i_1_fu_376_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sym_i_i_reg_271 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    symbol_bits_i_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and (ap_const_lv32_0 = modulation_type_read_read_fu_192_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and (modulation_type_read_read_fu_192_p2 = ap_const_lv32_1)))) then 
                symbol_bits_i_reg_254 <= tmp_fu_316_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and (modulation_type_read_read_fu_192_p2 = ap_const_lv32_2))) then 
                symbol_bits_i_reg_254 <= ap_const_lv3_3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and (ap_const_lv32_3 = modulation_type_read_read_fu_192_p2))) then 
                symbol_bits_i_reg_254 <= ap_const_lv3_5;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25))))) then
                ap_reg_pp0_iter10_exitcond_i_reg_557 <= ap_reg_pp0_iter9_exitcond_i_reg_557;
                ap_reg_pp0_iter10_tmp_12_reg_570 <= ap_reg_pp0_iter9_tmp_12_reg_570;
                ap_reg_pp0_iter10_tmp_i_70_reg_566 <= ap_reg_pp0_iter9_tmp_i_70_reg_566;
                ap_reg_pp0_iter11_exitcond_i_reg_557 <= ap_reg_pp0_iter10_exitcond_i_reg_557;
                ap_reg_pp0_iter11_tmp_12_reg_570 <= ap_reg_pp0_iter10_tmp_12_reg_570;
                ap_reg_pp0_iter11_tmp_i_70_reg_566 <= ap_reg_pp0_iter10_tmp_i_70_reg_566;
                ap_reg_pp0_iter12_exitcond_i_reg_557 <= ap_reg_pp0_iter11_exitcond_i_reg_557;
                ap_reg_pp0_iter12_tmp_12_reg_570 <= ap_reg_pp0_iter11_tmp_12_reg_570;
                ap_reg_pp0_iter12_tmp_i_70_reg_566 <= ap_reg_pp0_iter11_tmp_i_70_reg_566;
                ap_reg_pp0_iter13_exitcond_i_reg_557 <= ap_reg_pp0_iter12_exitcond_i_reg_557;
                ap_reg_pp0_iter13_tmp_12_reg_570 <= ap_reg_pp0_iter12_tmp_12_reg_570;
                ap_reg_pp0_iter13_tmp_i_70_reg_566 <= ap_reg_pp0_iter12_tmp_i_70_reg_566;
                ap_reg_pp0_iter14_exitcond_i_reg_557 <= ap_reg_pp0_iter13_exitcond_i_reg_557;
                ap_reg_pp0_iter14_tmp_12_reg_570 <= ap_reg_pp0_iter13_tmp_12_reg_570;
                ap_reg_pp0_iter14_tmp_i_70_reg_566 <= ap_reg_pp0_iter13_tmp_i_70_reg_566;
                ap_reg_pp0_iter15_exitcond_i_reg_557 <= ap_reg_pp0_iter14_exitcond_i_reg_557;
                ap_reg_pp0_iter15_tmp_12_reg_570 <= ap_reg_pp0_iter14_tmp_12_reg_570;
                ap_reg_pp0_iter15_tmp_i_70_reg_566 <= ap_reg_pp0_iter14_tmp_i_70_reg_566;
                ap_reg_pp0_iter16_exitcond_i_reg_557 <= ap_reg_pp0_iter15_exitcond_i_reg_557;
                ap_reg_pp0_iter16_tmp_12_reg_570 <= ap_reg_pp0_iter15_tmp_12_reg_570;
                ap_reg_pp0_iter16_tmp_i_70_reg_566 <= ap_reg_pp0_iter15_tmp_i_70_reg_566;
                ap_reg_pp0_iter17_exitcond_i_reg_557 <= ap_reg_pp0_iter16_exitcond_i_reg_557;
                ap_reg_pp0_iter17_tmp_12_reg_570 <= ap_reg_pp0_iter16_tmp_12_reg_570;
                ap_reg_pp0_iter17_tmp_i_70_reg_566 <= ap_reg_pp0_iter16_tmp_i_70_reg_566;
                ap_reg_pp0_iter18_exitcond_i_reg_557 <= ap_reg_pp0_iter17_exitcond_i_reg_557;
                ap_reg_pp0_iter18_tmp_12_reg_570 <= ap_reg_pp0_iter17_tmp_12_reg_570;
                ap_reg_pp0_iter18_tmp_i_70_reg_566 <= ap_reg_pp0_iter17_tmp_i_70_reg_566;
                ap_reg_pp0_iter19_exitcond_i_reg_557 <= ap_reg_pp0_iter18_exitcond_i_reg_557;
                ap_reg_pp0_iter19_tmp_12_reg_570 <= ap_reg_pp0_iter18_tmp_12_reg_570;
                ap_reg_pp0_iter19_tmp_i_70_reg_566 <= ap_reg_pp0_iter18_tmp_i_70_reg_566;
                ap_reg_pp0_iter20_exitcond_i_reg_557 <= ap_reg_pp0_iter19_exitcond_i_reg_557;
                ap_reg_pp0_iter20_tmp_12_reg_570 <= ap_reg_pp0_iter19_tmp_12_reg_570;
                ap_reg_pp0_iter2_exitcond_i_reg_557 <= ap_reg_pp0_iter1_exitcond_i_reg_557;
                ap_reg_pp0_iter2_tmp_12_reg_570 <= ap_reg_pp0_iter1_tmp_12_reg_570;
                ap_reg_pp0_iter2_tmp_i_70_reg_566 <= ap_reg_pp0_iter1_tmp_i_70_reg_566;
                ap_reg_pp0_iter3_exitcond_i_reg_557 <= ap_reg_pp0_iter2_exitcond_i_reg_557;
                ap_reg_pp0_iter3_tmp_12_reg_570 <= ap_reg_pp0_iter2_tmp_12_reg_570;
                ap_reg_pp0_iter3_tmp_i_70_reg_566 <= ap_reg_pp0_iter2_tmp_i_70_reg_566;
                ap_reg_pp0_iter4_exitcond_i_reg_557 <= ap_reg_pp0_iter3_exitcond_i_reg_557;
                ap_reg_pp0_iter4_tmp_12_reg_570 <= ap_reg_pp0_iter3_tmp_12_reg_570;
                ap_reg_pp0_iter4_tmp_i_70_reg_566 <= ap_reg_pp0_iter3_tmp_i_70_reg_566;
                ap_reg_pp0_iter5_exitcond_i_reg_557 <= ap_reg_pp0_iter4_exitcond_i_reg_557;
                ap_reg_pp0_iter5_tmp_12_reg_570 <= ap_reg_pp0_iter4_tmp_12_reg_570;
                ap_reg_pp0_iter5_tmp_i_70_reg_566 <= ap_reg_pp0_iter4_tmp_i_70_reg_566;
                ap_reg_pp0_iter6_exitcond_i_reg_557 <= ap_reg_pp0_iter5_exitcond_i_reg_557;
                ap_reg_pp0_iter6_tmp_12_reg_570 <= ap_reg_pp0_iter5_tmp_12_reg_570;
                ap_reg_pp0_iter6_tmp_i_70_reg_566 <= ap_reg_pp0_iter5_tmp_i_70_reg_566;
                ap_reg_pp0_iter7_exitcond_i_reg_557 <= ap_reg_pp0_iter6_exitcond_i_reg_557;
                ap_reg_pp0_iter7_tmp_12_reg_570 <= ap_reg_pp0_iter6_tmp_12_reg_570;
                ap_reg_pp0_iter7_tmp_i_70_reg_566 <= ap_reg_pp0_iter6_tmp_i_70_reg_566;
                ap_reg_pp0_iter8_exitcond_i_reg_557 <= ap_reg_pp0_iter7_exitcond_i_reg_557;
                ap_reg_pp0_iter8_tmp_12_reg_570 <= ap_reg_pp0_iter7_tmp_12_reg_570;
                ap_reg_pp0_iter8_tmp_i_70_reg_566 <= ap_reg_pp0_iter7_tmp_i_70_reg_566;
                ap_reg_pp0_iter9_exitcond_i_reg_557 <= ap_reg_pp0_iter8_exitcond_i_reg_557;
                ap_reg_pp0_iter9_tmp_12_reg_570 <= ap_reg_pp0_iter8_tmp_12_reg_570;
                ap_reg_pp0_iter9_tmp_i_70_reg_566 <= ap_reg_pp0_iter8_tmp_i_70_reg_566;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))))) then
                ap_reg_pp0_iter1_exitcond_i_reg_557 <= exitcond_i_reg_557;
                ap_reg_pp0_iter1_tmp_12_reg_570 <= tmp_12_reg_570;
                ap_reg_pp0_iter1_tmp_i_70_reg_566 <= tmp_i_70_reg_566;
                exitcond_i_reg_557 <= exitcond_i_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then
                block_size_read_reg_489 <= block_size_dout;
                inv_sigma_sq_V_read_reg_494 <= inv_sigma_sq_V_dout;
                modulation_type_read_reg_484 <= modulation_type_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                inv_sigma_sq_mod_V_1_reg_552 <= inv_sigma_sq_mod_V_1_fu_334_p3;
                    symbol_bits_cast_i_reg_547(2 downto 0) <= symbol_bits_cast_i_fu_325_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_const_lv1_1 = ap_reg_pp0_iter19_tmp_i_70_reg_566) and (ap_const_logic_1 = ap_enable_reg_pp0_iter20))) then
                llr_0_V_1_fu_168 <= grp_operator_s_fu_293_ap_return_0;
                llr_1_V_1_fu_172 <= grp_operator_s_fu_293_ap_return_1;
                llr_2_V_1_fu_176 <= grp_operator_s_fu_293_ap_return_2;
                llr_3_V_1_fu_180 <= grp_operator_s_fu_293_ap_return_3;
                llr_4_V_1_fu_184 <= grp_operator_s_fu_293_ap_return_4;
                llr_5_V_1_fu_188 <= grp_operator_s_fu_293_ap_return_5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_const_lv1_0 = exitcond_i_fu_340_p2))) then
                tmp_12_reg_570 <= tmp_12_fu_357_p1;
                tmp_i_70_reg_566 <= tmp_i_70_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_i_reg_542 <= tmp_i_fu_320_p2;
            end if;
        end if;
    end process;
    symbol_bits_cast_i_reg_547(8 downto 3) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter21, modulation_type_read_read_fu_192_p2, ap_block_state1, exitcond_i_fu_340_p2, ap_block_state5, ap_block_state25, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter20)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_block_state1 = ap_const_boolean_0) and not((ap_const_lv32_0 = modulation_type_read_read_fu_192_p2)) and not((modulation_type_read_read_fu_192_p2 = ap_const_lv32_1)) and not((modulation_type_read_read_fu_192_p2 = ap_const_lv32_2)) and not((ap_const_lv32_3 = modulation_type_read_read_fu_192_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                elsif (((ap_block_state1 = ap_const_boolean_0) and ((ap_const_lv32_3 = modulation_type_read_read_fu_192_p2) or (modulation_type_read_read_fu_192_p2 = ap_const_lv32_2) or (ap_const_lv32_0 = modulation_type_read_read_fu_192_p2) or (modulation_type_read_read_fu_192_p2 = ap_const_lv32_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0))) and not((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = exitcond_i_fu_340_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0)) or (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = exitcond_i_fu_340_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(4);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, modulation_type_empty_n, block_size_empty_n, inv_sigma_sq_V_empty_n, block_size_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = modulation_type_empty_n) or (ap_const_logic_0 = block_size_empty_n) or (ap_const_logic_0 = inv_sigma_sq_V_empty_n) or (ap_const_logic_0 = block_size_out_full_n));
    end process;


    ap_block_state25_assign_proc : process(soft_data_V_V_full_n, ap_reg_pp0_iter20_exitcond_i_reg_557)
    begin
                ap_block_state25 <= ((ap_reg_pp0_iter20_exitcond_i_reg_557 = ap_const_lv1_0) and (ap_const_logic_0 = soft_data_V_V_full_n));
    end process;


    ap_block_state25_ignore_call3_assign_proc : process(soft_data_V_V_full_n, ap_reg_pp0_iter20_exitcond_i_reg_557)
    begin
                ap_block_state25_ignore_call3 <= ((ap_reg_pp0_iter20_exitcond_i_reg_557 = ap_const_lv1_0) and (ap_const_logic_0 = soft_data_V_V_full_n));
    end process;


    ap_block_state5_assign_proc : process(tmp_i_70_reg_566, chan_data_V_M_real_s0_status)
    begin
                ap_block_state5 <= ((tmp_i_70_reg_566 = ap_const_lv1_1) and (ap_const_logic_0 = chan_data_V_M_real_s0_status));
    end process;


    ap_block_state5_ignore_call3_assign_proc : process(tmp_i_70_reg_566, chan_data_V_M_real_s0_status)
    begin
                ap_block_state5_ignore_call3 <= ((tmp_i_70_reg_566 = ap_const_lv1_1) and (ap_const_logic_0 = chan_data_V_M_real_s0_status));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter15) and (ap_const_logic_0 = ap_enable_reg_pp0_iter16) and (ap_const_logic_0 = ap_enable_reg_pp0_iter17) and (ap_const_logic_0 = ap_enable_reg_pp0_iter18) and (ap_const_logic_0 = ap_enable_reg_pp0_iter19) and (ap_const_logic_0 = ap_enable_reg_pp0_iter20) and (ap_const_logic_0 = ap_enable_reg_pp0_iter21))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, block_size_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_size_blk_n <= block_size_empty_n;
        else 
            block_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_size_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, block_size_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_size_out_blk_n <= block_size_out_full_n;
        else 
            block_size_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_size_out_din <= block_size_dout;

    block_size_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_size_out_write <= ap_const_logic_1;
        else 
            block_size_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_size_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_size_read <= ap_const_logic_1;
        else 
            block_size_read <= ap_const_logic_0;
        end if; 
    end process;


    chan_data_V_M_imag_s_blk_n_assign_proc : process(chan_data_V_M_imag_s_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_i_70_reg_566)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_i_70_reg_566 = ap_const_lv1_1))) then 
            chan_data_V_M_imag_s_blk_n <= chan_data_V_M_imag_s_empty_n;
        else 
            chan_data_V_M_imag_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_data_V_M_imag_s_read <= chan_data_V_M_real_s0_update;
    chan_data_V_M_real_s0_status <= (chan_data_V_M_real_s_empty_n and chan_data_V_M_imag_s_empty_n);

    chan_data_V_M_real_s0_update_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_i_70_reg_566, ap_enable_reg_pp0_iter21, ap_block_state5, ap_block_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_i_70_reg_566 = ap_const_lv1_1) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))))) then 
            chan_data_V_M_real_s0_update <= ap_const_logic_1;
        else 
            chan_data_V_M_real_s0_update <= ap_const_logic_0;
        end if; 
    end process;


    chan_data_V_M_real_s_blk_n_assign_proc : process(chan_data_V_M_real_s_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_i_70_reg_566)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_i_70_reg_566 = ap_const_lv1_1))) then 
            chan_data_V_M_real_s_blk_n <= chan_data_V_M_real_s_empty_n;
        else 
            chan_data_V_M_real_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_data_V_M_real_s_read <= chan_data_V_M_real_s0_update;
    exitcond_i_fu_340_p2 <= "1" when (i_i_reg_282 = block_size_read_reg_489) else "0";

    grp_operator_s_fu_293_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter21, ap_block_state5_ignore_call3, ap_block_state25_ignore_call3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5_ignore_call3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25_ignore_call3)))))) then 
            grp_operator_s_fu_293_ap_ce <= ap_const_logic_1;
        else 
            grp_operator_s_fu_293_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_operator_s_fu_293_ap_start <= ap_reg_grp_operator_s_fu_293_ap_start;
    i_fu_345_p2 <= std_logic_vector(unsigned(i_i_reg_282) + unsigned(ap_const_lv32_1));

    inv_sigma_sq_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, inv_sigma_sq_V_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            inv_sigma_sq_V_blk_n <= inv_sigma_sq_V_empty_n;
        else 
            inv_sigma_sq_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    inv_sigma_sq_V_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            inv_sigma_sq_V_read <= ap_const_logic_1;
        else 
            inv_sigma_sq_V_read <= ap_const_logic_0;
        end if; 
    end process;

    inv_sigma_sq_mod_V_1_fu_334_p3 <= 
        inv_sigma_sq_mod_V_fu_329_p2 when (tmp_i_reg_542(0) = '1') else 
        inv_sigma_sq_V_read_reg_494;
    inv_sigma_sq_mod_V_fu_329_p2 <= std_logic_vector(shift_left(unsigned(inv_sigma_sq_V_read_reg_494),to_integer(unsigned('0' & ap_const_lv17_1(17-1 downto 0)))));

    modulation_type_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, modulation_type_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            modulation_type_blk_n <= modulation_type_empty_n;
        else 
            modulation_type_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    modulation_type_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            modulation_type_read <= ap_const_logic_1;
        else 
            modulation_type_read <= ap_const_logic_0;
        end if; 
    end process;

    modulation_type_read_read_fu_192_p2 <= modulation_type_dout;

    soft_data_V_V_blk_n_assign_proc : process(soft_data_V_V_full_n, ap_enable_reg_pp0_iter21, ap_reg_pp0_iter20_exitcond_i_reg_557)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_reg_pp0_iter20_exitcond_i_reg_557 = ap_const_lv1_0))) then 
            soft_data_V_V_blk_n <= soft_data_V_V_full_n;
        else 
            soft_data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    soft_data_V_V_din <= p_Val2_s_fu_466_p8;

    soft_data_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter21, ap_reg_pp0_iter20_exitcond_i_reg_557, ap_block_state5, ap_block_state25)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_reg_pp0_iter20_exitcond_i_reg_557 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state5)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter21) and (ap_const_boolean_1 = ap_block_state25)))))) then 
            soft_data_V_V_write <= ap_const_logic_1;
        else 
            soft_data_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    sym_i_1_fu_376_p3 <= 
        ap_const_lv8_0 when (tmp_27_i_fu_365_p2(0) = '1') else 
        sym_i_fu_370_p2;
    sym_i_fu_370_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(sym_i_i_reg_271));
    symbol_bits_cast_i_fu_325_p1 <= std_logic_vector(resize(unsigned(symbol_bits_i_reg_254),9));
    tmp_12_fu_357_p1 <= sym_i_i_reg_271(3 - 1 downto 0);
    tmp_26_cast_i_fu_361_p1 <= std_logic_vector(resize(unsigned(sym_i_i_reg_271),9));
    tmp_27_i_fu_365_p2 <= "1" when (tmp_26_cast_i_fu_361_p1 = symbol_bits_cast_i_reg_547) else "0";
    tmp_fu_316_p1 <= modulation_type_dout(3 - 1 downto 0);
    tmp_i_70_fu_351_p2 <= "1" when (sym_i_i_reg_271 = ap_const_lv8_0) else "0";
    tmp_i_fu_320_p2 <= "1" when (modulation_type_read_reg_484 = ap_const_lv32_0) else "0";
end behav;
