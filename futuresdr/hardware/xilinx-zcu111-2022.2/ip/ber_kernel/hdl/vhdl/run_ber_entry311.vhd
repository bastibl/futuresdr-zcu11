-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_ber_entry311 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    block_cfg_code : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_n : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_k : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_term_on_pass : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_max_iterations : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_crc_type : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_skip_channel : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_mod_type : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_snr_V : IN STD_LOGIC_VECTOR (16 downto 0);
    block_cfg_inv_sigma_sq_V : IN STD_LOGIC_VECTOR (16 downto 0);
    block_cfg_outputs : IN STD_LOGIC_VECTOR (31 downto 0);
    fec_type : IN STD_LOGIC_VECTOR (31 downto 0);
    soft_words_tx : IN STD_LOGIC_VECTOR (31 downto 0);
    hard_words_tx : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_code_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_code_out_full_n : IN STD_LOGIC;
    block_cfg_code_out_write : OUT STD_LOGIC;
    block_cfg_n_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_n_out_full_n : IN STD_LOGIC;
    block_cfg_n_out_write : OUT STD_LOGIC;
    block_cfg_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_k_out_full_n : IN STD_LOGIC;
    block_cfg_k_out_write : OUT STD_LOGIC;
    block_cfg_k_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_k_out1_full_n : IN STD_LOGIC;
    block_cfg_k_out1_write : OUT STD_LOGIC;
    block_cfg_term_on_pass_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_term_on_pass_out_full_n : IN STD_LOGIC;
    block_cfg_term_on_pass_out_write : OUT STD_LOGIC;
    block_cfg_max_iterations_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_max_iterations_out_full_n : IN STD_LOGIC;
    block_cfg_max_iterations_out_write : OUT STD_LOGIC;
    block_cfg_crc_type_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_crc_type_out_full_n : IN STD_LOGIC;
    block_cfg_crc_type_out_write : OUT STD_LOGIC;
    block_cfg_skip_channel_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_skip_channel_out_full_n : IN STD_LOGIC;
    block_cfg_skip_channel_out_write : OUT STD_LOGIC;
    block_cfg_mod_type_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_mod_type_out_full_n : IN STD_LOGIC;
    block_cfg_mod_type_out_write : OUT STD_LOGIC;
    block_cfg_snr_V_out_din : OUT STD_LOGIC_VECTOR (16 downto 0);
    block_cfg_snr_V_out_full_n : IN STD_LOGIC;
    block_cfg_snr_V_out_write : OUT STD_LOGIC;
    block_cfg_inv_sigma_sq_V_out_din : OUT STD_LOGIC_VECTOR (16 downto 0);
    block_cfg_inv_sigma_sq_V_out_full_n : IN STD_LOGIC;
    block_cfg_inv_sigma_sq_V_out_write : OUT STD_LOGIC;
    block_cfg_outputs_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_outputs_out_full_n : IN STD_LOGIC;
    block_cfg_outputs_out_write : OUT STD_LOGIC;
    fec_type_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fec_type_out_full_n : IN STD_LOGIC;
    fec_type_out_write : OUT STD_LOGIC;
    fec_type_out2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fec_type_out2_full_n : IN STD_LOGIC;
    fec_type_out2_write : OUT STD_LOGIC;
    soft_words_tx_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    soft_words_tx_out_full_n : IN STD_LOGIC;
    soft_words_tx_out_write : OUT STD_LOGIC;
    hard_words_tx_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    hard_words_tx_out_full_n : IN STD_LOGIC;
    hard_words_tx_out_write : OUT STD_LOGIC );
end;


architecture behav of run_ber_entry311 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal block_cfg_code_out_blk_n : STD_LOGIC;
    signal block_cfg_n_out_blk_n : STD_LOGIC;
    signal block_cfg_k_out_blk_n : STD_LOGIC;
    signal block_cfg_k_out1_blk_n : STD_LOGIC;
    signal block_cfg_term_on_pass_out_blk_n : STD_LOGIC;
    signal block_cfg_max_iterations_out_blk_n : STD_LOGIC;
    signal block_cfg_crc_type_out_blk_n : STD_LOGIC;
    signal block_cfg_skip_channel_out_blk_n : STD_LOGIC;
    signal block_cfg_mod_type_out_blk_n : STD_LOGIC;
    signal block_cfg_snr_V_out_blk_n : STD_LOGIC;
    signal block_cfg_inv_sigma_sq_V_out_blk_n : STD_LOGIC;
    signal block_cfg_outputs_out_blk_n : STD_LOGIC;
    signal fec_type_out_blk_n : STD_LOGIC;
    signal fec_type_out2_blk_n : STD_LOGIC;
    signal soft_words_tx_out_blk_n : STD_LOGIC;
    signal hard_words_tx_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, block_cfg_code_out_full_n, block_cfg_n_out_full_n, block_cfg_k_out_full_n, block_cfg_k_out1_full_n, block_cfg_term_on_pass_out_full_n, block_cfg_max_iterations_out_full_n, block_cfg_crc_type_out_full_n, block_cfg_skip_channel_out_full_n, block_cfg_mod_type_out_full_n, block_cfg_snr_V_out_full_n, block_cfg_inv_sigma_sq_V_out_full_n, block_cfg_outputs_out_full_n, fec_type_out_full_n, fec_type_out2_full_n, soft_words_tx_out_full_n, hard_words_tx_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = real_start) or (ap_const_logic_0 = block_cfg_code_out_full_n) or (ap_const_logic_0 = block_cfg_n_out_full_n) or (ap_const_logic_0 = block_cfg_k_out_full_n) or (ap_const_logic_0 = block_cfg_k_out1_full_n) or (ap_const_logic_0 = block_cfg_term_on_pass_out_full_n) or (ap_const_logic_0 = block_cfg_max_iterations_out_full_n) or (ap_const_logic_0 = block_cfg_crc_type_out_full_n) or (ap_const_logic_0 = block_cfg_skip_channel_out_full_n) or (ap_const_logic_0 = block_cfg_mod_type_out_full_n) or (ap_const_logic_0 = block_cfg_snr_V_out_full_n) or (ap_const_logic_0 = block_cfg_inv_sigma_sq_V_out_full_n) or (ap_const_logic_0 = block_cfg_outputs_out_full_n) or (ap_const_logic_0 = fec_type_out_full_n) or (ap_const_logic_0 = fec_type_out2_full_n) or (ap_const_logic_0 = soft_words_tx_out_full_n) or (ap_const_logic_0 = hard_words_tx_out_full_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    block_cfg_code_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_code_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_code_out_blk_n <= block_cfg_code_out_full_n;
        else 
            block_cfg_code_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_code_out_din <= block_cfg_code;

    block_cfg_code_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_code_out_write <= ap_const_logic_1;
        else 
            block_cfg_code_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_crc_type_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_crc_type_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_crc_type_out_blk_n <= block_cfg_crc_type_out_full_n;
        else 
            block_cfg_crc_type_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_crc_type_out_din <= block_cfg_crc_type;

    block_cfg_crc_type_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_crc_type_out_write <= ap_const_logic_1;
        else 
            block_cfg_crc_type_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_inv_sigma_sq_V_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_inv_sigma_sq_V_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_inv_sigma_sq_V_out_blk_n <= block_cfg_inv_sigma_sq_V_out_full_n;
        else 
            block_cfg_inv_sigma_sq_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_inv_sigma_sq_V_out_din <= block_cfg_inv_sigma_sq_V;

    block_cfg_inv_sigma_sq_V_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_inv_sigma_sq_V_out_write <= ap_const_logic_1;
        else 
            block_cfg_inv_sigma_sq_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_k_out1_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_k_out1_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_k_out1_blk_n <= block_cfg_k_out1_full_n;
        else 
            block_cfg_k_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_k_out1_din <= block_cfg_k;

    block_cfg_k_out1_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_k_out1_write <= ap_const_logic_1;
        else 
            block_cfg_k_out1_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_k_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_k_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_k_out_blk_n <= block_cfg_k_out_full_n;
        else 
            block_cfg_k_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_k_out_din <= block_cfg_k;

    block_cfg_k_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_k_out_write <= ap_const_logic_1;
        else 
            block_cfg_k_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_max_iterations_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_max_iterations_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_max_iterations_out_blk_n <= block_cfg_max_iterations_out_full_n;
        else 
            block_cfg_max_iterations_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_max_iterations_out_din <= block_cfg_max_iterations;

    block_cfg_max_iterations_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_max_iterations_out_write <= ap_const_logic_1;
        else 
            block_cfg_max_iterations_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_mod_type_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_mod_type_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_mod_type_out_blk_n <= block_cfg_mod_type_out_full_n;
        else 
            block_cfg_mod_type_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_mod_type_out_din <= block_cfg_mod_type;

    block_cfg_mod_type_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_mod_type_out_write <= ap_const_logic_1;
        else 
            block_cfg_mod_type_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_n_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_n_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_n_out_blk_n <= block_cfg_n_out_full_n;
        else 
            block_cfg_n_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_n_out_din <= block_cfg_n;

    block_cfg_n_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_n_out_write <= ap_const_logic_1;
        else 
            block_cfg_n_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_outputs_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_outputs_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_outputs_out_blk_n <= block_cfg_outputs_out_full_n;
        else 
            block_cfg_outputs_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_outputs_out_din <= block_cfg_outputs;

    block_cfg_outputs_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_outputs_out_write <= ap_const_logic_1;
        else 
            block_cfg_outputs_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_skip_channel_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_skip_channel_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_skip_channel_out_blk_n <= block_cfg_skip_channel_out_full_n;
        else 
            block_cfg_skip_channel_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_skip_channel_out_din <= block_cfg_skip_channel;

    block_cfg_skip_channel_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_skip_channel_out_write <= ap_const_logic_1;
        else 
            block_cfg_skip_channel_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_snr_V_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_snr_V_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_snr_V_out_blk_n <= block_cfg_snr_V_out_full_n;
        else 
            block_cfg_snr_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_snr_V_out_din <= block_cfg_snr_V;

    block_cfg_snr_V_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_snr_V_out_write <= ap_const_logic_1;
        else 
            block_cfg_snr_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_term_on_pass_out_blk_n_assign_proc : process(ap_CS_fsm_state1, block_cfg_term_on_pass_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            block_cfg_term_on_pass_out_blk_n <= block_cfg_term_on_pass_out_full_n;
        else 
            block_cfg_term_on_pass_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_term_on_pass_out_din <= block_cfg_term_on_pass;

    block_cfg_term_on_pass_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_term_on_pass_out_write <= ap_const_logic_1;
        else 
            block_cfg_term_on_pass_out_write <= ap_const_logic_0;
        end if; 
    end process;


    fec_type_out2_blk_n_assign_proc : process(ap_CS_fsm_state1, fec_type_out2_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fec_type_out2_blk_n <= fec_type_out2_full_n;
        else 
            fec_type_out2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fec_type_out2_din <= fec_type;

    fec_type_out2_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            fec_type_out2_write <= ap_const_logic_1;
        else 
            fec_type_out2_write <= ap_const_logic_0;
        end if; 
    end process;


    fec_type_out_blk_n_assign_proc : process(ap_CS_fsm_state1, fec_type_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            fec_type_out_blk_n <= fec_type_out_full_n;
        else 
            fec_type_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fec_type_out_din <= fec_type;

    fec_type_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            fec_type_out_write <= ap_const_logic_1;
        else 
            fec_type_out_write <= ap_const_logic_0;
        end if; 
    end process;


    hard_words_tx_out_blk_n_assign_proc : process(ap_CS_fsm_state1, hard_words_tx_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            hard_words_tx_out_blk_n <= hard_words_tx_out_full_n;
        else 
            hard_words_tx_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hard_words_tx_out_din <= hard_words_tx;

    hard_words_tx_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            hard_words_tx_out_write <= ap_const_logic_1;
        else 
            hard_words_tx_out_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n)
    begin
        if ((ap_const_logic_0 = start_full_n)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    soft_words_tx_out_blk_n_assign_proc : process(ap_CS_fsm_state1, soft_words_tx_out_full_n)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            soft_words_tx_out_blk_n <= soft_words_tx_out_full_n;
        else 
            soft_words_tx_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    soft_words_tx_out_din <= soft_words_tx;

    soft_words_tx_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            soft_words_tx_out_write <= ap_const_logic_1;
        else 
            soft_words_tx_out_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, internal_ap_ready, start_once_reg)
    begin
        if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
