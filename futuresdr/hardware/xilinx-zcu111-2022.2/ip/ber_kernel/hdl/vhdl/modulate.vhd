-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity modulate is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    modulation_type_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    modulation_type_empty_n : IN STD_LOGIC;
    modulation_type_read : OUT STD_LOGIC;
    block_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    block_size_empty_n : IN STD_LOGIC;
    block_size_read : OUT STD_LOGIC;
    src_data_V_dout : IN STD_LOGIC;
    src_data_V_empty_n : IN STD_LOGIC;
    src_data_V_read : OUT STD_LOGIC;
    mod_data_V_M_real_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    mod_data_V_M_real_V_full_n : IN STD_LOGIC;
    mod_data_V_M_real_V_write : OUT STD_LOGIC;
    mod_data_V_M_imag_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    mod_data_V_M_imag_V_full_n : IN STD_LOGIC;
    mod_data_V_M_imag_V_write : OUT STD_LOGIC;
    mod_data_last_V_din : OUT STD_LOGIC;
    mod_data_last_V_full_n : IN STD_LOGIC;
    mod_data_last_V_write : OUT STD_LOGIC;
    modulation_type_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    modulation_type_out_full_n : IN STD_LOGIC;
    modulation_type_out_write : OUT STD_LOGIC;
    block_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_size_out_full_n : IN STD_LOGIC;
    block_size_out_write : OUT STD_LOGIC );
end;


architecture behav of modulate is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal modulation_type_blk_n : STD_LOGIC;
    signal block_size_blk_n : STD_LOGIC;
    signal src_data_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_i_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal mod_data_V_M_real_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp_i_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_i_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal mod_data_V_M_imag_V_blk_n : STD_LOGIC;
    signal mod_data_last_V_blk_n : STD_LOGIC;
    signal tmp_24_i_reg_421 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_24_i_reg_421 : STD_LOGIC_VECTOR (0 downto 0);
    signal modulation_type_out_blk_n : STD_LOGIC;
    signal block_size_out_blk_n : STD_LOGIC;
    signal p_Val2_s_reg_254 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_i_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal modulation_type_read_read_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal modulation_type_read_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal block_size_read_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal symbol_width_cast_i_fu_310_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal symbol_width_cast_i_reg_396 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond_i_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal mod_data_V_M_real_V1_status : STD_LOGIC;
    signal ap_predicate_op58_write_state7 : BOOLEAN;
    signal ap_predicate_op60_write_state7 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_i_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_Result_s_fu_340_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_s_reg_411 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_i_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_i_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_i_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_24_i_reg_421 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_24_i_reg_421 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_M_real_V_reg_425 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_M_imag_V_reg_430 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal grp_modulate_bits_fu_277_ap_start : STD_LOGIC;
    signal grp_modulate_bits_fu_277_ap_done : STD_LOGIC;
    signal grp_modulate_bits_fu_277_ap_idle : STD_LOGIC;
    signal grp_modulate_bits_fu_277_ap_ready : STD_LOGIC;
    signal grp_modulate_bits_fu_277_ap_ce : STD_LOGIC;
    signal grp_modulate_bits_fu_277_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_modulate_bits_fu_277_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3_ignore_call0 : BOOLEAN;
    signal ap_block_state7_ignore_call0 : BOOLEAN;
    signal symbol_width_i_phi_fu_242_p8 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_304_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_phi_fu_258_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_i_phi_fu_270_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_modulate_bits_fu_277_ap_start : STD_LOGIC := '0';
    signal mod_data_V_M_real_V1_update : STD_LOGIC;
    signal sym_i_1_fu_182 : STD_LOGIC_VECTOR (7 downto 0);
    signal sym_i_fu_355_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_s_fu_336_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal bvh_d_index_fu_328_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Repl2_s_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_assign_cast_i_fu_332_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_324 : BOOLEAN;

    component modulate_bits IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        modulation_type : IN STD_LOGIC_VECTOR (31 downto 0);
        symbol_V : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_modulate_bits_fu_277 : component modulate_bits
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_modulate_bits_fu_277_ap_start,
        ap_done => grp_modulate_bits_fu_277_ap_done,
        ap_idle => grp_modulate_bits_fu_277_ap_idle,
        ap_ready => grp_modulate_bits_fu_277_ap_ready,
        ap_ce => grp_modulate_bits_fu_277_ap_ce,
        modulation_type => modulation_type_read_reg_378,
        symbol_V => p_Result_s_reg_411,
        ap_return_0 => grp_modulate_bits_fu_277_ap_return_0,
        ap_return_1 => grp_modulate_bits_fu_277_ap_return_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_lv1_1 = exitcond_i_fu_314_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and ((ap_const_lv32_0 = modulation_type_read_read_fu_186_p2) or (ap_const_lv32_1 = modulation_type_read_read_fu_186_p2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_3)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and not((ap_const_lv1_1 = exitcond_i_fu_314_p2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and ((ap_const_lv32_0 = modulation_type_read_read_fu_186_p2) or (ap_const_lv32_1 = modulation_type_read_read_fu_186_p2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_3))) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_lv1_1 = exitcond_i_fu_314_p2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7))))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7))))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7))))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and ((ap_const_lv32_0 = modulation_type_read_read_fu_186_p2) or (ap_const_lv32_1 = modulation_type_read_read_fu_186_p2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_3)))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_modulate_bits_fu_277_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_modulate_bits_fu_277_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_lv1_1 = tmp_i_fu_350_p2))) then 
                    ap_reg_grp_modulate_bits_fu_277_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_modulate_bits_fu_277_ap_ready)) then 
                    ap_reg_grp_modulate_bits_fu_277_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_401 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))))) then 
                i_i_reg_266 <= i_reg_405;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and ((ap_const_lv32_0 = modulation_type_read_read_fu_186_p2) or (ap_const_lv32_1 = modulation_type_read_read_fu_186_p2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_3)))) then 
                i_i_reg_266 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_i_reg_401))) then 
                p_Val2_s_reg_254 <= p_Result_s_reg_411;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and ((ap_const_lv32_0 = modulation_type_read_read_fu_186_p2) or (ap_const_lv32_1 = modulation_type_read_read_fu_186_p2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_3)))) then 
                p_Val2_s_reg_254 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    sym_i_1_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_lv1_0 = tmp_i_fu_350_p2))) then 
                sym_i_1_fu_182 <= sym_i_fu_355_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and ((ap_const_lv32_0 = modulation_type_read_read_fu_186_p2) or (ap_const_lv32_1 = modulation_type_read_read_fu_186_p2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_3))) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_lv1_1 = tmp_i_fu_350_p2)))) then 
                sym_i_1_fu_182 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))))) then
                ap_reg_pp0_iter1_exitcond_i_reg_401 <= exitcond_i_reg_401;
                exitcond_i_reg_401 <= exitcond_i_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7))))) then
                ap_reg_pp0_iter2_tmp_24_i_reg_421 <= tmp_24_i_reg_421;
                ap_reg_pp0_iter2_tmp_i_reg_417 <= tmp_i_reg_417;
                ap_reg_pp0_iter3_tmp_24_i_reg_421 <= ap_reg_pp0_iter2_tmp_24_i_reg_421;
                ap_reg_pp0_iter3_tmp_i_reg_417 <= ap_reg_pp0_iter2_tmp_i_reg_417;
                ap_reg_pp0_iter4_tmp_24_i_reg_421 <= ap_reg_pp0_iter3_tmp_24_i_reg_421;
                ap_reg_pp0_iter4_tmp_i_reg_417 <= ap_reg_pp0_iter3_tmp_i_reg_417;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then
                block_size_read_reg_383 <= block_size_dout;
                modulation_type_read_reg_378 <= modulation_type_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_reg_405 <= i_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_401 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))))) then
                p_Result_s_reg_411 <= p_Result_s_fu_340_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0) and ((ap_const_lv32_0 = modulation_type_read_read_fu_186_p2) or (ap_const_lv32_1 = modulation_type_read_read_fu_186_p2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_3)))) then
                    symbol_width_cast_i_reg_396(2 downto 0) <= symbol_width_cast_i_fu_310_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_lv1_1 = tmp_i_fu_350_p2))) then
                tmp_24_i_reg_421 <= tmp_24_i_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_lv1_1 = ap_reg_pp0_iter3_tmp_i_reg_417))) then
                tmp_M_imag_V_reg_430 <= grp_modulate_bits_fu_277_ap_return_1;
                tmp_M_real_V_reg_425 <= grp_modulate_bits_fu_277_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_i_reg_401 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))))) then
                tmp_i_reg_417 <= tmp_i_fu_350_p2;
            end if;
        end if;
    end process;
    symbol_width_cast_i_reg_396(8 downto 3) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, modulation_type_read_read_fu_186_p2, ap_block_state1, exitcond_i_fu_314_p2, ap_block_state3, ap_block_state7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_block_state1 = ap_const_boolean_0) and ((ap_const_lv32_0 = modulation_type_read_read_fu_186_p2) or (ap_const_lv32_1 = modulation_type_read_read_fu_186_p2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_2) or (modulation_type_read_read_fu_186_p2 = ap_const_lv32_3)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_block_state1 = ap_const_boolean_0) and not((ap_const_lv32_0 = modulation_type_read_read_fu_186_p2)) and not((ap_const_lv32_1 = modulation_type_read_read_fu_186_p2)) and not((modulation_type_read_read_fu_186_p2 = ap_const_lv32_2)) and not((modulation_type_read_read_fu_186_p2 = ap_const_lv32_3)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))) and not((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = exitcond_i_fu_314_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0)) or (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = exitcond_i_fu_314_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, modulation_type_empty_n, block_size_empty_n, modulation_type_out_full_n, block_size_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = modulation_type_empty_n) or (ap_const_logic_0 = block_size_empty_n) or (ap_const_logic_0 = modulation_type_out_full_n) or (ap_const_logic_0 = block_size_out_full_n));
    end process;


    ap_block_state3_assign_proc : process(src_data_V_empty_n, exitcond_i_reg_401)
    begin
                ap_block_state3 <= ((exitcond_i_reg_401 = ap_const_lv1_0) and (ap_const_logic_0 = src_data_V_empty_n));
    end process;


    ap_block_state3_ignore_call0_assign_proc : process(src_data_V_empty_n, exitcond_i_reg_401)
    begin
                ap_block_state3_ignore_call0 <= ((exitcond_i_reg_401 = ap_const_lv1_0) and (ap_const_logic_0 = src_data_V_empty_n));
    end process;


    ap_block_state7_assign_proc : process(mod_data_last_V_full_n, ap_reg_pp0_iter4_tmp_i_reg_417, mod_data_V_M_real_V1_status, ap_predicate_op58_write_state7, ap_predicate_op60_write_state7)
    begin
                ap_block_state7 <= (((ap_reg_pp0_iter4_tmp_i_reg_417 = ap_const_lv1_1) and (ap_const_logic_0 = mod_data_V_M_real_V1_status)) or ((ap_const_logic_0 = mod_data_last_V_full_n) and (ap_const_boolean_1 = ap_predicate_op58_write_state7)) or ((ap_const_logic_0 = mod_data_last_V_full_n) and (ap_const_boolean_1 = ap_predicate_op60_write_state7)));
    end process;


    ap_block_state7_ignore_call0_assign_proc : process(mod_data_last_V_full_n, ap_reg_pp0_iter4_tmp_i_reg_417, mod_data_V_M_real_V1_status, ap_predicate_op58_write_state7, ap_predicate_op60_write_state7)
    begin
                ap_block_state7_ignore_call0 <= (((ap_reg_pp0_iter4_tmp_i_reg_417 = ap_const_lv1_1) and (ap_const_logic_0 = mod_data_V_M_real_V1_status)) or ((ap_const_logic_0 = mod_data_last_V_full_n) and (ap_const_boolean_1 = ap_predicate_op58_write_state7)) or ((ap_const_logic_0 = mod_data_last_V_full_n) and (ap_const_boolean_1 = ap_predicate_op60_write_state7)));
    end process;


    ap_condition_324_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_state3, ap_block_state7)
    begin
                ap_condition_324 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op58_write_state7_assign_proc : process(ap_reg_pp0_iter4_tmp_i_reg_417, ap_reg_pp0_iter4_tmp_24_i_reg_421)
    begin
                ap_predicate_op58_write_state7 <= ((ap_reg_pp0_iter4_tmp_i_reg_417 = ap_const_lv1_1) and (ap_const_lv1_0 = ap_reg_pp0_iter4_tmp_24_i_reg_421));
    end process;


    ap_predicate_op60_write_state7_assign_proc : process(ap_reg_pp0_iter4_tmp_i_reg_417, ap_reg_pp0_iter4_tmp_24_i_reg_421)
    begin
                ap_predicate_op60_write_state7 <= ((ap_reg_pp0_iter4_tmp_i_reg_417 = ap_const_lv1_1) and (ap_const_lv1_1 = ap_reg_pp0_iter4_tmp_24_i_reg_421));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, block_size_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_size_blk_n <= block_size_empty_n;
        else 
            block_size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_size_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, block_size_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_size_out_blk_n <= block_size_out_full_n;
        else 
            block_size_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_size_out_din <= block_size_dout;

    block_size_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_size_out_write <= ap_const_logic_1;
        else 
            block_size_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_size_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_size_read <= ap_const_logic_1;
        else 
            block_size_read <= ap_const_logic_0;
        end if; 
    end process;

    bvh_d_index_fu_328_p1 <= std_logic_vector(resize(unsigned(sym_i_1_fu_182),32));
    exitcond_i_fu_314_p2 <= "1" when (i_i_phi_fu_270_p4 = block_size_read_reg_383) else "0";

    grp_modulate_bits_fu_277_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_state3_ignore_call0, ap_block_state7_ignore_call0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3_ignore_call0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7_ignore_call0)))))) then 
            grp_modulate_bits_fu_277_ap_ce <= ap_const_logic_1;
        else 
            grp_modulate_bits_fu_277_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_modulate_bits_fu_277_ap_start <= ap_reg_grp_modulate_bits_fu_277_ap_start;
    i_fu_319_p2 <= std_logic_vector(unsigned(i_i_phi_fu_270_p4) + unsigned(ap_const_lv32_1));

    i_i_phi_fu_270_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_401, i_i_reg_266, i_reg_405)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_401 = ap_const_lv1_0))) then 
            i_i_phi_fu_270_p4 <= i_reg_405;
        else 
            i_i_phi_fu_270_p4 <= i_i_reg_266;
        end if; 
    end process;

    index_assign_cast_i_fu_332_p1 <= std_logic_vector(resize(unsigned(sym_i_1_fu_182),9));

    mod_data_V_M_imag_V_blk_n_assign_proc : process(mod_data_V_M_imag_V_full_n, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_tmp_i_reg_417)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_reg_pp0_iter4_tmp_i_reg_417 = ap_const_lv1_1))) then 
            mod_data_V_M_imag_V_blk_n <= mod_data_V_M_imag_V_full_n;
        else 
            mod_data_V_M_imag_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mod_data_V_M_imag_V_din <= tmp_M_imag_V_reg_430;
    mod_data_V_M_imag_V_write <= mod_data_V_M_real_V1_update;
    mod_data_V_M_real_V1_status <= (mod_data_V_M_real_V_full_n and mod_data_V_M_imag_V_full_n);

    mod_data_V_M_real_V1_update_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_tmp_i_reg_417, ap_block_state3, ap_block_state7)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_reg_pp0_iter4_tmp_i_reg_417 = ap_const_lv1_1) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))))) then 
            mod_data_V_M_real_V1_update <= ap_const_logic_1;
        else 
            mod_data_V_M_real_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    mod_data_V_M_real_V_blk_n_assign_proc : process(mod_data_V_M_real_V_full_n, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_tmp_i_reg_417)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_reg_pp0_iter4_tmp_i_reg_417 = ap_const_lv1_1))) then 
            mod_data_V_M_real_V_blk_n <= mod_data_V_M_real_V_full_n;
        else 
            mod_data_V_M_real_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mod_data_V_M_real_V_din <= tmp_M_real_V_reg_425;
    mod_data_V_M_real_V_write <= mod_data_V_M_real_V1_update;

    mod_data_last_V_blk_n_assign_proc : process(mod_data_last_V_full_n, ap_enable_reg_pp0_iter5, ap_reg_pp0_iter4_tmp_i_reg_417, ap_reg_pp0_iter4_tmp_24_i_reg_421)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_reg_pp0_iter4_tmp_i_reg_417 = ap_const_lv1_1) and (ap_const_lv1_1 = ap_reg_pp0_iter4_tmp_24_i_reg_421)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_reg_pp0_iter4_tmp_i_reg_417 = ap_const_lv1_1) and (ap_const_lv1_0 = ap_reg_pp0_iter4_tmp_24_i_reg_421)))) then 
            mod_data_last_V_blk_n <= mod_data_last_V_full_n;
        else 
            mod_data_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mod_data_last_V_din_assign_proc : process(ap_predicate_op58_write_state7, ap_predicate_op60_write_state7, ap_condition_324)
    begin
        if ((ap_condition_324 = ap_const_boolean_1)) then
            if ((ap_const_boolean_1 = ap_predicate_op60_write_state7)) then 
                mod_data_last_V_din <= ap_const_logic_1;
            elsif ((ap_const_boolean_1 = ap_predicate_op58_write_state7)) then 
                mod_data_last_V_din <= ap_const_logic_0;
            else 
                mod_data_last_V_din <= 'X';
            end if;
        else 
            mod_data_last_V_din <= 'X';
        end if; 
    end process;


    mod_data_last_V_write_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_state3, ap_predicate_op58_write_state7, ap_predicate_op60_write_state7, ap_block_state7)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_predicate_op58_write_state7) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7))))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_predicate_op60_write_state7) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7))))))) then 
            mod_data_last_V_write <= ap_const_logic_1;
        else 
            mod_data_last_V_write <= ap_const_logic_0;
        end if; 
    end process;


    modulation_type_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, modulation_type_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            modulation_type_blk_n <= modulation_type_empty_n;
        else 
            modulation_type_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    modulation_type_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, modulation_type_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            modulation_type_out_blk_n <= modulation_type_out_full_n;
        else 
            modulation_type_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    modulation_type_out_din <= modulation_type_dout;

    modulation_type_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            modulation_type_out_write <= ap_const_logic_1;
        else 
            modulation_type_out_write <= ap_const_logic_0;
        end if; 
    end process;


    modulation_type_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            modulation_type_read <= ap_const_logic_1;
        else 
            modulation_type_read <= ap_const_logic_0;
        end if; 
    end process;

    modulation_type_read_read_fu_186_p2 <= modulation_type_dout;
    p_Repl2_s_fu_336_p0 <= (0=>src_data_V_dout, others=>'-');
    p_Repl2_s_fu_336_p1 <= std_logic_vector(resize(unsigned(p_Repl2_s_fu_336_p0),64));
    
    p_Result_s_fu_340_p4_proc : process(p_Val2_s_phi_fu_258_p4, bvh_d_index_fu_328_p1, p_Repl2_s_fu_336_p1)
    variable result: std_logic_vector(0 downto 0);
    begin
        p_Result_s_fu_340_p4 <= p_Val2_s_phi_fu_258_p4;
        if to_integer(unsigned(bvh_d_index_fu_328_p1)) >= p_Val2_s_phi_fu_258_p4'low and to_integer(unsigned(bvh_d_index_fu_328_p1)) <= p_Val2_s_phi_fu_258_p4'high then
            result(0) := '0';
            for i in p_Repl2_s_fu_336_p1'range loop
                result(0) := result(0) or p_Repl2_s_fu_336_p1(i);
            end loop;
            p_Result_s_fu_340_p4(to_integer(unsigned(bvh_d_index_fu_328_p1))) <= result(0);
        end if;
    end process;


    p_Val2_s_phi_fu_258_p4_assign_proc : process(p_Val2_s_reg_254, ap_reg_pp0_iter1_exitcond_i_reg_401, p_Result_s_reg_411, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_i_reg_401))) then 
            p_Val2_s_phi_fu_258_p4 <= p_Result_s_reg_411;
        else 
            p_Val2_s_phi_fu_258_p4 <= p_Val2_s_reg_254;
        end if; 
    end process;


    src_data_V_blk_n_assign_proc : process(src_data_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_401)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_401 = ap_const_lv1_0))) then 
            src_data_V_blk_n <= src_data_V_empty_n;
        else 
            src_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_401, ap_enable_reg_pp0_iter5, ap_block_state3, ap_block_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_i_reg_401 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter5) and (ap_const_boolean_1 = ap_block_state7)))))) then 
            src_data_V_read <= ap_const_logic_1;
        else 
            src_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    sym_i_fu_355_p2 <= std_logic_vector(unsigned(sym_i_1_fu_182) + unsigned(ap_const_lv8_1));
    symbol_width_cast_i_fu_310_p1 <= std_logic_vector(resize(unsigned(symbol_width_i_phi_fu_242_p8),9));

    symbol_width_i_phi_fu_242_p8_assign_proc : process(ap_CS_fsm_state1, modulation_type_read_read_fu_186_p2, tmp_fu_304_p1)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv32_0 = modulation_type_read_read_fu_186_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv32_1 = modulation_type_read_read_fu_186_p2)))) then 
            symbol_width_i_phi_fu_242_p8 <= tmp_fu_304_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (modulation_type_read_read_fu_186_p2 = ap_const_lv32_2))) then 
            symbol_width_i_phi_fu_242_p8 <= ap_const_lv3_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (modulation_type_read_read_fu_186_p2 = ap_const_lv32_3))) then 
            symbol_width_i_phi_fu_242_p8 <= ap_const_lv3_5;
        else 
            symbol_width_i_phi_fu_242_p8 <= "XXX";
        end if; 
    end process;

    tmp_24_i_fu_366_p2 <= "1" when (i_reg_405 = block_size_read_reg_383) else "0";
    tmp_fu_304_p1 <= modulation_type_dout(3 - 1 downto 0);
    tmp_i_fu_350_p2 <= "1" when (index_assign_cast_i_fu_332_p1 = symbol_width_cast_i_reg_396) else "0";
end behav;
