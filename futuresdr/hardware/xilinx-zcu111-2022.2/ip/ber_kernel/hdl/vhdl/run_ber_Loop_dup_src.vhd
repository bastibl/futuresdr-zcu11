-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_ber_Loop_dup_src is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    block_cfg_k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_k_empty_n : IN STD_LOGIC;
    block_cfg_k_read : OUT STD_LOGIC;
    src_data_g_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    src_data_g_V_empty_n : IN STD_LOGIC;
    src_data_g_V_read : OUT STD_LOGIC;
    src_data_i_V_2_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_data_i_V_2_full_n : IN STD_LOGIC;
    src_data_i_V_2_write : OUT STD_LOGIC;
    block_cfg_outputs_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_outputs_empty_n : IN STD_LOGIC;
    block_cfg_outputs_read : OUT STD_LOGIC;
    src_data_i_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_data_i_V_full_n : IN STD_LOGIC;
    src_data_i_V_write : OUT STD_LOGIC;
    block_cfg_k_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_k_out_full_n : IN STD_LOGIC;
    block_cfg_k_out_write : OUT STD_LOGIC;
    block_cfg_k_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_k_out1_full_n : IN STD_LOGIC;
    block_cfg_k_out1_write : OUT STD_LOGIC;
    block_cfg_outputs_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_outputs_out_full_n : IN STD_LOGIC;
    block_cfg_outputs_out_write : OUT STD_LOGIC );
end;


architecture behav of run_ber_Loop_dup_src is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal block_cfg_k_blk_n : STD_LOGIC;
    signal src_data_g_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal src_data_i_V_2_blk_n : STD_LOGIC;
    signal block_cfg_outputs_blk_n : STD_LOGIC;
    signal src_data_i_V_blk_n : STD_LOGIC;
    signal tmp_7_i_reg_245 : STD_LOGIC_VECTOR (0 downto 0);
    signal block_cfg_k_out_blk_n : STD_LOGIC;
    signal block_cfg_k_out1_blk_n : STD_LOGIC;
    signal block_cfg_outputs_out_blk_n : STD_LOGIC;
    signal i_0_i_i_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_k_read_reg_235 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_fu_215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_240 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_i_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond6_i_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal i_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))) and (exitcond6_i_fu_224_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))) and not((exitcond6_i_fu_224_p2 = ap_const_lv1_1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))) and (exitcond6_i_fu_224_p2 = ap_const_lv1_1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if ((start_full_n = ap_const_logic_1)) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_0 = start_full_n) and (ap_const_logic_1 = internal_ap_ready))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = start_control_reg) and (ap_const_logic_1 = start_full_n))) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_0 = ap_start)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond6_i_fu_224_p2))) then 
                i_0_i_i_reg_204 <= i_fu_229_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_0_i_i_reg_204 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then
                block_cfg_k_read_reg_235 <= block_cfg_k_dout;
                tmp_reg_240 <= tmp_fu_215_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_7_i_reg_245 <= tmp_7_i_fu_219_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter1, ap_block_state1, exitcond6_i_fu_224_p2, ap_block_state4, ap_enable_reg_pp0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((ap_block_state1 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond6_i_fu_224_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond6_i_fu_224_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, block_cfg_k_empty_n, block_cfg_outputs_empty_n, block_cfg_k_out_full_n, block_cfg_k_out1_full_n, block_cfg_outputs_out_full_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = block_cfg_k_empty_n) or (ap_const_logic_0 = block_cfg_outputs_empty_n) or (ap_const_logic_0 = block_cfg_k_out_full_n) or (ap_const_logic_0 = block_cfg_k_out1_full_n) or (ap_const_logic_0 = block_cfg_outputs_out_full_n));
    end process;


    ap_block_state4_assign_proc : process(src_data_g_V_empty_n, src_data_i_V_2_full_n, src_data_i_V_full_n, tmp_7_i_reg_245)
    begin
                ap_block_state4 <= ((ap_const_logic_0 = src_data_g_V_empty_n) or (ap_const_logic_0 = src_data_i_V_2_full_n) or ((tmp_7_i_reg_245 = ap_const_lv1_0) and (ap_const_logic_0 = src_data_i_V_full_n)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    block_cfg_k_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_k_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_k_blk_n <= block_cfg_k_empty_n;
        else 
            block_cfg_k_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_cfg_k_out1_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_k_out1_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_k_out1_blk_n <= block_cfg_k_out1_full_n;
        else 
            block_cfg_k_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_k_out1_din <= block_cfg_k_dout;

    block_cfg_k_out1_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_k_out1_write <= ap_const_logic_1;
        else 
            block_cfg_k_out1_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_k_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_k_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_k_out_blk_n <= block_cfg_k_out_full_n;
        else 
            block_cfg_k_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_k_out_din <= block_cfg_k_dout;

    block_cfg_k_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_k_out_write <= ap_const_logic_1;
        else 
            block_cfg_k_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_k_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_k_read <= ap_const_logic_1;
        else 
            block_cfg_k_read <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_outputs_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_outputs_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_outputs_blk_n <= block_cfg_outputs_empty_n;
        else 
            block_cfg_outputs_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_cfg_outputs_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_outputs_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_outputs_out_blk_n <= block_cfg_outputs_out_full_n;
        else 
            block_cfg_outputs_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    block_cfg_outputs_out_din <= block_cfg_outputs_dout;

    block_cfg_outputs_out_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_outputs_out_write <= ap_const_logic_1;
        else 
            block_cfg_outputs_out_write <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_outputs_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_outputs_read <= ap_const_logic_1;
        else 
            block_cfg_outputs_read <= ap_const_logic_0;
        end if; 
    end process;

    exitcond6_i_fu_224_p2 <= "1" when (i_0_i_i_reg_204 = block_cfg_k_read_reg_235) else "0";
    i_fu_229_p2 <= std_logic_vector(unsigned(i_0_i_i_reg_204) + unsigned(ap_const_lv32_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((ap_const_logic_1 = real_start_status_reg)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    src_data_g_V_blk_n_assign_proc : process(src_data_g_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            src_data_g_V_blk_n <= src_data_g_V_empty_n;
        else 
            src_data_g_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_g_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))))) then 
            src_data_g_V_read <= ap_const_logic_1;
        else 
            src_data_g_V_read <= ap_const_logic_0;
        end if; 
    end process;


    src_data_i_V_2_blk_n_assign_proc : process(src_data_i_V_2_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            src_data_i_V_2_blk_n <= src_data_i_V_2_full_n;
        else 
            src_data_i_V_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_data_i_V_2_din <= src_data_g_V_dout;

    src_data_i_V_2_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))))) then 
            src_data_i_V_2_write <= ap_const_logic_1;
        else 
            src_data_i_V_2_write <= ap_const_logic_0;
        end if; 
    end process;


    src_data_i_V_blk_n_assign_proc : process(src_data_i_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_7_i_reg_245)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_7_i_reg_245 = ap_const_lv1_0))) then 
            src_data_i_V_blk_n <= src_data_i_V_full_n;
        else 
            src_data_i_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_data_i_V_din <= src_data_g_V_dout;

    src_data_i_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_7_i_reg_245, ap_block_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_7_i_reg_245 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))))) then 
            src_data_i_V_write <= ap_const_logic_1;
        else 
            src_data_i_V_write <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;
    start_write <= (ap_start and start_control_reg);
    tmp_7_i_fu_219_p2 <= "1" when (tmp_reg_240 = ap_const_lv8_0) else "0";
    tmp_fu_215_p1 <= block_cfg_outputs_dout(8 - 1 downto 0);
end behav;
