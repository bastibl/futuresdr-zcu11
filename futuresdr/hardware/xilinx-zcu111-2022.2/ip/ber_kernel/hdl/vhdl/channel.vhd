-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity channel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    block_cfg_skip_channel_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_skip_channel_empty_n : IN STD_LOGIC;
    block_cfg_skip_channel_read : OUT STD_LOGIC;
    block_cfg_snr_V_dout : IN STD_LOGIC_VECTOR (16 downto 0);
    block_cfg_snr_V_empty_n : IN STD_LOGIC;
    block_cfg_snr_V_read : OUT STD_LOGIC;
    mod_data_V_M_real_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    mod_data_V_M_real_V_empty_n : IN STD_LOGIC;
    mod_data_V_M_real_V_read : OUT STD_LOGIC;
    mod_data_V_M_imag_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    mod_data_V_M_imag_V_empty_n : IN STD_LOGIC;
    mod_data_V_M_imag_V_read : OUT STD_LOGIC;
    mod_data_last_V_dout : IN STD_LOGIC;
    mod_data_last_V_empty_n : IN STD_LOGIC;
    mod_data_last_V_read : OUT STD_LOGIC;
    chan_data_V_M_real_s_din : OUT STD_LOGIC_VECTOR (18 downto 0);
    chan_data_V_M_real_s_full_n : IN STD_LOGIC;
    chan_data_V_M_real_s_write : OUT STD_LOGIC;
    chan_data_V_M_imag_s_din : OUT STD_LOGIC_VECTOR (18 downto 0);
    chan_data_V_M_imag_s_full_n : IN STD_LOGIC;
    chan_data_V_M_imag_s_write : OUT STD_LOGIC;
    chan_data_last_V_din : OUT STD_LOGIC;
    chan_data_last_V_full_n : IN STD_LOGIC;
    chan_data_last_V_write : OUT STD_LOGIC );
end;


architecture behav of channel is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal block_cfg_skip_channel_blk_n : STD_LOGIC;
    signal block_cfg_snr_V_blk_n : STD_LOGIC;
    signal mod_data_V_M_real_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal mod_data_V_M_imag_V_blk_n : STD_LOGIC;
    signal mod_data_last_V_blk_n : STD_LOGIC;
    signal chan_data_V_M_real_s_blk_n : STD_LOGIC;
    signal chan_data_V_M_imag_s_blk_n : STD_LOGIC;
    signal chan_data_last_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_33_reg_291 : STD_LOGIC_VECTOR (0 downto 0);
    signal block_cfg_snr_V_read_reg_277 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_fu_250_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_282 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_33_read_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mod_data_V_M_real_V0_status : STD_LOGIC;
    signal chan_data_V_M_real_s1_status : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal grp_channel_1_fu_217_ap_start : STD_LOGIC;
    signal grp_channel_1_fu_217_ap_done : STD_LOGIC;
    signal grp_channel_1_fu_217_ap_idle : STD_LOGIC;
    signal grp_channel_1_fu_217_ap_ready : STD_LOGIC;
    signal grp_channel_1_fu_217_src_data_V_M_real_V_read : STD_LOGIC;
    signal grp_channel_1_fu_217_src_data_V_M_imag_V_read : STD_LOGIC;
    signal grp_channel_1_fu_217_src_data_last_V_read : STD_LOGIC;
    signal grp_channel_1_fu_217_err_data_V_M_real_V_din : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_channel_1_fu_217_err_data_V_M_real_V_write : STD_LOGIC;
    signal grp_channel_1_fu_217_err_data_V_M_imag_V_din : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_channel_1_fu_217_err_data_V_M_imag_V_write : STD_LOGIC;
    signal grp_channel_1_fu_217_err_data_last_V_din : STD_LOGIC;
    signal grp_channel_1_fu_217_err_data_last_V_write : STD_LOGIC;
    signal ap_reg_grp_channel_1_fu_217_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal mod_data_V_M_real_V0_update : STD_LOGIC;
    signal chan_data_V_M_real_s1_update : STD_LOGIC;
    signal tmp_M_real_V_fu_267_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_M_imag_V_fu_272_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component channel_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (16 downto 0);
        src_data_V_M_real_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_V_M_real_V_empty_n : IN STD_LOGIC;
        src_data_V_M_real_V_read : OUT STD_LOGIC;
        src_data_V_M_imag_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        src_data_V_M_imag_V_empty_n : IN STD_LOGIC;
        src_data_V_M_imag_V_read : OUT STD_LOGIC;
        src_data_last_V_dout : IN STD_LOGIC;
        src_data_last_V_empty_n : IN STD_LOGIC;
        src_data_last_V_read : OUT STD_LOGIC;
        err_data_V_M_real_V_din : OUT STD_LOGIC_VECTOR (18 downto 0);
        err_data_V_M_real_V_full_n : IN STD_LOGIC;
        err_data_V_M_real_V_write : OUT STD_LOGIC;
        err_data_V_M_imag_V_din : OUT STD_LOGIC_VECTOR (18 downto 0);
        err_data_V_M_imag_V_full_n : IN STD_LOGIC;
        err_data_V_M_imag_V_write : OUT STD_LOGIC;
        err_data_last_V_din : OUT STD_LOGIC;
        err_data_last_V_full_n : IN STD_LOGIC;
        err_data_last_V_write : OUT STD_LOGIC );
    end component;



begin
    grp_channel_1_fu_217 : component channel_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_channel_1_fu_217_ap_start,
        ap_done => grp_channel_1_fu_217_ap_done,
        ap_idle => grp_channel_1_fu_217_ap_idle,
        ap_ready => grp_channel_1_fu_217_ap_ready,
        snr_V => block_cfg_snr_V_read_reg_277,
        src_data_V_M_real_V_dout => mod_data_V_M_real_V_dout,
        src_data_V_M_real_V_empty_n => mod_data_V_M_real_V_empty_n,
        src_data_V_M_real_V_read => grp_channel_1_fu_217_src_data_V_M_real_V_read,
        src_data_V_M_imag_V_dout => mod_data_V_M_imag_V_dout,
        src_data_V_M_imag_V_empty_n => mod_data_V_M_imag_V_empty_n,
        src_data_V_M_imag_V_read => grp_channel_1_fu_217_src_data_V_M_imag_V_read,
        src_data_last_V_dout => mod_data_last_V_dout,
        src_data_last_V_empty_n => mod_data_last_V_empty_n,
        src_data_last_V_read => grp_channel_1_fu_217_src_data_last_V_read,
        err_data_V_M_real_V_din => grp_channel_1_fu_217_err_data_V_M_real_V_din,
        err_data_V_M_real_V_full_n => chan_data_V_M_real_s_full_n,
        err_data_V_M_real_V_write => grp_channel_1_fu_217_err_data_V_M_real_V_write,
        err_data_V_M_imag_V_din => grp_channel_1_fu_217_err_data_V_M_imag_V_din,
        err_data_V_M_imag_V_full_n => chan_data_V_M_imag_s_full_n,
        err_data_V_M_imag_V_write => grp_channel_1_fu_217_err_data_V_M_imag_V_write,
        err_data_last_V_din => grp_channel_1_fu_217_err_data_last_V_din,
        err_data_last_V_full_n => chan_data_last_V_full_n,
        err_data_last_V_write => grp_channel_1_fu_217_err_data_last_V_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))) and (ap_const_lv1_1 = tmp_33_read_fu_202_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_i_i_fu_254_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_i_i_fu_254_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_channel_1_fu_217_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_channel_1_fu_217_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_i_i_fu_254_p2))) then 
                    ap_reg_grp_channel_1_fu_217_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_channel_1_fu_217_ap_ready)) then 
                    ap_reg_grp_channel_1_fu_217_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if ((start_full_n = ap_const_logic_1)) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_0 = start_full_n) and (ap_const_logic_1 = internal_ap_ready))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = real_start) and ((ap_const_logic_1 = internal_ap_ready) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = start_control_reg) and (ap_const_logic_1 = start_full_n))) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = real_start)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_0 = ap_start)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then
                block_cfg_snr_V_read_reg_277 <= block_cfg_snr_V_dout;
                tmp_reg_282 <= tmp_fu_250_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))))) then
                tmp_33_reg_291 <= (0=>mod_data_last_V_dout, others=>'-');
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state1, tmp_i_i_fu_254_p2, ap_block_state3, ap_block_state4, grp_channel_1_fu_217_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((ap_block_state1 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_lv1_0 = tmp_i_i_fu_254_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state6 => 
                if ((grp_channel_1_fu_217_ap_done = ap_const_logic_1)) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, block_cfg_skip_channel_empty_n, block_cfg_snr_V_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = block_cfg_skip_channel_empty_n) or (ap_const_logic_0 = block_cfg_snr_V_empty_n));
    end process;


    ap_block_state3_assign_proc : process(mod_data_last_V_empty_n, mod_data_V_M_real_V0_status, chan_data_V_M_real_s1_status)
    begin
                ap_block_state3 <= ((ap_const_logic_0 = mod_data_V_M_real_V0_status) or (ap_const_logic_0 = chan_data_V_M_real_s1_status) or (ap_const_logic_0 = mod_data_last_V_empty_n));
    end process;


    ap_block_state4_assign_proc : process(chan_data_last_V_full_n, tmp_33_reg_291)
    begin
                ap_block_state4 <= (((tmp_33_reg_291 = ap_const_lv1_0) and (ap_const_logic_0 = chan_data_last_V_full_n)) or ((tmp_33_reg_291 = ap_const_lv1_1) and (ap_const_logic_0 = chan_data_last_V_full_n)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = real_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    block_cfg_skip_channel_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_skip_channel_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_skip_channel_blk_n <= block_cfg_skip_channel_empty_n;
        else 
            block_cfg_skip_channel_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_cfg_skip_channel_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_skip_channel_read <= ap_const_logic_1;
        else 
            block_cfg_skip_channel_read <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_snr_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_snr_V_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = real_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_snr_V_blk_n <= block_cfg_snr_V_empty_n;
        else 
            block_cfg_snr_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_cfg_snr_V_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_snr_V_read <= ap_const_logic_1;
        else 
            block_cfg_snr_V_read <= ap_const_logic_0;
        end if; 
    end process;


    chan_data_V_M_imag_s_blk_n_assign_proc : process(chan_data_V_M_imag_s_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            chan_data_V_M_imag_s_blk_n <= chan_data_V_M_imag_s_full_n;
        else 
            chan_data_V_M_imag_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    chan_data_V_M_imag_s_din_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state3, ap_block_state4, grp_channel_1_fu_217_err_data_V_M_imag_V_din, ap_CS_fsm_state6, tmp_M_imag_V_fu_272_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))))) then 
            chan_data_V_M_imag_s_din <= tmp_M_imag_V_fu_272_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            chan_data_V_M_imag_s_din <= grp_channel_1_fu_217_err_data_V_M_imag_V_din;
        else 
            chan_data_V_M_imag_s_din <= grp_channel_1_fu_217_err_data_V_M_imag_V_din;
        end if; 
    end process;


    chan_data_V_M_imag_s_write_assign_proc : process(grp_channel_1_fu_217_err_data_V_M_imag_V_write, ap_CS_fsm_state6, chan_data_V_M_real_s1_update)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            chan_data_V_M_imag_s_write <= grp_channel_1_fu_217_err_data_V_M_imag_V_write;
        else 
            chan_data_V_M_imag_s_write <= chan_data_V_M_real_s1_update;
        end if; 
    end process;

    chan_data_V_M_real_s1_status <= (chan_data_V_M_real_s_full_n and chan_data_V_M_imag_s_full_n);

    chan_data_V_M_real_s1_update_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state3, ap_block_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))))) then 
            chan_data_V_M_real_s1_update <= ap_const_logic_1;
        else 
            chan_data_V_M_real_s1_update <= ap_const_logic_0;
        end if; 
    end process;


    chan_data_V_M_real_s_blk_n_assign_proc : process(chan_data_V_M_real_s_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            chan_data_V_M_real_s_blk_n <= chan_data_V_M_real_s_full_n;
        else 
            chan_data_V_M_real_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    chan_data_V_M_real_s_din_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state3, ap_block_state4, grp_channel_1_fu_217_err_data_V_M_real_V_din, ap_CS_fsm_state6, tmp_M_real_V_fu_267_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))))) then 
            chan_data_V_M_real_s_din <= tmp_M_real_V_fu_267_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            chan_data_V_M_real_s_din <= grp_channel_1_fu_217_err_data_V_M_real_V_din;
        else 
            chan_data_V_M_real_s_din <= grp_channel_1_fu_217_err_data_V_M_real_V_din;
        end if; 
    end process;


    chan_data_V_M_real_s_write_assign_proc : process(grp_channel_1_fu_217_err_data_V_M_real_V_write, ap_CS_fsm_state6, chan_data_V_M_real_s1_update)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            chan_data_V_M_real_s_write <= grp_channel_1_fu_217_err_data_V_M_real_V_write;
        else 
            chan_data_V_M_real_s_write <= chan_data_V_M_real_s1_update;
        end if; 
    end process;


    chan_data_last_V_blk_n_assign_proc : process(chan_data_last_V_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_33_reg_291)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_33_reg_291 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_33_reg_291 = ap_const_lv1_0)))) then 
            chan_data_last_V_blk_n <= chan_data_last_V_full_n;
        else 
            chan_data_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    chan_data_last_V_din_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, tmp_33_reg_291, ap_block_state3, ap_block_state4, grp_channel_1_fu_217_err_data_last_V_din, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_33_reg_291 = ap_const_lv1_1) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))))) then 
            chan_data_last_V_din <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_33_reg_291 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))))) then 
            chan_data_last_V_din <= ap_const_logic_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            chan_data_last_V_din <= grp_channel_1_fu_217_err_data_last_V_din;
        else 
            chan_data_last_V_din <= grp_channel_1_fu_217_err_data_last_V_din;
        end if; 
    end process;


    chan_data_last_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, tmp_33_reg_291, ap_block_state3, ap_block_state4, grp_channel_1_fu_217_err_data_last_V_write, ap_CS_fsm_state6)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_33_reg_291 = ap_const_lv1_0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))))) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_33_reg_291 = ap_const_lv1_1) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4))))))) then 
            chan_data_last_V_write <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            chan_data_last_V_write <= grp_channel_1_fu_217_err_data_last_V_write;
        else 
            chan_data_last_V_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_channel_1_fu_217_ap_start <= ap_reg_grp_channel_1_fu_217_ap_start;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    mod_data_V_M_imag_V_blk_n_assign_proc : process(mod_data_V_M_imag_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            mod_data_V_M_imag_V_blk_n <= mod_data_V_M_imag_V_empty_n;
        else 
            mod_data_V_M_imag_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mod_data_V_M_imag_V_read_assign_proc : process(grp_channel_1_fu_217_src_data_V_M_imag_V_read, ap_CS_fsm_state6, mod_data_V_M_real_V0_update)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mod_data_V_M_imag_V_read <= grp_channel_1_fu_217_src_data_V_M_imag_V_read;
        else 
            mod_data_V_M_imag_V_read <= mod_data_V_M_real_V0_update;
        end if; 
    end process;

    mod_data_V_M_real_V0_status <= (mod_data_V_M_real_V_empty_n and mod_data_V_M_imag_V_empty_n);

    mod_data_V_M_real_V0_update_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state3, ap_block_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))))) then 
            mod_data_V_M_real_V0_update <= ap_const_logic_1;
        else 
            mod_data_V_M_real_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    mod_data_V_M_real_V_blk_n_assign_proc : process(mod_data_V_M_real_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            mod_data_V_M_real_V_blk_n <= mod_data_V_M_real_V_empty_n;
        else 
            mod_data_V_M_real_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mod_data_V_M_real_V_read_assign_proc : process(grp_channel_1_fu_217_src_data_V_M_real_V_read, ap_CS_fsm_state6, mod_data_V_M_real_V0_update)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mod_data_V_M_real_V_read <= grp_channel_1_fu_217_src_data_V_M_real_V_read;
        else 
            mod_data_V_M_real_V_read <= mod_data_V_M_real_V0_update;
        end if; 
    end process;


    mod_data_last_V_blk_n_assign_proc : process(mod_data_last_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            mod_data_last_V_blk_n <= mod_data_last_V_empty_n;
        else 
            mod_data_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mod_data_last_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state3, ap_block_state4, grp_channel_1_fu_217_src_data_last_V_read, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_boolean_1 = ap_block_state3)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_boolean_1 = ap_block_state4)))))) then 
            mod_data_last_V_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mod_data_last_V_read <= grp_channel_1_fu_217_src_data_last_V_read;
        else 
            mod_data_last_V_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((ap_const_logic_1 = real_start_status_reg)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;
    start_write <= (ap_start and start_control_reg);
    tmp_33_read_fu_202_p2 <= (0=>mod_data_last_V_dout, others=>'-');
        tmp_M_imag_V_fu_272_p1 <= std_logic_vector(resize(signed(mod_data_V_M_imag_V_dout),19));

        tmp_M_real_V_fu_267_p1 <= std_logic_vector(resize(signed(mod_data_V_M_real_V_dout),19));

    tmp_fu_250_p1 <= block_cfg_skip_channel_dout(8 - 1 downto 0);
    tmp_i_i_fu_254_p2 <= "1" when (tmp_reg_282 = ap_const_lv8_0) else "0";
end behav;
