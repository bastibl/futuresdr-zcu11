// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module ber_stats_CNTRL_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 12,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    input  wire                          clk,
    input  wire                          rst,
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    input  wire [4:0]                    k_address0,
    input  wire                          k_ce0,
    output wire [31:0]                   k_q0,
    input  wire [4:0]                    n_address0,
    input  wire                          n_ce0,
    output wire [31:0]                   n_q0,
    input  wire [4:0]                    mask_V_address0,
    input  wire                          mask_V_ce0,
    output wire [127:0]                  mask_V_q0,
    input  wire [5:0]                    block_def_cfg_address0,
    input  wire                          block_def_cfg_ce0,
    output wire [31:0]                   block_def_cfg_q0,
    input  wire [5:0]                    block_def_cnt_address0,
    input  wire                          block_def_cnt_ce0,
    output wire [31:0]                   block_def_cnt_q0,
    output wire [31:0]                   num_defs,
    output wire [31:0]                   num_blocks,
    input  wire [4:0]                    ber_stats_raw_berr_address0,
    input  wire                          ber_stats_raw_berr_ce0,
    input  wire                          ber_stats_raw_berr_we0,
    input  wire [31:0]                   ber_stats_raw_berr_d0,
    output wire [31:0]                   ber_stats_raw_berr_q0,
    input  wire [4:0]                    ber_stats_cor_berr_address0,
    input  wire                          ber_stats_cor_berr_ce0,
    input  wire                          ber_stats_cor_berr_we0,
    input  wire [31:0]                   ber_stats_cor_berr_d0,
    output wire [31:0]                   ber_stats_cor_berr_q0,
    input  wire [4:0]                    ber_stats_cor_blerr_address0,
    input  wire                          ber_stats_cor_blerr_ce0,
    input  wire                          ber_stats_cor_blerr_we0,
    input  wire [31:0]                   ber_stats_cor_blerr_d0,
    output wire [31:0]                   ber_stats_cor_blerr_q0,
    input  wire [4:0]                    ber_stats_iter_cnt_address0,
    input  wire                          ber_stats_iter_cnt_ce0,
    input  wire                          ber_stats_iter_cnt_we0,
    input  wire [31:0]                   ber_stats_iter_cnt_d0,
    output wire [31:0]                   ber_stats_iter_cnt_q0,
    input  wire [4:0]                    ber_stats_block_cnt_address0,
    input  wire                          ber_stats_block_cnt_ce0,
    input  wire                          ber_stats_block_cnt_we0,
    input  wire [31:0]                   ber_stats_block_cnt_d0,
    output wire [31:0]                   ber_stats_block_cnt_q0
);
//------------------------Address Info-------------------
// 0x000 : Control signals
//         bit 0  - ap_start (Read/Write/COH)
//         bit 1  - ap_done (Read/COR)
//         bit 2  - ap_idle (Read)
//         bit 3  - ap_ready (Read)
//         bit 7  - auto_restart (Read/Write)
//         others - reserved
// 0x004 : Global Interrupt Enable Register
//         bit 0  - Global Interrupt Enable (Read/Write)
//         others - reserved
// 0x008 : IP Interrupt Enable Register (Read/Write)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x00c : IP Interrupt Status Register (Read/TOW)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x600 : Data signal of num_defs
//         bit 31~0 - num_defs[31:0] (Read/Write)
// 0x604 : reserved
// 0x608 : Data signal of num_blocks
//         bit 31~0 - num_blocks[31:0] (Read/Write)
// 0x60c : reserved
// 0x080 ~
// 0x0ff : Memory 'k' (32 * 32b)
//         Word n : bit [31:0] - k[n]
// 0x100 ~
// 0x17f : Memory 'n' (32 * 32b)
//         Word n : bit [31:0] - n[n]
// 0x200 ~
// 0x3ff : Memory 'mask_V' (32 * 128b)
//         Word 4n   : bit [31:0] - mask_V[n][31: 0]
//         Word 4n+1 : bit [31:0] - mask_V[n][63:32]
//         Word 4n+2 : bit [31:0] - mask_V[n][95:64]
//         Word 4n+3 : bit [31:0] - mask_V[n][127:96]
// 0x400 ~
// 0x4ff : Memory 'block_def_cfg' (64 * 32b)
//         Word n : bit [31:0] - block_def_cfg[n]
// 0x500 ~
// 0x5ff : Memory 'block_def_cnt' (64 * 32b)
//         Word n : bit [31:0] - block_def_cnt[n]
// 0x680 ~
// 0x6ff : Memory 'ber_stats_raw_berr' (32 * 32b)
//         Word n : bit [31:0] - ber_stats_raw_berr[n]
// 0x700 ~
// 0x77f : Memory 'ber_stats_cor_berr' (32 * 32b)
//         Word n : bit [31:0] - ber_stats_cor_berr[n]
// 0x780 ~
// 0x7ff : Memory 'ber_stats_cor_blerr' (32 * 32b)
//         Word n : bit [31:0] - ber_stats_cor_blerr[n]
// 0x800 ~
// 0x87f : Memory 'ber_stats_iter_cnt' (32 * 32b)
//         Word n : bit [31:0] - ber_stats_iter_cnt[n]
// 0x880 ~
// 0x8ff : Memory 'ber_stats_block_cnt' (32 * 32b)
//         Word n : bit [31:0] - ber_stats_block_cnt[n]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                  = 12'h000,
    ADDR_GIE                      = 12'h004,
    ADDR_IER                      = 12'h008,
    ADDR_ISR                      = 12'h00c,
    ADDR_NUM_DEFS_DATA_0          = 12'h600,
    ADDR_NUM_DEFS_CTRL            = 12'h604,
    ADDR_NUM_BLOCKS_DATA_0        = 12'h608,
    ADDR_NUM_BLOCKS_CTRL          = 12'h60c,
    ADDR_K_BASE                   = 12'h080,
    ADDR_K_HIGH                   = 12'h0ff,
    ADDR_N_BASE                   = 12'h100,
    ADDR_N_HIGH                   = 12'h17f,
    ADDR_MASK_V_BASE              = 12'h200,
    ADDR_MASK_V_HIGH              = 12'h3ff,
    ADDR_BLOCK_DEF_CFG_BASE       = 12'h400,
    ADDR_BLOCK_DEF_CFG_HIGH       = 12'h4ff,
    ADDR_BLOCK_DEF_CNT_BASE       = 12'h500,
    ADDR_BLOCK_DEF_CNT_HIGH       = 12'h5ff,
    ADDR_BER_STATS_RAW_BERR_BASE  = 12'h680,
    ADDR_BER_STATS_RAW_BERR_HIGH  = 12'h6ff,
    ADDR_BER_STATS_COR_BERR_BASE  = 12'h700,
    ADDR_BER_STATS_COR_BERR_HIGH  = 12'h77f,
    ADDR_BER_STATS_COR_BLERR_BASE = 12'h780,
    ADDR_BER_STATS_COR_BLERR_HIGH = 12'h7ff,
    ADDR_BER_STATS_ITER_CNT_BASE  = 12'h800,
    ADDR_BER_STATS_ITER_CNT_HIGH  = 12'h87f,
    ADDR_BER_STATS_BLOCK_CNT_BASE = 12'h880,
    ADDR_BER_STATS_BLOCK_CNT_HIGH = 12'h8ff,
    WRIDLE                        = 2'd0,
    WRDATA                        = 2'd1,
    WRRESP                        = 2'd2,
    WRRESET                       = 2'd3,
    RDIDLE                        = 2'd0,
    RDDATA                        = 2'd1,
    RDRESET                       = 2'd2,
    ADDR_BITS         = 12;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    wire                          int_ap_idle;
    wire                          int_ap_ready;
    reg                           int_ap_done = 1'b0;
    wire                          ap_done_get;
    reg                           ap_done_ext;
    reg                           int_ap_start = 1'b0;
    wire                          ap_start_set;
    reg                           ap_start_mask;
    reg                           int_auto_restart = 1'b0;
    wire                          auto_restart_set;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    wire                          ier_toggle;
    reg                           ier_mask;
    reg  [1:0]                    int_isr = 2'b0;
    wire                          isr_toggle;
    reg                           isr_mask;
    reg  [31:0]                   int_num_defs = 'b0;
    reg  [31:0]                   int_num_blocks = 'b0;
    // memory signals
    wire [4:0]                    int_k_address0;
    wire                          int_k_ce0;
    wire                          int_k_we0;
    wire [3:0]                    int_k_be0;
    wire [31:0]                   int_k_d0;
    wire [31:0]                   int_k_q0;
    wire [4:0]                    int_k_address1;
    wire                          int_k_ce1;
    wire                          int_k_we1;
    wire [3:0]                    int_k_be1;
    wire [31:0]                   int_k_d1;
    wire [31:0]                   int_k_q1;
    reg                           int_k_read;
    reg                           int_k_write;
    wire [4:0]                    int_n_address0;
    wire                          int_n_ce0;
    wire                          int_n_we0;
    wire [3:0]                    int_n_be0;
    wire [31:0]                   int_n_d0;
    wire [31:0]                   int_n_q0;
    wire [4:0]                    int_n_address1;
    wire                          int_n_ce1;
    wire                          int_n_we1;
    wire [3:0]                    int_n_be1;
    wire [31:0]                   int_n_d1;
    wire [31:0]                   int_n_q1;
    reg                           int_n_read;
    reg                           int_n_write;
    wire [4:0]                    int_mask_V_address0;
    wire                          int_mask_V_ce0;
    wire                          int_mask_V_we0;
    wire [15:0]                   int_mask_V_be0;
    wire [127:0]                  int_mask_V_d0;
    wire [127:0]                  int_mask_V_q0;
    wire [4:0]                    int_mask_V_address1;
    wire                          int_mask_V_ce1;
    wire                          int_mask_V_we1;
    wire [15:0]                   int_mask_V_be1;
    wire [127:0]                  int_mask_V_d1;
    wire [127:0]                  int_mask_V_q1;
    reg                           int_mask_V_read;
    reg                           int_mask_V_write;
    reg  [1:0]                    int_mask_V_shift;
    wire [5:0]                    int_block_def_cfg_address0;
    wire                          int_block_def_cfg_ce0;
    wire                          int_block_def_cfg_we0;
    wire [3:0]                    int_block_def_cfg_be0;
    wire [31:0]                   int_block_def_cfg_d0;
    wire [31:0]                   int_block_def_cfg_q0;
    wire [5:0]                    int_block_def_cfg_address1;
    wire                          int_block_def_cfg_ce1;
    wire                          int_block_def_cfg_we1;
    wire [3:0]                    int_block_def_cfg_be1;
    wire [31:0]                   int_block_def_cfg_d1;
    wire [31:0]                   int_block_def_cfg_q1;
    reg                           int_block_def_cfg_read;
    reg                           int_block_def_cfg_write;
    wire [5:0]                    int_block_def_cnt_address0;
    wire                          int_block_def_cnt_ce0;
    wire                          int_block_def_cnt_we0;
    wire [3:0]                    int_block_def_cnt_be0;
    wire [31:0]                   int_block_def_cnt_d0;
    wire [31:0]                   int_block_def_cnt_q0;
    wire [5:0]                    int_block_def_cnt_address1;
    wire                          int_block_def_cnt_ce1;
    wire                          int_block_def_cnt_we1;
    wire [3:0]                    int_block_def_cnt_be1;
    wire [31:0]                   int_block_def_cnt_d1;
    wire [31:0]                   int_block_def_cnt_q1;
    reg                           int_block_def_cnt_read;
    reg                           int_block_def_cnt_write;
    wire [4:0]                    int_ber_stats_raw_berr_address0;
    wire                          int_ber_stats_raw_berr_ce0;
    wire                          int_ber_stats_raw_berr_we0;
    wire [3:0]                    int_ber_stats_raw_berr_be0;
    wire [31:0]                   int_ber_stats_raw_berr_d0;
    wire [31:0]                   int_ber_stats_raw_berr_q0;
    wire [4:0]                    int_ber_stats_raw_berr_address1;
    wire                          int_ber_stats_raw_berr_ce1;
    wire                          int_ber_stats_raw_berr_we1;
    wire [3:0]                    int_ber_stats_raw_berr_be1;
    wire [31:0]                   int_ber_stats_raw_berr_d1;
    wire [31:0]                   int_ber_stats_raw_berr_q1;
    reg                           int_ber_stats_raw_berr_read;
    reg                           int_ber_stats_raw_berr_write;
    wire [4:0]                    int_ber_stats_cor_berr_address0;
    wire                          int_ber_stats_cor_berr_ce0;
    wire                          int_ber_stats_cor_berr_we0;
    wire [3:0]                    int_ber_stats_cor_berr_be0;
    wire [31:0]                   int_ber_stats_cor_berr_d0;
    wire [31:0]                   int_ber_stats_cor_berr_q0;
    wire [4:0]                    int_ber_stats_cor_berr_address1;
    wire                          int_ber_stats_cor_berr_ce1;
    wire                          int_ber_stats_cor_berr_we1;
    wire [3:0]                    int_ber_stats_cor_berr_be1;
    wire [31:0]                   int_ber_stats_cor_berr_d1;
    wire [31:0]                   int_ber_stats_cor_berr_q1;
    reg                           int_ber_stats_cor_berr_read;
    reg                           int_ber_stats_cor_berr_write;
    wire [4:0]                    int_ber_stats_cor_blerr_address0;
    wire                          int_ber_stats_cor_blerr_ce0;
    wire                          int_ber_stats_cor_blerr_we0;
    wire [3:0]                    int_ber_stats_cor_blerr_be0;
    wire [31:0]                   int_ber_stats_cor_blerr_d0;
    wire [31:0]                   int_ber_stats_cor_blerr_q0;
    wire [4:0]                    int_ber_stats_cor_blerr_address1;
    wire                          int_ber_stats_cor_blerr_ce1;
    wire                          int_ber_stats_cor_blerr_we1;
    wire [3:0]                    int_ber_stats_cor_blerr_be1;
    wire [31:0]                   int_ber_stats_cor_blerr_d1;
    wire [31:0]                   int_ber_stats_cor_blerr_q1;
    reg                           int_ber_stats_cor_blerr_read;
    reg                           int_ber_stats_cor_blerr_write;
    wire [4:0]                    int_ber_stats_iter_cnt_address0;
    wire                          int_ber_stats_iter_cnt_ce0;
    wire                          int_ber_stats_iter_cnt_we0;
    wire [3:0]                    int_ber_stats_iter_cnt_be0;
    wire [31:0]                   int_ber_stats_iter_cnt_d0;
    wire [31:0]                   int_ber_stats_iter_cnt_q0;
    wire [4:0]                    int_ber_stats_iter_cnt_address1;
    wire                          int_ber_stats_iter_cnt_ce1;
    wire                          int_ber_stats_iter_cnt_we1;
    wire [3:0]                    int_ber_stats_iter_cnt_be1;
    wire [31:0]                   int_ber_stats_iter_cnt_d1;
    wire [31:0]                   int_ber_stats_iter_cnt_q1;
    reg                           int_ber_stats_iter_cnt_read;
    reg                           int_ber_stats_iter_cnt_write;
    wire [4:0]                    int_ber_stats_block_cnt_address0;
    wire                          int_ber_stats_block_cnt_ce0;
    wire                          int_ber_stats_block_cnt_we0;
    wire [3:0]                    int_ber_stats_block_cnt_be0;
    wire [31:0]                   int_ber_stats_block_cnt_d0;
    wire [31:0]                   int_ber_stats_block_cnt_q0;
    wire [4:0]                    int_ber_stats_block_cnt_address1;
    wire                          int_ber_stats_block_cnt_ce1;
    wire                          int_ber_stats_block_cnt_we1;
    wire [3:0]                    int_ber_stats_block_cnt_be1;
    wire [31:0]                   int_ber_stats_block_cnt_d1;
    wire [31:0]                   int_ber_stats_block_cnt_q1;
    reg                           int_ber_stats_block_cnt_read;
    reg                           int_ber_stats_block_cnt_write;

//------------------------Instantiation------------------
// int_k
ber_stats_CNTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 32 )
) int_k (
    .clk0     ( ACLK ),
    .address0 ( int_k_address0 ),
    .ce0      ( int_k_ce0 ),
    .we0      ( int_k_we0 ),
    .be0      ( int_k_be0 ),
    .d0       ( int_k_d0 ),
    .q0       ( int_k_q0 ),
    .clk1     ( clk ),
    .address1 ( int_k_address1 ),
    .ce1      ( int_k_ce1 ),
    .we1      ( int_k_we1 ),
    .be1      ( int_k_be1 ),
    .d1       ( int_k_d1 ),
    .q1       ( int_k_q1 )
);
// int_n
ber_stats_CNTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 32 )
) int_n (
    .clk0     ( ACLK ),
    .address0 ( int_n_address0 ),
    .ce0      ( int_n_ce0 ),
    .we0      ( int_n_we0 ),
    .be0      ( int_n_be0 ),
    .d0       ( int_n_d0 ),
    .q0       ( int_n_q0 ),
    .clk1     ( clk ),
    .address1 ( int_n_address1 ),
    .ce1      ( int_n_ce1 ),
    .we1      ( int_n_we1 ),
    .be1      ( int_n_be1 ),
    .d1       ( int_n_d1 ),
    .q1       ( int_n_q1 )
);
// int_mask_V
ber_stats_CNTRL_s_axi_ram #(
    .BYTES    ( 16 ),
    .DEPTH    ( 32 )
) int_mask_V (
    .clk0     ( ACLK ),
    .address0 ( int_mask_V_address0 ),
    .ce0      ( int_mask_V_ce0 ),
    .we0      ( int_mask_V_we0 ),
    .be0      ( int_mask_V_be0 ),
    .d0       ( int_mask_V_d0 ),
    .q0       ( int_mask_V_q0 ),
    .clk1     ( clk ),
    .address1 ( int_mask_V_address1 ),
    .ce1      ( int_mask_V_ce1 ),
    .we1      ( int_mask_V_we1 ),
    .be1      ( int_mask_V_be1 ),
    .d1       ( int_mask_V_d1 ),
    .q1       ( int_mask_V_q1 )
);
// int_block_def_cfg
ber_stats_CNTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 64 )
) int_block_def_cfg (
    .clk0     ( ACLK ),
    .address0 ( int_block_def_cfg_address0 ),
    .ce0      ( int_block_def_cfg_ce0 ),
    .we0      ( int_block_def_cfg_we0 ),
    .be0      ( int_block_def_cfg_be0 ),
    .d0       ( int_block_def_cfg_d0 ),
    .q0       ( int_block_def_cfg_q0 ),
    .clk1     ( clk ),
    .address1 ( int_block_def_cfg_address1 ),
    .ce1      ( int_block_def_cfg_ce1 ),
    .we1      ( int_block_def_cfg_we1 ),
    .be1      ( int_block_def_cfg_be1 ),
    .d1       ( int_block_def_cfg_d1 ),
    .q1       ( int_block_def_cfg_q1 )
);
// int_block_def_cnt
ber_stats_CNTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 64 )
) int_block_def_cnt (
    .clk0     ( ACLK ),
    .address0 ( int_block_def_cnt_address0 ),
    .ce0      ( int_block_def_cnt_ce0 ),
    .we0      ( int_block_def_cnt_we0 ),
    .be0      ( int_block_def_cnt_be0 ),
    .d0       ( int_block_def_cnt_d0 ),
    .q0       ( int_block_def_cnt_q0 ),
    .clk1     ( clk ),
    .address1 ( int_block_def_cnt_address1 ),
    .ce1      ( int_block_def_cnt_ce1 ),
    .we1      ( int_block_def_cnt_we1 ),
    .be1      ( int_block_def_cnt_be1 ),
    .d1       ( int_block_def_cnt_d1 ),
    .q1       ( int_block_def_cnt_q1 )
);
// int_ber_stats_raw_berr
ber_stats_CNTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 32 )
) int_ber_stats_raw_berr (
    .clk0     ( ACLK ),
    .address0 ( int_ber_stats_raw_berr_address0 ),
    .ce0      ( int_ber_stats_raw_berr_ce0 ),
    .we0      ( int_ber_stats_raw_berr_we0 ),
    .be0      ( int_ber_stats_raw_berr_be0 ),
    .d0       ( int_ber_stats_raw_berr_d0 ),
    .q0       ( int_ber_stats_raw_berr_q0 ),
    .clk1     ( clk ),
    .address1 ( int_ber_stats_raw_berr_address1 ),
    .ce1      ( int_ber_stats_raw_berr_ce1 ),
    .we1      ( int_ber_stats_raw_berr_we1 ),
    .be1      ( int_ber_stats_raw_berr_be1 ),
    .d1       ( int_ber_stats_raw_berr_d1 ),
    .q1       ( int_ber_stats_raw_berr_q1 )
);
// int_ber_stats_cor_berr
ber_stats_CNTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 32 )
) int_ber_stats_cor_berr (
    .clk0     ( ACLK ),
    .address0 ( int_ber_stats_cor_berr_address0 ),
    .ce0      ( int_ber_stats_cor_berr_ce0 ),
    .we0      ( int_ber_stats_cor_berr_we0 ),
    .be0      ( int_ber_stats_cor_berr_be0 ),
    .d0       ( int_ber_stats_cor_berr_d0 ),
    .q0       ( int_ber_stats_cor_berr_q0 ),
    .clk1     ( clk ),
    .address1 ( int_ber_stats_cor_berr_address1 ),
    .ce1      ( int_ber_stats_cor_berr_ce1 ),
    .we1      ( int_ber_stats_cor_berr_we1 ),
    .be1      ( int_ber_stats_cor_berr_be1 ),
    .d1       ( int_ber_stats_cor_berr_d1 ),
    .q1       ( int_ber_stats_cor_berr_q1 )
);
// int_ber_stats_cor_blerr
ber_stats_CNTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 32 )
) int_ber_stats_cor_blerr (
    .clk0     ( ACLK ),
    .address0 ( int_ber_stats_cor_blerr_address0 ),
    .ce0      ( int_ber_stats_cor_blerr_ce0 ),
    .we0      ( int_ber_stats_cor_blerr_we0 ),
    .be0      ( int_ber_stats_cor_blerr_be0 ),
    .d0       ( int_ber_stats_cor_blerr_d0 ),
    .q0       ( int_ber_stats_cor_blerr_q0 ),
    .clk1     ( clk ),
    .address1 ( int_ber_stats_cor_blerr_address1 ),
    .ce1      ( int_ber_stats_cor_blerr_ce1 ),
    .we1      ( int_ber_stats_cor_blerr_we1 ),
    .be1      ( int_ber_stats_cor_blerr_be1 ),
    .d1       ( int_ber_stats_cor_blerr_d1 ),
    .q1       ( int_ber_stats_cor_blerr_q1 )
);
// int_ber_stats_iter_cnt
ber_stats_CNTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 32 )
) int_ber_stats_iter_cnt (
    .clk0     ( ACLK ),
    .address0 ( int_ber_stats_iter_cnt_address0 ),
    .ce0      ( int_ber_stats_iter_cnt_ce0 ),
    .we0      ( int_ber_stats_iter_cnt_we0 ),
    .be0      ( int_ber_stats_iter_cnt_be0 ),
    .d0       ( int_ber_stats_iter_cnt_d0 ),
    .q0       ( int_ber_stats_iter_cnt_q0 ),
    .clk1     ( clk ),
    .address1 ( int_ber_stats_iter_cnt_address1 ),
    .ce1      ( int_ber_stats_iter_cnt_ce1 ),
    .we1      ( int_ber_stats_iter_cnt_we1 ),
    .be1      ( int_ber_stats_iter_cnt_be1 ),
    .d1       ( int_ber_stats_iter_cnt_d1 ),
    .q1       ( int_ber_stats_iter_cnt_q1 )
);
// int_ber_stats_block_cnt
ber_stats_CNTRL_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 32 )
) int_ber_stats_block_cnt (
    .clk0     ( ACLK ),
    .address0 ( int_ber_stats_block_cnt_address0 ),
    .ce0      ( int_ber_stats_block_cnt_ce0 ),
    .we0      ( int_ber_stats_block_cnt_we0 ),
    .be0      ( int_ber_stats_block_cnt_be0 ),
    .d0       ( int_ber_stats_block_cnt_d0 ),
    .q0       ( int_ber_stats_block_cnt_q0 ),
    .clk1     ( clk ),
    .address1 ( int_ber_stats_block_cnt_address1 ),
    .ce1      ( int_ber_stats_block_cnt_ce1 ),
    .we1      ( int_ber_stats_block_cnt_we1 ),
    .be1      ( int_ber_stats_block_cnt_be1 ),
    .d1       ( int_ber_stats_block_cnt_d1 ),
    .q1       ( int_ber_stats_block_cnt_q1 )
);

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge clk) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge clk) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_k_read & !int_n_read & !int_mask_V_read & !int_block_def_cfg_read & !int_block_def_cnt_read & !int_ber_stats_raw_berr_read & !int_ber_stats_cor_berr_read & !int_ber_stats_cor_blerr_read & !int_ber_stats_iter_cnt_read & !int_ber_stats_block_cnt_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge clk) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge clk) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_NUM_DEFS_DATA_0: begin
                    rdata <= int_num_defs[31:0];
                end
                ADDR_NUM_BLOCKS_DATA_0: begin
                    rdata <= int_num_blocks[31:0];
                end
            endcase
        end
        else if (int_k_read) begin
            rdata <= int_k_q1;
        end
        else if (int_n_read) begin
            rdata <= int_n_q1;
        end
        else if (int_mask_V_read) begin
            rdata <= int_mask_V_q1 >> (int_mask_V_shift * 32);
        end
        else if (int_block_def_cfg_read) begin
            rdata <= int_block_def_cfg_q1;
        end
        else if (int_block_def_cnt_read) begin
            rdata <= int_block_def_cnt_q1;
        end
        else if (int_ber_stats_raw_berr_read) begin
            rdata <= int_ber_stats_raw_berr_q1;
        end
        else if (int_ber_stats_cor_berr_read) begin
            rdata <= int_ber_stats_cor_berr_q1;
        end
        else if (int_ber_stats_cor_blerr_read) begin
            rdata <= int_ber_stats_cor_blerr_q1;
        end
        else if (int_ber_stats_iter_cnt_read) begin
            rdata <= int_ber_stats_iter_cnt_q1;
        end
        else if (int_ber_stats_block_cnt_read) begin
            rdata <= int_ber_stats_block_cnt_q1;
        end
    end
end


//------------------------Register logic-----------------
assign interrupt        = int_gie & (|int_isr);
assign ap_start         = int_ap_start;
assign ap_start_set     = w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0];
assign ap_done_get      = ar_hs && raddr == ADDR_AP_CTRL;
assign int_ap_idle      = ap_idle;
assign int_ap_ready     = ap_ready;
assign auto_restart_set = w_hs && waddr == ADDR_AP_CTRL && WSTRB[0];
assign isr_toggle       = w_hs && waddr == ADDR_ISR && WSTRB[0];
assign num_defs         = int_num_defs;
assign num_blocks       = int_num_blocks;
// ap_start_mask
always @(posedge ACLK) begin
    if (rst)
        ap_start_mask <= 1'b0;
    else if (ACLK_EN) begin
            ap_start_mask <= ap_start_set;
    end
end

// int_ap_start
always @(posedge ACLK) begin
    if (rst)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_start_set == 1'b1 && ap_start_mask == 1'b0)
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// ap_done_ext
always @(posedge ACLK) begin
    if (rst)
        ap_done_ext <= 1'b0;
    else if (ACLK_EN) begin
            ap_done_ext <= ap_done_get;
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (rst)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ap_done_get == 1'b0 && ap_done_ext == 1'b1)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (rst)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (auto_restart_set == 1'b1)
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (rst)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (rst)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// isr_mask
always @(posedge ACLK) begin
    if (rst)
        isr_mask <= 1'b0;
    else if (ACLK_EN) begin
            isr_mask <= isr_toggle;
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (rst)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (isr_toggle == 1'b1 && isr_mask == 1'b0)
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (rst)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (isr_toggle == 1'b1 && isr_mask == 1'b0)
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_num_defs[31:0]
always @(posedge ACLK) begin
    if (rst)
        int_num_defs[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_NUM_DEFS_DATA_0)
            int_num_defs[31:0] <= (WDATA[31:0] & wmask) | (int_num_defs[31:0] & ~wmask);
    end
end

// int_num_blocks[31:0]
always @(posedge ACLK) begin
    if (rst)
        int_num_blocks[31:0] <= 0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_NUM_BLOCKS_DATA_0)
            int_num_blocks[31:0] <= (WDATA[31:0] & wmask) | (int_num_blocks[31:0] & ~wmask);
    end
end


//------------------------Memory logic-------------------
// k
assign int_k_address0                   = k_address0;
assign int_k_ce0                        = k_ce0;
assign int_k_we0                        = 1'b0;
assign int_k_be0                        = 1'b0;
assign int_k_d0                         = 1'b0;
assign k_q0                             = int_k_q0;
assign int_k_address1                   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_k_ce1                        = ar_hs | (int_k_write & WVALID);
assign int_k_we1                        = int_k_write & WVALID;
assign int_k_be1                        = WSTRB;
assign int_k_d1                         = WDATA;
// n
assign int_n_address0                   = n_address0;
assign int_n_ce0                        = n_ce0;
assign int_n_we0                        = 1'b0;
assign int_n_be0                        = 1'b0;
assign int_n_d0                         = 1'b0;
assign n_q0                             = int_n_q0;
assign int_n_address1                   = ar_hs? raddr[6:2] : waddr[6:2];
assign int_n_ce1                        = ar_hs | (int_n_write & WVALID);
assign int_n_we1                        = int_n_write & WVALID;
assign int_n_be1                        = WSTRB;
assign int_n_d1                         = WDATA;
// mask_V
assign int_mask_V_address0              = mask_V_address0;
assign int_mask_V_ce0                   = mask_V_ce0;
assign int_mask_V_we0                   = 1'b0;
assign int_mask_V_be0                   = 1'b0;
assign int_mask_V_d0                    = 1'b0;
assign mask_V_q0                        = int_mask_V_q0;
assign int_mask_V_address1              = ar_hs? raddr[8:4] : waddr[8:4];
assign int_mask_V_ce1                   = ar_hs | (int_mask_V_write & WVALID);
assign int_mask_V_we1                   = int_mask_V_write & WVALID;
assign int_mask_V_be1                   = WSTRB << (waddr[3:2] * 4);
assign int_mask_V_d1                    = {4{WDATA}};
// block_def_cfg
assign int_block_def_cfg_address0       = block_def_cfg_address0;
assign int_block_def_cfg_ce0            = block_def_cfg_ce0;
assign int_block_def_cfg_we0            = 1'b0;
assign int_block_def_cfg_be0            = 1'b0;
assign int_block_def_cfg_d0             = 1'b0;
assign block_def_cfg_q0                 = int_block_def_cfg_q0;
assign int_block_def_cfg_address1       = ar_hs? raddr[7:2] : waddr[7:2];
assign int_block_def_cfg_ce1            = ar_hs | (int_block_def_cfg_write & WVALID);
assign int_block_def_cfg_we1            = int_block_def_cfg_write & WVALID;
assign int_block_def_cfg_be1            = WSTRB;
assign int_block_def_cfg_d1             = WDATA;
// block_def_cnt
assign int_block_def_cnt_address0       = block_def_cnt_address0;
assign int_block_def_cnt_ce0            = block_def_cnt_ce0;
assign int_block_def_cnt_we0            = 1'b0;
assign int_block_def_cnt_be0            = 1'b0;
assign int_block_def_cnt_d0             = 1'b0;
assign block_def_cnt_q0                 = int_block_def_cnt_q0;
assign int_block_def_cnt_address1       = ar_hs? raddr[7:2] : waddr[7:2];
assign int_block_def_cnt_ce1            = ar_hs | (int_block_def_cnt_write & WVALID);
assign int_block_def_cnt_we1            = int_block_def_cnt_write & WVALID;
assign int_block_def_cnt_be1            = WSTRB;
assign int_block_def_cnt_d1             = WDATA;
// ber_stats_raw_berr
assign int_ber_stats_raw_berr_address0  = ber_stats_raw_berr_address0;
assign int_ber_stats_raw_berr_ce0       = ber_stats_raw_berr_ce0;
assign int_ber_stats_raw_berr_we0       = ber_stats_raw_berr_we0;
assign int_ber_stats_raw_berr_be0       = {4{ber_stats_raw_berr_we0}};
assign int_ber_stats_raw_berr_d0        = ber_stats_raw_berr_d0;
assign ber_stats_raw_berr_q0            = int_ber_stats_raw_berr_q0;
assign int_ber_stats_raw_berr_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_ber_stats_raw_berr_ce1       = ar_hs | (int_ber_stats_raw_berr_write & WVALID);
assign int_ber_stats_raw_berr_we1       = int_ber_stats_raw_berr_write & WVALID;
assign int_ber_stats_raw_berr_be1       = WSTRB;
assign int_ber_stats_raw_berr_d1        = WDATA;
// ber_stats_cor_berr
assign int_ber_stats_cor_berr_address0  = ber_stats_cor_berr_address0;
assign int_ber_stats_cor_berr_ce0       = ber_stats_cor_berr_ce0;
assign int_ber_stats_cor_berr_we0       = ber_stats_cor_berr_we0;
assign int_ber_stats_cor_berr_be0       = {4{ber_stats_cor_berr_we0}};
assign int_ber_stats_cor_berr_d0        = ber_stats_cor_berr_d0;
assign ber_stats_cor_berr_q0            = int_ber_stats_cor_berr_q0;
assign int_ber_stats_cor_berr_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_ber_stats_cor_berr_ce1       = ar_hs | (int_ber_stats_cor_berr_write & WVALID);
assign int_ber_stats_cor_berr_we1       = int_ber_stats_cor_berr_write & WVALID;
assign int_ber_stats_cor_berr_be1       = WSTRB;
assign int_ber_stats_cor_berr_d1        = WDATA;
// ber_stats_cor_blerr
assign int_ber_stats_cor_blerr_address0 = ber_stats_cor_blerr_address0;
assign int_ber_stats_cor_blerr_ce0      = ber_stats_cor_blerr_ce0;
assign int_ber_stats_cor_blerr_we0      = ber_stats_cor_blerr_we0;
assign int_ber_stats_cor_blerr_be0      = {4{ber_stats_cor_blerr_we0}};
assign int_ber_stats_cor_blerr_d0       = ber_stats_cor_blerr_d0;
assign ber_stats_cor_blerr_q0           = int_ber_stats_cor_blerr_q0;
assign int_ber_stats_cor_blerr_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_ber_stats_cor_blerr_ce1      = ar_hs | (int_ber_stats_cor_blerr_write & WVALID);
assign int_ber_stats_cor_blerr_we1      = int_ber_stats_cor_blerr_write & WVALID;
assign int_ber_stats_cor_blerr_be1      = WSTRB;
assign int_ber_stats_cor_blerr_d1       = WDATA;
// ber_stats_iter_cnt
assign int_ber_stats_iter_cnt_address0  = ber_stats_iter_cnt_address0;
assign int_ber_stats_iter_cnt_ce0       = ber_stats_iter_cnt_ce0;
assign int_ber_stats_iter_cnt_we0       = ber_stats_iter_cnt_we0;
assign int_ber_stats_iter_cnt_be0       = {4{ber_stats_iter_cnt_we0}};
assign int_ber_stats_iter_cnt_d0        = ber_stats_iter_cnt_d0;
assign ber_stats_iter_cnt_q0            = int_ber_stats_iter_cnt_q0;
assign int_ber_stats_iter_cnt_address1  = ar_hs? raddr[6:2] : waddr[6:2];
assign int_ber_stats_iter_cnt_ce1       = ar_hs | (int_ber_stats_iter_cnt_write & WVALID);
assign int_ber_stats_iter_cnt_we1       = int_ber_stats_iter_cnt_write & WVALID;
assign int_ber_stats_iter_cnt_be1       = WSTRB;
assign int_ber_stats_iter_cnt_d1        = WDATA;
// ber_stats_block_cnt
assign int_ber_stats_block_cnt_address0 = ber_stats_block_cnt_address0;
assign int_ber_stats_block_cnt_ce0      = ber_stats_block_cnt_ce0;
assign int_ber_stats_block_cnt_we0      = ber_stats_block_cnt_we0;
assign int_ber_stats_block_cnt_be0      = {4{ber_stats_block_cnt_we0}};
assign int_ber_stats_block_cnt_d0       = ber_stats_block_cnt_d0;
assign ber_stats_block_cnt_q0           = int_ber_stats_block_cnt_q0;
assign int_ber_stats_block_cnt_address1 = ar_hs? raddr[6:2] : waddr[6:2];
assign int_ber_stats_block_cnt_ce1      = ar_hs | (int_ber_stats_block_cnt_write & WVALID);
assign int_ber_stats_block_cnt_we1      = int_ber_stats_block_cnt_write & WVALID;
assign int_ber_stats_block_cnt_be1      = WSTRB;
assign int_ber_stats_block_cnt_d1       = WDATA;
// int_k_read
always @(posedge clk) begin
    if (ARESET)
        int_k_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_K_BASE && raddr <= ADDR_K_HIGH)
            int_k_read <= 1'b1;
        else
            int_k_read <= 1'b0;
    end
end

// int_k_write
always @(posedge clk) begin
    if (ARESET)
        int_k_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_K_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_K_HIGH)
            int_k_write <= 1'b1;
        else if (WVALID)
            int_k_write <= 1'b0;
    end
end

// int_n_read
always @(posedge clk) begin
    if (ARESET)
        int_n_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_N_BASE && raddr <= ADDR_N_HIGH)
            int_n_read <= 1'b1;
        else
            int_n_read <= 1'b0;
    end
end

// int_n_write
always @(posedge clk) begin
    if (ARESET)
        int_n_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_N_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_N_HIGH)
            int_n_write <= 1'b1;
        else if (WVALID)
            int_n_write <= 1'b0;
    end
end

// int_mask_V_read
always @(posedge clk) begin
    if (ARESET)
        int_mask_V_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_MASK_V_BASE && raddr <= ADDR_MASK_V_HIGH)
            int_mask_V_read <= 1'b1;
        else
            int_mask_V_read <= 1'b0;
    end
end

// int_mask_V_write
always @(posedge clk) begin
    if (ARESET)
        int_mask_V_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_MASK_V_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_MASK_V_HIGH)
            int_mask_V_write <= 1'b1;
        else if (WVALID)
            int_mask_V_write <= 1'b0;
    end
end

// int_mask_V_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs)
            int_mask_V_shift <= raddr[3:2];
    end
end

// int_block_def_cfg_read
always @(posedge clk) begin
    if (ARESET)
        int_block_def_cfg_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_BLOCK_DEF_CFG_BASE && raddr <= ADDR_BLOCK_DEF_CFG_HIGH)
            int_block_def_cfg_read <= 1'b1;
        else
            int_block_def_cfg_read <= 1'b0;
    end
end

// int_block_def_cfg_write
always @(posedge clk) begin
    if (ARESET)
        int_block_def_cfg_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_BLOCK_DEF_CFG_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_BLOCK_DEF_CFG_HIGH)
            int_block_def_cfg_write <= 1'b1;
        else if (WVALID)
            int_block_def_cfg_write <= 1'b0;
    end
end

// int_block_def_cnt_read
always @(posedge clk) begin
    if (ARESET)
        int_block_def_cnt_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_BLOCK_DEF_CNT_BASE && raddr <= ADDR_BLOCK_DEF_CNT_HIGH)
            int_block_def_cnt_read <= 1'b1;
        else
            int_block_def_cnt_read <= 1'b0;
    end
end

// int_block_def_cnt_write
always @(posedge clk) begin
    if (ARESET)
        int_block_def_cnt_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_BLOCK_DEF_CNT_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_BLOCK_DEF_CNT_HIGH)
            int_block_def_cnt_write <= 1'b1;
        else if (WVALID)
            int_block_def_cnt_write <= 1'b0;
    end
end

// int_ber_stats_raw_berr_read
always @(posedge clk) begin
    if (ARESET)
        int_ber_stats_raw_berr_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_BER_STATS_RAW_BERR_BASE && raddr <= ADDR_BER_STATS_RAW_BERR_HIGH)
            int_ber_stats_raw_berr_read <= 1'b1;
        else
            int_ber_stats_raw_berr_read <= 1'b0;
    end
end

// int_ber_stats_raw_berr_write
always @(posedge clk) begin
    if (ARESET)
        int_ber_stats_raw_berr_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_BER_STATS_RAW_BERR_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_BER_STATS_RAW_BERR_HIGH)
            int_ber_stats_raw_berr_write <= 1'b1;
        else if (WVALID)
            int_ber_stats_raw_berr_write <= 1'b0;
    end
end

// int_ber_stats_cor_berr_read
always @(posedge clk) begin
    if (ARESET)
        int_ber_stats_cor_berr_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_BER_STATS_COR_BERR_BASE && raddr <= ADDR_BER_STATS_COR_BERR_HIGH)
            int_ber_stats_cor_berr_read <= 1'b1;
        else
            int_ber_stats_cor_berr_read <= 1'b0;
    end
end

// int_ber_stats_cor_berr_write
always @(posedge clk) begin
    if (ARESET)
        int_ber_stats_cor_berr_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_BER_STATS_COR_BERR_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_BER_STATS_COR_BERR_HIGH)
            int_ber_stats_cor_berr_write <= 1'b1;
        else if (WVALID)
            int_ber_stats_cor_berr_write <= 1'b0;
    end
end

// int_ber_stats_cor_blerr_read
always @(posedge clk) begin
    if (ARESET)
        int_ber_stats_cor_blerr_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_BER_STATS_COR_BLERR_BASE && raddr <= ADDR_BER_STATS_COR_BLERR_HIGH)
            int_ber_stats_cor_blerr_read <= 1'b1;
        else
            int_ber_stats_cor_blerr_read <= 1'b0;
    end
end

// int_ber_stats_cor_blerr_write
always @(posedge clk) begin
    if (ARESET)
        int_ber_stats_cor_blerr_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_BER_STATS_COR_BLERR_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_BER_STATS_COR_BLERR_HIGH)
            int_ber_stats_cor_blerr_write <= 1'b1;
        else if (WVALID)
            int_ber_stats_cor_blerr_write <= 1'b0;
    end
end

// int_ber_stats_iter_cnt_read
always @(posedge clk) begin
    if (ARESET)
        int_ber_stats_iter_cnt_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_BER_STATS_ITER_CNT_BASE && raddr <= ADDR_BER_STATS_ITER_CNT_HIGH)
            int_ber_stats_iter_cnt_read <= 1'b1;
        else
            int_ber_stats_iter_cnt_read <= 1'b0;
    end
end

// int_ber_stats_iter_cnt_write
always @(posedge clk) begin
    if (ARESET)
        int_ber_stats_iter_cnt_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_BER_STATS_ITER_CNT_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_BER_STATS_ITER_CNT_HIGH)
            int_ber_stats_iter_cnt_write <= 1'b1;
        else if (WVALID)
            int_ber_stats_iter_cnt_write <= 1'b0;
    end
end

// int_ber_stats_block_cnt_read
always @(posedge clk) begin
    if (ARESET)
        int_ber_stats_block_cnt_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_BER_STATS_BLOCK_CNT_BASE && raddr <= ADDR_BER_STATS_BLOCK_CNT_HIGH)
            int_ber_stats_block_cnt_read <= 1'b1;
        else
            int_ber_stats_block_cnt_read <= 1'b0;
    end
end

// int_ber_stats_block_cnt_write
always @(posedge clk) begin
    if (ARESET)
        int_ber_stats_block_cnt_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_BER_STATS_BLOCK_CNT_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_BER_STATS_BLOCK_CNT_HIGH)
            int_ber_stats_block_cnt_write <= 1'b1;
        else if (WVALID)
            int_ber_stats_block_cnt_write <= 1'b0;
    end
end


endmodule


`timescale 1ns/1ps

module ber_stats_CNTRL_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk0,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire               clk1,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk0) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk1) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk0) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk1) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule

