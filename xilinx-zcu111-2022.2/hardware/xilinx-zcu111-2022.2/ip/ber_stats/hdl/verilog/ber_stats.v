// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ber_stats,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e-es1,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=28,HLS_SYN_DSP=0,HLS_SYN_FF=4000,HLS_SYN_LUT=3207}" *)

module ber_stats (
        ap_clk,
        ap_rst_n,
        src_data_V_V_TDATA,
        src_data_V_V_TVALID,
        src_data_V_V_TREADY,
        hard_data_TDATA,
        hard_data_TVALID,
        hard_data_TREADY,
        hard_data_TLAST,
        error_data_TDATA,
        error_data_TVALID,
        error_data_TREADY,
        error_data_TLAST,
        fe_status_V_V_TDATA,
        fe_status_V_V_TVALID,
        fe_status_V_V_TREADY,
        s_axi_CNTRL_AWVALID,
        s_axi_CNTRL_AWREADY,
        s_axi_CNTRL_AWADDR,
        s_axi_CNTRL_WVALID,
        s_axi_CNTRL_WREADY,
        s_axi_CNTRL_WDATA,
        s_axi_CNTRL_WSTRB,
        s_axi_CNTRL_ARVALID,
        s_axi_CNTRL_ARREADY,
        s_axi_CNTRL_ARADDR,
        s_axi_CNTRL_RVALID,
        s_axi_CNTRL_RREADY,
        s_axi_CNTRL_RDATA,
        s_axi_CNTRL_RRESP,
        s_axi_CNTRL_BVALID,
        s_axi_CNTRL_BREADY,
        s_axi_CNTRL_BRESP,
        interrupt,
        cntrl_aclk,
        ap_rst_n_cntrl_aclk
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_pp0_stage0 = 28'd64;
parameter    ap_ST_fsm_pp0_stage1 = 28'd128;
parameter    ap_ST_fsm_pp0_stage2 = 28'd256;
parameter    ap_ST_fsm_pp0_stage3 = 28'd512;
parameter    ap_ST_fsm_pp0_stage4 = 28'd1024;
parameter    ap_ST_fsm_pp0_stage5 = 28'd2048;
parameter    ap_ST_fsm_pp0_stage6 = 28'd4096;
parameter    ap_ST_fsm_pp0_stage7 = 28'd8192;
parameter    ap_ST_fsm_state33 = 28'd16384;
parameter    ap_ST_fsm_pp1_stage0 = 28'd32768;
parameter    ap_ST_fsm_state36 = 28'd65536;
parameter    ap_ST_fsm_pp2_stage0 = 28'd131072;
parameter    ap_ST_fsm_state39 = 28'd262144;
parameter    ap_ST_fsm_state40 = 28'd524288;
parameter    ap_ST_fsm_state41 = 28'd1048576;
parameter    ap_ST_fsm_state42 = 28'd2097152;
parameter    ap_ST_fsm_state43 = 28'd4194304;
parameter    ap_ST_fsm_state44 = 28'd8388608;
parameter    ap_ST_fsm_state45 = 28'd16777216;
parameter    ap_ST_fsm_state46 = 28'd33554432;
parameter    ap_ST_fsm_state47 = 28'd67108864;
parameter    ap_ST_fsm_state48 = 28'd134217728;
parameter    C_S_AXI_CNTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CNTRL_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CNTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [127:0] src_data_V_V_TDATA;
input   src_data_V_V_TVALID;
output   src_data_V_V_TREADY;
input  [127:0] hard_data_TDATA;
input   hard_data_TVALID;
output   hard_data_TREADY;
input  [0:0] hard_data_TLAST;
input  [127:0] error_data_TDATA;
input   error_data_TVALID;
output   error_data_TREADY;
input  [0:0] error_data_TLAST;
input  [31:0] fe_status_V_V_TDATA;
input   fe_status_V_V_TVALID;
output   fe_status_V_V_TREADY;
input   s_axi_CNTRL_AWVALID;
output   s_axi_CNTRL_AWREADY;
input  [C_S_AXI_CNTRL_ADDR_WIDTH - 1:0] s_axi_CNTRL_AWADDR;
input   s_axi_CNTRL_WVALID;
output   s_axi_CNTRL_WREADY;
input  [C_S_AXI_CNTRL_DATA_WIDTH - 1:0] s_axi_CNTRL_WDATA;
input  [C_S_AXI_CNTRL_WSTRB_WIDTH - 1:0] s_axi_CNTRL_WSTRB;
input   s_axi_CNTRL_ARVALID;
output   s_axi_CNTRL_ARREADY;
input  [C_S_AXI_CNTRL_ADDR_WIDTH - 1:0] s_axi_CNTRL_ARADDR;
output   s_axi_CNTRL_RVALID;
input   s_axi_CNTRL_RREADY;
output  [C_S_AXI_CNTRL_DATA_WIDTH - 1:0] s_axi_CNTRL_RDATA;
output  [1:0] s_axi_CNTRL_RRESP;
output   s_axi_CNTRL_BVALID;
input   s_axi_CNTRL_BREADY;
output  [1:0] s_axi_CNTRL_BRESP;
output   interrupt;
input   cntrl_aclk;
input   ap_rst_n_cntrl_aclk;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [4:0] k_address0;
reg    k_ce0;
wire   [31:0] k_q0;
wire   [4:0] n_address0;
reg    n_ce0;
wire   [31:0] n_q0;
wire   [4:0] mask_V_address0;
reg    mask_V_ce0;
wire   [127:0] mask_V_q0;
wire   [5:0] block_def_cfg_address0;
reg    block_def_cfg_ce0;
wire   [31:0] block_def_cfg_q0;
wire   [5:0] block_def_cnt_address0;
reg    block_def_cnt_ce0;
wire   [31:0] block_def_cnt_q0;
wire   [31:0] num_defs;
wire   [31:0] num_blocks;
reg   [4:0] ber_stats_raw_berr_address0;
reg    ber_stats_raw_berr_ce0;
reg    ber_stats_raw_berr_we0;
wire   [31:0] ber_stats_raw_berr_q0;
reg   [4:0] ber_stats_cor_berr_address0;
reg    ber_stats_cor_berr_ce0;
reg    ber_stats_cor_berr_we0;
wire   [31:0] ber_stats_cor_berr_q0;
reg   [4:0] ber_stats_cor_blerr_address0;
reg    ber_stats_cor_blerr_ce0;
reg    ber_stats_cor_blerr_we0;
wire   [31:0] ber_stats_cor_blerr_q0;
reg   [4:0] ber_stats_iter_cnt_address0;
reg    ber_stats_iter_cnt_ce0;
reg    ber_stats_iter_cnt_we0;
wire   [31:0] ber_stats_iter_cnt_q0;
reg   [4:0] ber_stats_block_cnt_address0;
reg    ber_stats_block_cnt_ce0;
reg    ber_stats_block_cnt_we0;
wire   [31:0] ber_stats_block_cnt_q0;
reg   [127:0] src_data_V_V_0_data_out;
wire    src_data_V_V_0_vld_in;
wire    src_data_V_V_0_vld_out;
wire    src_data_V_V_0_ack_in;
reg    src_data_V_V_0_ack_out;
reg   [127:0] src_data_V_V_0_payload_A;
reg   [127:0] src_data_V_V_0_payload_B;
reg    src_data_V_V_0_sel_rd;
reg    src_data_V_V_0_sel_wr;
wire    src_data_V_V_0_sel;
wire    src_data_V_V_0_load_A;
wire    src_data_V_V_0_load_B;
reg   [1:0] src_data_V_V_0_state;
wire    src_data_V_V_0_state_cmp_full;
reg   [127:0] hard_data_V_data_V_0_data_out;
wire    hard_data_V_data_V_0_vld_in;
wire    hard_data_V_data_V_0_vld_out;
wire    hard_data_V_data_V_0_ack_in;
reg    hard_data_V_data_V_0_ack_out;
reg   [127:0] hard_data_V_data_V_0_payload_A;
reg   [127:0] hard_data_V_data_V_0_payload_B;
reg    hard_data_V_data_V_0_sel_rd;
reg    hard_data_V_data_V_0_sel_wr;
wire    hard_data_V_data_V_0_sel;
wire    hard_data_V_data_V_0_load_A;
wire    hard_data_V_data_V_0_load_B;
reg   [1:0] hard_data_V_data_V_0_state;
wire    hard_data_V_data_V_0_state_cmp_full;
reg   [0:0] hard_data_V_last_V_0_data_out;
wire    hard_data_V_last_V_0_vld_in;
wire    hard_data_V_last_V_0_vld_out;
wire    hard_data_V_last_V_0_ack_in;
reg    hard_data_V_last_V_0_ack_out;
reg   [0:0] hard_data_V_last_V_0_payload_A;
reg   [0:0] hard_data_V_last_V_0_payload_B;
reg    hard_data_V_last_V_0_sel_rd;
reg    hard_data_V_last_V_0_sel_wr;
wire    hard_data_V_last_V_0_sel;
wire    hard_data_V_last_V_0_load_A;
wire    hard_data_V_last_V_0_load_B;
reg   [1:0] hard_data_V_last_V_0_state;
wire    hard_data_V_last_V_0_state_cmp_full;
reg   [127:0] error_data_V_data_V_0_data_out;
wire    error_data_V_data_V_0_vld_in;
wire    error_data_V_data_V_0_vld_out;
wire    error_data_V_data_V_0_ack_in;
reg    error_data_V_data_V_0_ack_out;
reg   [127:0] error_data_V_data_V_0_payload_A;
reg   [127:0] error_data_V_data_V_0_payload_B;
reg    error_data_V_data_V_0_sel_rd;
reg    error_data_V_data_V_0_sel_wr;
wire    error_data_V_data_V_0_sel;
wire    error_data_V_data_V_0_load_A;
wire    error_data_V_data_V_0_load_B;
reg   [1:0] error_data_V_data_V_0_state;
wire    error_data_V_data_V_0_state_cmp_full;
wire    error_data_V_last_V_0_vld_in;
reg    error_data_V_last_V_0_ack_out;
reg   [1:0] error_data_V_last_V_0_state;
reg   [31:0] fe_status_V_V_0_data_out;
wire    fe_status_V_V_0_vld_in;
wire    fe_status_V_V_0_vld_out;
wire    fe_status_V_V_0_ack_in;
reg    fe_status_V_V_0_ack_out;
reg   [31:0] fe_status_V_V_0_payload_A;
reg   [31:0] fe_status_V_V_0_payload_B;
reg    fe_status_V_V_0_sel_rd;
reg    fe_status_V_V_0_sel_wr;
wire    fe_status_V_V_0_sel;
wire    fe_status_V_V_0_load_A;
wire    fe_status_V_V_0_load_B;
reg   [1:0] fe_status_V_V_0_state;
wire    fe_status_V_V_0_state_cmp_full;
reg    src_data_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] tmp_17_reg_944;
reg    hard_data_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] hard_in_1_2_reg_416;
reg    error_data_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] tmp_19_reg_1274;
reg    fe_status_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state47;
reg    ap_rst_n_cntrl_aclk_inv;
reg   [0:0] hard_in_1_1_reg_368;
reg   [31:0] err_cnt_reg_380;
reg   [31:0] rerr_cnt_reg_392;
reg   [31:0] j_reg_404;
reg   [31:0] j1_reg_427;
wire   [7:0] grp_num_diff_fu_437_ap_return;
reg   [7:0] reg_518;
reg    ap_block_state11;
reg   [0:0] ap_reg_pp0_iter1_tmp_17_reg_944;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_state15;
reg   [0:0] ap_reg_pp0_iter2_tmp_17_reg_944;
reg   [31:0] num_blocks_read_reg_854;
reg   [31:0] num_defs_read_reg_859;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_522_p2;
wire   [0:0] tmp_s_fu_533_p2;
reg   [0:0] tmp_s_reg_877;
wire    ap_CS_fsm_state3;
reg   [31:0] def_cfg_reg_883;
reg   [31:0] def_cnt_reg_888;
wire   [31:0] def_cfg_1_fu_545_p3;
reg   [31:0] def_cfg_1_reg_893;
wire    ap_CS_fsm_state4;
wire   [31:0] def_cnt_1_fu_551_p3;
reg   [31:0] def_cnt_1_reg_898;
wire   [63:0] tmp_16_fu_567_p1;
reg   [63:0] tmp_16_reg_904;
wire    ap_CS_fsm_state5;
reg   [31:0] n_int_reg_928;
wire    ap_CS_fsm_state6;
reg   [31:0] k_int_reg_933;
reg   [127:0] mask_int_V_reg_939;
wire   [0:0] tmp_17_fu_573_p2;
reg   [0:0] ap_reg_pp0_iter3_tmp_17_reg_944;
wire   [31:0] i_fu_578_p2;
reg   [31:0] i_reg_948;
wire   [0:0] grp_fu_450_p3;
reg   [0:0] tmp_31_reg_954;
reg    ap_block_state8;
wire   [0:0] grp_fu_458_p3;
reg   [0:0] tmp_32_reg_959;
wire   [0:0] grp_fu_466_p3;
reg   [0:0] tmp_33_reg_964;
wire   [0:0] grp_fu_474_p3;
reg   [0:0] tmp_34_reg_969;
wire   [0:0] grp_fu_482_p3;
reg   [0:0] tmp_35_reg_974;
wire   [0:0] grp_fu_490_p3;
reg   [0:0] tmp_36_reg_979;
wire   [0:0] grp_fu_498_p3;
reg   [0:0] tmp_37_reg_984;
wire   [0:0] grp_fu_506_p3;
reg   [0:0] tmp_38_reg_989;
wire   [0:0] tmp_18_fu_584_p2;
reg   [0:0] tmp_18_reg_994;
reg   [0:0] tmp_last_V_reg_999;
reg    ap_block_state9;
reg   [0:0] ap_reg_pp0_iter1_tmp_last_V_reg_999;
reg   [0:0] ap_reg_pp0_iter2_tmp_last_V_reg_999;
reg   [127:0] tmp_V_reg_1004;
reg   [127:0] ap_reg_pp0_iter1_tmp_V_reg_1004;
reg   [0:0] tmp_39_reg_1009;
reg   [0:0] tmp_40_reg_1014;
reg   [0:0] tmp_41_reg_1019;
reg   [0:0] tmp_42_reg_1024;
reg   [0:0] tmp_43_reg_1029;
reg   [0:0] tmp_44_reg_1034;
reg   [0:0] tmp_45_reg_1039;
reg   [0:0] tmp_46_reg_1044;
wire   [127:0] r_V_fu_592_p3;
reg   [127:0] r_V_reg_1049;
reg   [0:0] tmp_47_reg_1054;
reg    ap_block_state10;
reg   [0:0] tmp_48_reg_1059;
reg   [0:0] tmp_49_reg_1064;
reg   [0:0] tmp_50_reg_1069;
reg   [0:0] tmp_51_reg_1074;
reg   [0:0] tmp_52_reg_1079;
reg   [0:0] tmp_53_reg_1084;
reg   [0:0] tmp_54_reg_1089;
reg   [0:0] tmp_55_reg_1094;
reg   [0:0] tmp_56_reg_1099;
reg   [0:0] tmp_57_reg_1104;
reg   [0:0] tmp_58_reg_1109;
reg   [0:0] tmp_59_reg_1114;
reg   [0:0] tmp_60_reg_1119;
reg   [0:0] tmp_61_reg_1124;
reg   [0:0] tmp_62_reg_1129;
reg   [0:0] tmp_63_reg_1134;
reg    ap_block_state12;
reg   [0:0] tmp_64_reg_1139;
reg   [0:0] tmp_65_reg_1144;
reg   [0:0] tmp_66_reg_1149;
reg   [0:0] tmp_67_reg_1154;
reg   [0:0] tmp_68_reg_1159;
reg   [0:0] tmp_69_reg_1164;
reg   [0:0] tmp_70_reg_1169;
reg   [0:0] tmp_71_reg_1174;
reg    ap_block_state13;
reg   [0:0] tmp_72_reg_1179;
reg   [0:0] tmp_73_reg_1184;
reg   [0:0] tmp_74_reg_1189;
reg   [0:0] tmp_75_reg_1194;
reg   [0:0] tmp_76_reg_1199;
reg   [0:0] tmp_77_reg_1204;
reg   [0:0] tmp_78_reg_1209;
reg   [0:0] tmp_79_reg_1214;
reg    ap_block_state14;
reg   [0:0] tmp_80_reg_1219;
reg   [0:0] tmp_81_reg_1224;
reg   [0:0] tmp_82_reg_1229;
reg   [0:0] tmp_83_reg_1234;
reg   [0:0] tmp_84_reg_1239;
reg   [0:0] tmp_85_reg_1244;
reg   [0:0] tmp_86_reg_1249;
wire   [127:0] p_2_fu_696_p2;
reg   [127:0] p_2_reg_1254;
wire   [31:0] err_cnt_1_fu_710_p2;
reg   [31:0] err_cnt_1_reg_1259;
wire   [31:0] rerr_cnt_1_fu_720_p2;
reg    ap_block_state35;
wire   [0:0] tmp_19_fu_726_p2;
reg    ap_block_state38;
wire   [31:0] j_1_fu_731_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [4:0] ber_stats_raw_berr_a_reg_1283;
wire    ap_CS_fsm_state39;
reg   [4:0] ber_stats_cor_berr_a_reg_1288;
reg   [31:0] ber_stats_raw_berr_l_reg_1293;
wire    ap_CS_fsm_state40;
reg   [31:0] ber_stats_cor_berr_l_reg_1298;
wire   [31:0] tmp_22_fu_737_p2;
reg   [31:0] tmp_22_reg_1303;
wire    ap_CS_fsm_state41;
wire   [31:0] tmp_23_fu_742_p2;
reg   [31:0] tmp_23_reg_1308;
wire   [0:0] tmp_24_fu_747_p2;
reg   [0:0] tmp_24_reg_1313;
wire    ap_CS_fsm_state42;
reg   [4:0] ber_stats_cor_blerr_s_reg_1317;
reg   [31:0] ber_stats_cor_blerr_1_reg_1322;
wire    ap_CS_fsm_state43;
wire   [31:0] tmp_25_fu_753_p2;
reg   [31:0] tmp_25_reg_1327;
wire    ap_CS_fsm_state44;
reg   [4:0] ber_stats_block_cnt_s_reg_1332;
wire    ap_CS_fsm_state45;
reg   [4:0] ber_stats_iter_cnt_a_reg_1337;
wire   [31:0] b_i_2_fu_758_p2;
reg   [31:0] b_i_2_reg_1342;
wire   [7:0] def_i_1_fu_764_p2;
reg   [7:0] def_i_1_reg_1348;
reg   [31:0] ber_stats_block_cnt_1_reg_1354;
wire    ap_CS_fsm_state46;
reg   [31:0] ber_stats_iter_cnt_l_reg_1359;
wire   [0:0] tmp_28_fu_770_p2;
reg   [0:0] tmp_28_reg_1364;
wire   [31:0] total_blocks_2_fu_774_p2;
reg   [31:0] total_blocks_2_reg_1371;
wire   [0:0] tmp_30_fu_782_p2;
reg   [0:0] tmp_30_reg_1376;
wire   [31:0] tmp_26_fu_787_p2;
reg   [31:0] tmp_26_reg_1381;
wire   [31:0] tmp_27_fu_806_p2;
reg   [31:0] tmp_27_reg_1386;
wire   [7:0] def_i_2_fu_817_p3;
reg   [7:0] def_i_2_reg_1391;
wire   [31:0] b_i_1_fu_824_p3;
reg   [31:0] b_i_1_reg_1396;
wire   [31:0] total_blocks_1_fu_830_p3;
reg   [31:0] total_blocks_1_reg_1401;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_CS_fsm_state33;
reg   [0:0] hard_in_1_2_phi_fu_419_p4;
wire    ap_CS_fsm_state36;
wire    grp_num_diff_fu_437_ap_start;
wire    grp_num_diff_fu_437_ap_done;
wire    grp_num_diff_fu_437_ap_idle;
wire    grp_num_diff_fu_437_ap_ready;
reg    grp_num_diff_fu_437_ap_ce;
reg   [127:0] grp_num_diff_fu_437_in1_V;
reg   [127:0] grp_num_diff_fu_437_in2_V;
reg    ap_block_state9_ignore_call95;
reg    ap_block_state10_ignore_call95;
reg    ap_block_state11_ignore_call95;
reg    ap_block_state12_ignore_call95;
reg    ap_block_state13_ignore_call95;
reg    ap_block_state14_ignore_call95;
reg    ap_block_state15_ignore_call95;
reg    ap_block_state8_ignore_call95;
reg   [7:0] def_i_reg_332;
wire    ap_CS_fsm_state48;
reg   [31:0] b_i_reg_344;
reg   [31:0] total_blocks_reg_356;
reg   [31:0] err_cnt_phi_fu_384_p4;
reg   [31:0] j_phi_fu_408_p4;
reg    ap_reg_grp_num_diff_fu_437_ap_start;
wire   [127:0] hard_bits_V_fu_598_p2;
wire   [63:0] tmp_15_fu_527_p1;
reg   [31:0] def_cnt_2_fu_160;
reg   [31:0] def_cfg_2_fu_164;
reg   [127:0] p_0181_s_fu_168;
wire   [127:0] error_bits_comp_V_7_fu_618_p66;
wire   [63:0] tmp_3_fu_608_p4;
wire   [31:0] err_cnt_1_trunc_ext_fu_706_p1;
wire   [31:0] rerr_cnt_1_trunc_ext_fu_716_p1;
wire   [31:0] tmp_29_fu_779_p1;
wire   [5:0] p_Result_s_fu_792_p4;
wire   [31:0] p_Result_s_30_fu_802_p1;
wire   [7:0] p_s_fu_811_p3;
reg   [27:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 src_data_V_V_0_sel_rd = 1'b0;
#0 src_data_V_V_0_sel_wr = 1'b0;
#0 src_data_V_V_0_state = 2'd0;
#0 hard_data_V_data_V_0_sel_rd = 1'b0;
#0 hard_data_V_data_V_0_sel_wr = 1'b0;
#0 hard_data_V_data_V_0_state = 2'd0;
#0 hard_data_V_last_V_0_sel_rd = 1'b0;
#0 hard_data_V_last_V_0_sel_wr = 1'b0;
#0 hard_data_V_last_V_0_state = 2'd0;
#0 error_data_V_data_V_0_sel_rd = 1'b0;
#0 error_data_V_data_V_0_sel_wr = 1'b0;
#0 error_data_V_data_V_0_state = 2'd0;
#0 error_data_V_last_V_0_state = 2'd0;
#0 fe_status_V_V_0_sel_rd = 1'b0;
#0 fe_status_V_V_0_sel_wr = 1'b0;
#0 fe_status_V_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_reg_grp_num_diff_fu_437_ap_start = 1'b0;
end

ber_stats_CNTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CNTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CNTRL_DATA_WIDTH ))
ber_stats_CNTRL_s_axi_U(
    .AWVALID(s_axi_CNTRL_AWVALID),
    .AWREADY(s_axi_CNTRL_AWREADY),
    .AWADDR(s_axi_CNTRL_AWADDR),
    .WVALID(s_axi_CNTRL_WVALID),
    .WREADY(s_axi_CNTRL_WREADY),
    .WDATA(s_axi_CNTRL_WDATA),
    .WSTRB(s_axi_CNTRL_WSTRB),
    .ARVALID(s_axi_CNTRL_ARVALID),
    .ARREADY(s_axi_CNTRL_ARREADY),
    .ARADDR(s_axi_CNTRL_ARADDR),
    .RVALID(s_axi_CNTRL_RVALID),
    .RREADY(s_axi_CNTRL_RREADY),
    .RDATA(s_axi_CNTRL_RDATA),
    .RRESP(s_axi_CNTRL_RRESP),
    .BVALID(s_axi_CNTRL_BVALID),
    .BREADY(s_axi_CNTRL_BREADY),
    .BRESP(s_axi_CNTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .k_address0(k_address0),
    .k_ce0(k_ce0),
    .k_q0(k_q0),
    .n_address0(n_address0),
    .n_ce0(n_ce0),
    .n_q0(n_q0),
    .mask_V_address0(mask_V_address0),
    .mask_V_ce0(mask_V_ce0),
    .mask_V_q0(mask_V_q0),
    .block_def_cfg_address0(block_def_cfg_address0),
    .block_def_cfg_ce0(block_def_cfg_ce0),
    .block_def_cfg_q0(block_def_cfg_q0),
    .block_def_cnt_address0(block_def_cnt_address0),
    .block_def_cnt_ce0(block_def_cnt_ce0),
    .block_def_cnt_q0(block_def_cnt_q0),
    .num_defs(num_defs),
    .num_blocks(num_blocks),
    .ber_stats_raw_berr_address0(ber_stats_raw_berr_address0),
    .ber_stats_raw_berr_ce0(ber_stats_raw_berr_ce0),
    .ber_stats_raw_berr_we0(ber_stats_raw_berr_we0),
    .ber_stats_raw_berr_d0(tmp_22_reg_1303),
    .ber_stats_raw_berr_q0(ber_stats_raw_berr_q0),
    .ber_stats_cor_berr_address0(ber_stats_cor_berr_address0),
    .ber_stats_cor_berr_ce0(ber_stats_cor_berr_ce0),
    .ber_stats_cor_berr_we0(ber_stats_cor_berr_we0),
    .ber_stats_cor_berr_d0(tmp_23_reg_1308),
    .ber_stats_cor_berr_q0(ber_stats_cor_berr_q0),
    .ber_stats_cor_blerr_address0(ber_stats_cor_blerr_address0),
    .ber_stats_cor_blerr_ce0(ber_stats_cor_blerr_ce0),
    .ber_stats_cor_blerr_we0(ber_stats_cor_blerr_we0),
    .ber_stats_cor_blerr_d0(tmp_25_reg_1327),
    .ber_stats_cor_blerr_q0(ber_stats_cor_blerr_q0),
    .ber_stats_iter_cnt_address0(ber_stats_iter_cnt_address0),
    .ber_stats_iter_cnt_ce0(ber_stats_iter_cnt_ce0),
    .ber_stats_iter_cnt_we0(ber_stats_iter_cnt_we0),
    .ber_stats_iter_cnt_d0(tmp_27_reg_1386),
    .ber_stats_iter_cnt_q0(ber_stats_iter_cnt_q0),
    .ber_stats_block_cnt_address0(ber_stats_block_cnt_address0),
    .ber_stats_block_cnt_ce0(ber_stats_block_cnt_ce0),
    .ber_stats_block_cnt_we0(ber_stats_block_cnt_we0),
    .ber_stats_block_cnt_d0(tmp_26_reg_1381),
    .ber_stats_block_cnt_q0(ber_stats_block_cnt_q0),
    .clk(cntrl_aclk),
    .rst(ap_rst_n_cntrl_aclk_inv)
);

num_diff grp_num_diff_fu_437(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_num_diff_fu_437_ap_start),
    .ap_done(grp_num_diff_fu_437_ap_done),
    .ap_idle(grp_num_diff_fu_437_ap_idle),
    .ap_ready(grp_num_diff_fu_437_ap_ready),
    .ap_ce(grp_num_diff_fu_437_ap_ce),
    .in1_V(grp_num_diff_fu_437_in1_V),
    .in2_V(grp_num_diff_fu_437_in2_V),
    .ap_return(grp_num_diff_fu_437_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15)) & (1'd0 == tmp_17_fu_573_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14)) & ~(1'd0 == tmp_17_reg_944))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_pp0_stage7) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14)) & (1'd0 == tmp_17_reg_944)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage7) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8))) | ((1'b1 == ap_CS_fsm_pp0_stage7) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14))))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state35)) & (1'd1 == hard_in_1_2_phi_fu_419_p4))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state35)) & ~(1'd1 == hard_in_1_2_phi_fu_419_p4))) begin
            ap_enable_reg_pp1_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state33) | ((1'b1 == ap_CS_fsm_pp1_stage0) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state35)) & (1'd1 == hard_in_1_2_phi_fu_419_p4)))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_block_state38)) & (1'd0 == tmp_19_fu_726_p2))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state36)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_block_state38)) & ~(1'd0 == tmp_19_fu_726_p2))) begin
            ap_enable_reg_pp2_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state36) | ((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_block_state38)) & (1'd0 == tmp_19_fu_726_p2)))) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_num_diff_fu_437_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8))) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_tmp_17_reg_944) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state12))))) begin
            ap_reg_grp_num_diff_fu_437_ap_start <= 1'b1;
        end else if ((1'b1 == grp_num_diff_fu_437_ap_ready)) begin
            ap_reg_grp_num_diff_fu_437_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        error_data_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == error_data_V_data_V_0_ack_out) & (1'b1 == error_data_V_data_V_0_vld_out))) begin
            error_data_V_data_V_0_sel_rd <= ~error_data_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        error_data_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == error_data_V_data_V_0_vld_in) & (1'b1 == error_data_V_data_V_0_ack_in))) begin
            error_data_V_data_V_0_sel_wr <= ~error_data_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        error_data_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == error_data_V_data_V_0_vld_in) & (1'b1 == error_data_V_data_V_0_ack_out) & (2'd3 == error_data_V_data_V_0_state)) | ((1'b0 == error_data_V_data_V_0_vld_in) & (2'd2 == error_data_V_data_V_0_state)))) begin
            error_data_V_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == error_data_V_data_V_0_vld_in) & (1'b0 == error_data_V_data_V_0_ack_out) & (2'd3 == error_data_V_data_V_0_state)) | ((1'b0 == error_data_V_data_V_0_ack_out) & (2'd1 == error_data_V_data_V_0_state)))) begin
            error_data_V_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == error_data_V_data_V_0_vld_in) & (2'd2 == error_data_V_data_V_0_state)) | ((1'b1 == error_data_V_data_V_0_ack_out) & (2'd1 == error_data_V_data_V_0_state)) | ((2'd3 == error_data_V_data_V_0_state) & ~((1'b1 == error_data_V_data_V_0_vld_in) & (1'b0 == error_data_V_data_V_0_ack_out)) & ~((1'b0 == error_data_V_data_V_0_vld_in) & (1'b1 == error_data_V_data_V_0_ack_out))))) begin
            error_data_V_data_V_0_state <= 2'd3;
        end else begin
            error_data_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        error_data_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == error_data_V_last_V_0_vld_in) & (1'b1 == error_data_V_last_V_0_ack_out) & (2'd3 == error_data_V_last_V_0_state)) | ((1'b0 == error_data_V_last_V_0_vld_in) & (2'd2 == error_data_V_last_V_0_state)))) begin
            error_data_V_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == error_data_V_last_V_0_vld_in) & (1'b0 == error_data_V_last_V_0_ack_out) & (2'd3 == error_data_V_last_V_0_state)) | ((1'b0 == error_data_V_last_V_0_ack_out) & (2'd1 == error_data_V_last_V_0_state)))) begin
            error_data_V_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == error_data_V_last_V_0_vld_in) & (2'd2 == error_data_V_last_V_0_state)) | ((1'b1 == error_data_V_last_V_0_ack_out) & (2'd1 == error_data_V_last_V_0_state)) | ((2'd3 == error_data_V_last_V_0_state) & ~((1'b1 == error_data_V_last_V_0_vld_in) & (1'b0 == error_data_V_last_V_0_ack_out)) & ~((1'b0 == error_data_V_last_V_0_vld_in) & (1'b1 == error_data_V_last_V_0_ack_out))))) begin
            error_data_V_last_V_0_state <= 2'd3;
        end else begin
            error_data_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fe_status_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == fe_status_V_V_0_ack_out) & (1'b1 == fe_status_V_V_0_vld_out))) begin
            fe_status_V_V_0_sel_rd <= ~fe_status_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fe_status_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == fe_status_V_V_0_vld_in) & (1'b1 == fe_status_V_V_0_ack_in))) begin
            fe_status_V_V_0_sel_wr <= ~fe_status_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fe_status_V_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == fe_status_V_V_0_vld_in) & (1'b1 == fe_status_V_V_0_ack_out) & (2'd3 == fe_status_V_V_0_state)) | ((1'b0 == fe_status_V_V_0_vld_in) & (2'd2 == fe_status_V_V_0_state)))) begin
            fe_status_V_V_0_state <= 2'd2;
        end else if ((((1'b1 == fe_status_V_V_0_vld_in) & (1'b0 == fe_status_V_V_0_ack_out) & (2'd3 == fe_status_V_V_0_state)) | ((1'b0 == fe_status_V_V_0_ack_out) & (2'd1 == fe_status_V_V_0_state)))) begin
            fe_status_V_V_0_state <= 2'd1;
        end else if ((((1'b1 == fe_status_V_V_0_vld_in) & (2'd2 == fe_status_V_V_0_state)) | ((1'b1 == fe_status_V_V_0_ack_out) & (2'd1 == fe_status_V_V_0_state)) | ((2'd3 == fe_status_V_V_0_state) & ~((1'b1 == fe_status_V_V_0_vld_in) & (1'b0 == fe_status_V_V_0_ack_out)) & ~((1'b0 == fe_status_V_V_0_vld_in) & (1'b1 == fe_status_V_V_0_ack_out))))) begin
            fe_status_V_V_0_state <= 2'd3;
        end else begin
            fe_status_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == hard_data_V_data_V_0_ack_out) & (1'b1 == hard_data_V_data_V_0_vld_out))) begin
            hard_data_V_data_V_0_sel_rd <= ~hard_data_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == hard_data_V_data_V_0_vld_in) & (1'b1 == hard_data_V_data_V_0_ack_in))) begin
            hard_data_V_data_V_0_sel_wr <= ~hard_data_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == hard_data_V_data_V_0_vld_in) & (1'b1 == hard_data_V_data_V_0_ack_out) & (2'd3 == hard_data_V_data_V_0_state)) | ((1'b0 == hard_data_V_data_V_0_vld_in) & (2'd2 == hard_data_V_data_V_0_state)))) begin
            hard_data_V_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == hard_data_V_data_V_0_vld_in) & (1'b0 == hard_data_V_data_V_0_ack_out) & (2'd3 == hard_data_V_data_V_0_state)) | ((1'b0 == hard_data_V_data_V_0_ack_out) & (2'd1 == hard_data_V_data_V_0_state)))) begin
            hard_data_V_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == hard_data_V_data_V_0_vld_in) & (2'd2 == hard_data_V_data_V_0_state)) | ((1'b1 == hard_data_V_data_V_0_ack_out) & (2'd1 == hard_data_V_data_V_0_state)) | ((2'd3 == hard_data_V_data_V_0_state) & ~((1'b1 == hard_data_V_data_V_0_vld_in) & (1'b0 == hard_data_V_data_V_0_ack_out)) & ~((1'b0 == hard_data_V_data_V_0_vld_in) & (1'b1 == hard_data_V_data_V_0_ack_out))))) begin
            hard_data_V_data_V_0_state <= 2'd3;
        end else begin
            hard_data_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == hard_data_V_last_V_0_ack_out) & (1'b1 == hard_data_V_last_V_0_vld_out))) begin
            hard_data_V_last_V_0_sel_rd <= ~hard_data_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == hard_data_V_last_V_0_vld_in) & (1'b1 == hard_data_V_last_V_0_ack_in))) begin
            hard_data_V_last_V_0_sel_wr <= ~hard_data_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == hard_data_V_last_V_0_vld_in) & (1'b1 == hard_data_V_last_V_0_ack_out) & (2'd3 == hard_data_V_last_V_0_state)) | ((1'b0 == hard_data_V_last_V_0_vld_in) & (2'd2 == hard_data_V_last_V_0_state)))) begin
            hard_data_V_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == hard_data_V_last_V_0_vld_in) & (1'b0 == hard_data_V_last_V_0_ack_out) & (2'd3 == hard_data_V_last_V_0_state)) | ((1'b0 == hard_data_V_last_V_0_ack_out) & (2'd1 == hard_data_V_last_V_0_state)))) begin
            hard_data_V_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == hard_data_V_last_V_0_vld_in) & (2'd2 == hard_data_V_last_V_0_state)) | ((1'b1 == hard_data_V_last_V_0_ack_out) & (2'd1 == hard_data_V_last_V_0_state)) | ((2'd3 == hard_data_V_last_V_0_state) & ~((1'b1 == hard_data_V_last_V_0_vld_in) & (1'b0 == hard_data_V_last_V_0_ack_out)) & ~((1'b0 == hard_data_V_last_V_0_vld_in) & (1'b1 == hard_data_V_last_V_0_ack_out))))) begin
            hard_data_V_last_V_0_state <= 2'd3;
        end else begin
            hard_data_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_data_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == src_data_V_V_0_ack_out) & (1'b1 == src_data_V_V_0_vld_out))) begin
            src_data_V_V_0_sel_rd <= ~src_data_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_data_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == src_data_V_V_0_vld_in) & (1'b1 == src_data_V_V_0_ack_in))) begin
            src_data_V_V_0_sel_wr <= ~src_data_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_data_V_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == src_data_V_V_0_vld_in) & (1'b1 == src_data_V_V_0_ack_out) & (src_data_V_V_0_state == 2'd3)) | ((1'b0 == src_data_V_V_0_vld_in) & (src_data_V_V_0_state == 2'd2)))) begin
            src_data_V_V_0_state <= 2'd2;
        end else if ((((1'b1 == src_data_V_V_0_vld_in) & (1'b0 == src_data_V_V_0_ack_out) & (src_data_V_V_0_state == 2'd3)) | ((1'b0 == src_data_V_V_0_ack_out) & (src_data_V_V_0_state == 2'd1)))) begin
            src_data_V_V_0_state <= 2'd1;
        end else if ((((1'b1 == src_data_V_V_0_vld_in) & (src_data_V_V_0_state == 2'd2)) | ((1'b1 == src_data_V_V_0_ack_out) & (src_data_V_V_0_state == 2'd1)) | ((src_data_V_V_0_state == 2'd3) & ~((1'b1 == src_data_V_V_0_vld_in) & (1'b0 == src_data_V_V_0_ack_out)) & ~((1'b0 == src_data_V_V_0_vld_in) & (1'b1 == src_data_V_V_0_ack_out))))) begin
            src_data_V_V_0_state <= 2'd3;
        end else begin
            src_data_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        b_i_reg_344 <= b_i_1_reg_1396;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        b_i_reg_344 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        def_i_reg_332 <= def_i_2_reg_1391;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        def_i_reg_332 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'd1 == ap_reg_pp0_iter2_tmp_17_reg_944) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state12)) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        err_cnt_reg_380 <= err_cnt_1_reg_1259;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        err_cnt_reg_380 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter3) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8)) & (1'd1 == ap_reg_pp0_iter3_tmp_17_reg_944))) begin
        hard_in_1_1_reg_368 <= ap_reg_pp0_iter2_tmp_last_V_reg_999;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        hard_in_1_1_reg_368 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        hard_in_1_2_reg_416 <= hard_in_1_1_reg_368;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == hard_in_1_2_reg_416) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state35)))) begin
        hard_in_1_2_reg_416 <= hard_data_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        j1_reg_427 <= j_reg_404;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_block_state38)) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd1 == tmp_19_fu_726_p2))) begin
        j1_reg_427 <= j_1_fu_731_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15)))) begin
        j_reg_404 <= i_reg_948;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_404 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter3) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8)) & (1'd1 == ap_reg_pp0_iter3_tmp_17_reg_944))) begin
        rerr_cnt_reg_392 <= rerr_cnt_1_fu_720_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        rerr_cnt_reg_392 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        total_blocks_reg_356 <= total_blocks_1_reg_1401;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        total_blocks_reg_356 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15)))) begin
        ap_reg_pp0_iter1_tmp_17_reg_944 <= tmp_17_reg_944;
        ap_reg_pp0_iter2_tmp_17_reg_944 <= ap_reg_pp0_iter1_tmp_17_reg_944;
        ap_reg_pp0_iter3_tmp_17_reg_944 <= ap_reg_pp0_iter2_tmp_17_reg_944;
        tmp_17_reg_944 <= tmp_17_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9)))) begin
        ap_reg_pp0_iter1_tmp_V_reg_1004 <= tmp_V_reg_1004;
        ap_reg_pp0_iter1_tmp_last_V_reg_999 <= tmp_last_V_reg_999;
        ap_reg_pp0_iter2_tmp_last_V_reg_999 <= ap_reg_pp0_iter1_tmp_last_V_reg_999;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (fe_status_V_V_0_vld_out == 1'b1))) begin
        b_i_1_reg_1396 <= b_i_1_fu_824_p3;
        def_i_2_reg_1391 <= def_i_2_fu_817_p3;
        tmp_26_reg_1381 <= tmp_26_fu_787_p2;
        tmp_27_reg_1386 <= tmp_27_fu_806_p2;
        total_blocks_1_reg_1401 <= total_blocks_1_fu_830_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        b_i_2_reg_1342 <= b_i_2_fu_758_p2;
        ber_stats_block_cnt_s_reg_1332 <= tmp_16_reg_904;
        ber_stats_iter_cnt_a_reg_1337 <= tmp_16_reg_904;
        def_i_1_reg_1348 <= def_i_1_fu_764_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        ber_stats_block_cnt_1_reg_1354 <= ber_stats_block_cnt_q0;
        ber_stats_iter_cnt_l_reg_1359 <= ber_stats_iter_cnt_q0;
        tmp_28_reg_1364 <= tmp_28_fu_770_p2;
        tmp_30_reg_1376 <= tmp_30_fu_782_p2;
        total_blocks_2_reg_1371 <= total_blocks_2_fu_774_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        ber_stats_cor_berr_a_reg_1288 <= tmp_16_reg_904;
        ber_stats_raw_berr_a_reg_1283 <= tmp_16_reg_904;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        ber_stats_cor_berr_l_reg_1298 <= ber_stats_cor_berr_q0;
        ber_stats_raw_berr_l_reg_1293 <= ber_stats_raw_berr_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ber_stats_cor_blerr_1_reg_1322 <= ber_stats_cor_blerr_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (1'd0 == tmp_24_fu_747_p2))) begin
        ber_stats_cor_blerr_s_reg_1317 <= tmp_16_reg_904;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        def_cfg_1_reg_893 <= def_cfg_1_fu_545_p3;
        def_cfg_2_fu_164 <= def_cfg_1_fu_545_p3;
        def_cnt_1_reg_898 <= def_cnt_1_fu_551_p3;
        def_cnt_2_fu_160 <= def_cnt_1_fu_551_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        def_cfg_reg_883 <= block_def_cfg_q0;
        def_cnt_reg_888 <= block_def_cnt_q0;
        tmp_s_reg_877 <= tmp_s_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_tmp_17_reg_944) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state12)))) begin
        err_cnt_1_reg_1259 <= err_cnt_1_fu_710_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == error_data_V_data_V_0_load_A)) begin
        error_data_V_data_V_0_payload_A <= error_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == error_data_V_data_V_0_load_B)) begin
        error_data_V_data_V_0_payload_B <= error_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == fe_status_V_V_0_load_A)) begin
        fe_status_V_V_0_payload_A <= fe_status_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == fe_status_V_V_0_load_B)) begin
        fe_status_V_V_0_payload_B <= fe_status_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == hard_data_V_data_V_0_load_A)) begin
        hard_data_V_data_V_0_payload_A <= hard_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == hard_data_V_data_V_0_load_B)) begin
        hard_data_V_data_V_0_payload_B <= hard_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == hard_data_V_last_V_0_load_A)) begin
        hard_data_V_last_V_0_payload_A <= hard_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == hard_data_V_last_V_0_load_B)) begin
        hard_data_V_last_V_0_payload_B <= hard_data_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15)) & (1'd1 == tmp_17_fu_573_p2))) begin
        i_reg_948 <= i_fu_578_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_int_reg_933 <= k_q0;
        mask_int_V_reg_939 <= mask_V_q0;
        n_int_reg_928 <= n_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        num_blocks_read_reg_854 <= num_blocks;
        num_defs_read_reg_859 <= num_defs;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15)))) begin
        p_0181_s_fu_168 <= error_bits_comp_V_7_fu_618_p66;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15)))) begin
        p_2_reg_1254 <= p_2_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'd1 == tmp_17_reg_944) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9)))) begin
        r_V_reg_1049 <= r_V_fu_592_p3;
        tmp_V_reg_1004 <= src_data_V_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state11)) & (1'd1 == ap_reg_pp0_iter1_tmp_17_reg_944)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter3) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15)) & (1'd1 == ap_reg_pp0_iter2_tmp_17_reg_944)))) begin
        reg_518 <= grp_num_diff_fu_437_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_data_V_V_0_load_A)) begin
        src_data_V_V_0_payload_A <= src_data_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == src_data_V_V_0_load_B)) begin
        src_data_V_V_0_payload_B <= src_data_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_16_reg_904[31 : 0] <= tmp_16_fu_567_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8)))) begin
        tmp_18_reg_994 <= tmp_18_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_block_state38)))) begin
        tmp_19_reg_1274 <= tmp_19_fu_726_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_22_reg_1303 <= tmp_22_fu_737_p2;
        tmp_23_reg_1308 <= tmp_23_fu_742_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_24_reg_1313 <= tmp_24_fu_747_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        tmp_25_reg_1327 <= tmp_25_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8)))) begin
        tmp_31_reg_954 <= error_data_V_data_V_0_data_out[32'd7];
        tmp_32_reg_959 <= error_data_V_data_V_0_data_out[32'd15];
        tmp_33_reg_964 <= error_data_V_data_V_0_data_out[32'd23];
        tmp_34_reg_969 <= error_data_V_data_V_0_data_out[32'd31];
        tmp_35_reg_974 <= error_data_V_data_V_0_data_out[32'd39];
        tmp_36_reg_979 <= error_data_V_data_V_0_data_out[32'd47];
        tmp_37_reg_984 <= error_data_V_data_V_0_data_out[32'd55];
        tmp_38_reg_989 <= error_data_V_data_V_0_data_out[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9)))) begin
        tmp_39_reg_1009 <= error_data_V_data_V_0_data_out[32'd7];
        tmp_40_reg_1014 <= error_data_V_data_V_0_data_out[32'd15];
        tmp_41_reg_1019 <= error_data_V_data_V_0_data_out[32'd23];
        tmp_42_reg_1024 <= error_data_V_data_V_0_data_out[32'd31];
        tmp_43_reg_1029 <= error_data_V_data_V_0_data_out[32'd39];
        tmp_44_reg_1034 <= error_data_V_data_V_0_data_out[32'd47];
        tmp_45_reg_1039 <= error_data_V_data_V_0_data_out[32'd55];
        tmp_46_reg_1044 <= error_data_V_data_V_0_data_out[32'd63];
        tmp_last_V_reg_999 <= hard_data_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage3) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state10)))) begin
        tmp_47_reg_1054 <= error_data_V_data_V_0_data_out[32'd7];
        tmp_48_reg_1059 <= error_data_V_data_V_0_data_out[32'd15];
        tmp_49_reg_1064 <= error_data_V_data_V_0_data_out[32'd23];
        tmp_50_reg_1069 <= error_data_V_data_V_0_data_out[32'd31];
        tmp_51_reg_1074 <= error_data_V_data_V_0_data_out[32'd39];
        tmp_52_reg_1079 <= error_data_V_data_V_0_data_out[32'd47];
        tmp_53_reg_1084 <= error_data_V_data_V_0_data_out[32'd55];
        tmp_54_reg_1089 <= error_data_V_data_V_0_data_out[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage4) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state11)))) begin
        tmp_55_reg_1094 <= error_data_V_data_V_0_data_out[32'd7];
        tmp_56_reg_1099 <= error_data_V_data_V_0_data_out[32'd15];
        tmp_57_reg_1104 <= error_data_V_data_V_0_data_out[32'd23];
        tmp_58_reg_1109 <= error_data_V_data_V_0_data_out[32'd31];
        tmp_59_reg_1114 <= error_data_V_data_V_0_data_out[32'd39];
        tmp_60_reg_1119 <= error_data_V_data_V_0_data_out[32'd47];
        tmp_61_reg_1124 <= error_data_V_data_V_0_data_out[32'd55];
        tmp_62_reg_1129 <= error_data_V_data_V_0_data_out[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage5) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state12)))) begin
        tmp_63_reg_1134 <= error_data_V_data_V_0_data_out[32'd7];
        tmp_64_reg_1139 <= error_data_V_data_V_0_data_out[32'd15];
        tmp_65_reg_1144 <= error_data_V_data_V_0_data_out[32'd23];
        tmp_66_reg_1149 <= error_data_V_data_V_0_data_out[32'd31];
        tmp_67_reg_1154 <= error_data_V_data_V_0_data_out[32'd39];
        tmp_68_reg_1159 <= error_data_V_data_V_0_data_out[32'd47];
        tmp_69_reg_1164 <= error_data_V_data_V_0_data_out[32'd55];
        tmp_70_reg_1169 <= error_data_V_data_V_0_data_out[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage6) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state13)))) begin
        tmp_71_reg_1174 <= error_data_V_data_V_0_data_out[32'd7];
        tmp_72_reg_1179 <= error_data_V_data_V_0_data_out[32'd15];
        tmp_73_reg_1184 <= error_data_V_data_V_0_data_out[32'd23];
        tmp_74_reg_1189 <= error_data_V_data_V_0_data_out[32'd31];
        tmp_75_reg_1194 <= error_data_V_data_V_0_data_out[32'd39];
        tmp_76_reg_1199 <= error_data_V_data_V_0_data_out[32'd47];
        tmp_77_reg_1204 <= error_data_V_data_V_0_data_out[32'd55];
        tmp_78_reg_1209 <= error_data_V_data_V_0_data_out[32'd63];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage7) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14)))) begin
        tmp_79_reg_1214 <= error_data_V_data_V_0_data_out[32'd7];
        tmp_80_reg_1219 <= error_data_V_data_V_0_data_out[32'd15];
        tmp_81_reg_1224 <= error_data_V_data_V_0_data_out[32'd23];
        tmp_82_reg_1229 <= error_data_V_data_V_0_data_out[32'd31];
        tmp_83_reg_1234 <= error_data_V_data_V_0_data_out[32'd39];
        tmp_84_reg_1239 <= error_data_V_data_V_0_data_out[32'd47];
        tmp_85_reg_1244 <= error_data_V_data_V_0_data_out[32'd55];
        tmp_86_reg_1249 <= error_data_V_data_V_0_data_out[32'd63];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_522_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp2_iter0) & (1'b0 == ap_enable_reg_pp2_iter1))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_522_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ber_stats_block_cnt_address0 = ber_stats_block_cnt_s_reg_1332;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        ber_stats_block_cnt_address0 = tmp_16_reg_904;
    end else begin
        ber_stats_block_cnt_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state48))) begin
        ber_stats_block_cnt_ce0 = 1'b1;
    end else begin
        ber_stats_block_cnt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ber_stats_block_cnt_we0 = 1'b1;
    end else begin
        ber_stats_block_cnt_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ber_stats_cor_berr_address0 = ber_stats_cor_berr_a_reg_1288;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        ber_stats_cor_berr_address0 = tmp_16_reg_904;
    end else begin
        ber_stats_cor_berr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state42))) begin
        ber_stats_cor_berr_ce0 = 1'b1;
    end else begin
        ber_stats_cor_berr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ber_stats_cor_berr_we0 = 1'b1;
    end else begin
        ber_stats_cor_berr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        ber_stats_cor_blerr_address0 = ber_stats_cor_blerr_s_reg_1317;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ber_stats_cor_blerr_address0 = tmp_16_reg_904;
    end else begin
        ber_stats_cor_blerr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state45))) begin
        ber_stats_cor_blerr_ce0 = 1'b1;
    end else begin
        ber_stats_cor_blerr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (1'd0 == tmp_24_reg_1313))) begin
        ber_stats_cor_blerr_we0 = 1'b1;
    end else begin
        ber_stats_cor_blerr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ber_stats_iter_cnt_address0 = ber_stats_iter_cnt_a_reg_1337;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        ber_stats_iter_cnt_address0 = tmp_16_reg_904;
    end else begin
        ber_stats_iter_cnt_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state48))) begin
        ber_stats_iter_cnt_ce0 = 1'b1;
    end else begin
        ber_stats_iter_cnt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        ber_stats_iter_cnt_we0 = 1'b1;
    end else begin
        ber_stats_iter_cnt_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ber_stats_raw_berr_address0 = ber_stats_raw_berr_a_reg_1283;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        ber_stats_raw_berr_address0 = tmp_16_reg_904;
    end else begin
        ber_stats_raw_berr_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state42))) begin
        ber_stats_raw_berr_ce0 = 1'b1;
    end else begin
        ber_stats_raw_berr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ber_stats_raw_berr_we0 = 1'b1;
    end else begin
        ber_stats_raw_berr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        block_def_cfg_ce0 = 1'b1;
    end else begin
        block_def_cfg_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        block_def_cnt_ce0 = 1'b1;
    end else begin
        block_def_cnt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'd1 == ap_reg_pp0_iter2_tmp_17_reg_944) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        err_cnt_phi_fu_384_p4 = err_cnt_1_reg_1259;
    end else begin
        err_cnt_phi_fu_384_p4 = err_cnt_reg_380;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_19_reg_1274)))) begin
        error_data_TDATA_blk_n = error_data_V_data_V_0_state[1'd0];
    end else begin
        error_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8))) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage3) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state10))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage4) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state11))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage5) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state12))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage6) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state13))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage7) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14))) | ((1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15))) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_19_reg_1274) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_block_state38))))) begin
        error_data_V_data_V_0_ack_out = 1'b1;
    end else begin
        error_data_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == error_data_V_data_V_0_sel)) begin
        error_data_V_data_V_0_data_out = error_data_V_data_V_0_payload_B;
    end else begin
        error_data_V_data_V_0_data_out = error_data_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8))) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage3) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state10))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage4) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state11))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage5) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state12))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage6) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state13))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage7) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14))) | ((1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15))) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_19_reg_1274) & ~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_block_state38))))) begin
        error_data_V_last_V_0_ack_out = 1'b1;
    end else begin
        error_data_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) & (fe_status_V_V_0_vld_out == 1'b1))) begin
        fe_status_V_V_0_ack_out = 1'b1;
    end else begin
        fe_status_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == fe_status_V_V_0_sel)) begin
        fe_status_V_V_0_data_out = fe_status_V_V_0_payload_B;
    end else begin
        fe_status_V_V_0_data_out = fe_status_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        fe_status_V_V_TDATA_blk_n = fe_status_V_V_0_state[1'd0];
    end else begin
        fe_status_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9_ignore_call95))) | ((1'b1 == ap_CS_fsm_pp0_stage3) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state10_ignore_call95))) | ((1'b1 == ap_CS_fsm_pp0_stage4) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state11_ignore_call95))) | ((1'b1 == ap_CS_fsm_pp0_stage5) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state12_ignore_call95))) | ((1'b1 == ap_CS_fsm_pp0_stage6) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state13_ignore_call95))) | ((1'b1 == ap_CS_fsm_pp0_stage7) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14_ignore_call95))) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15_ignore_call95))) | ((1'b1 == ap_CS_fsm_pp0_stage1) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8_ignore_call95))))) begin
        grp_num_diff_fu_437_ap_ce = 1'b1;
    end else begin
        grp_num_diff_fu_437_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_tmp_17_reg_944))) begin
        grp_num_diff_fu_437_in1_V = ap_reg_pp0_iter1_tmp_V_reg_1004;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944))) begin
        grp_num_diff_fu_437_in1_V = src_data_V_V_0_data_out;
    end else begin
        grp_num_diff_fu_437_in1_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd1 == ap_reg_pp0_iter1_tmp_17_reg_944))) begin
        grp_num_diff_fu_437_in2_V = p_2_reg_1254;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944))) begin
        grp_num_diff_fu_437_in2_V = hard_bits_V_fu_598_p2;
    end else begin
        grp_num_diff_fu_437_in2_V = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == hard_in_1_2_reg_416)))) begin
        hard_data_TDATA_blk_n = hard_data_V_data_V_0_state[1'd0];
    end else begin
        hard_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == hard_in_1_2_reg_416) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state35))))) begin
        hard_data_V_data_V_0_ack_out = 1'b1;
    end else begin
        hard_data_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == hard_data_V_data_V_0_sel)) begin
        hard_data_V_data_V_0_data_out = hard_data_V_data_V_0_payload_B;
    end else begin
        hard_data_V_data_V_0_data_out = hard_data_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9))) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == hard_in_1_2_reg_416) & ~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state35))))) begin
        hard_data_V_last_V_0_ack_out = 1'b1;
    end else begin
        hard_data_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == hard_data_V_last_V_0_sel)) begin
        hard_data_V_last_V_0_data_out = hard_data_V_last_V_0_payload_B;
    end else begin
        hard_data_V_last_V_0_data_out = hard_data_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter1) & (1'd0 == hard_in_1_2_reg_416))) begin
        hard_in_1_2_phi_fu_419_p4 = hard_data_V_last_V_0_data_out;
    end else begin
        hard_in_1_2_phi_fu_419_p4 = hard_in_1_2_reg_416;
    end
end

always @ (*) begin
    if (((1'd1 == tmp_17_reg_944) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        j_phi_fu_408_p4 = i_reg_948;
    end else begin
        j_phi_fu_408_p4 = j_reg_404;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_ce0 = 1'b1;
    end else begin
        k_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mask_V_ce0 = 1'b1;
    end else begin
        mask_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        n_ce0 = 1'b1;
    end else begin
        n_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9)))) begin
        src_data_V_V_0_ack_out = 1'b1;
    end else begin
        src_data_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == src_data_V_V_0_sel)) begin
        src_data_V_V_0_data_out = src_data_V_V_0_payload_B;
    end else begin
        src_data_V_V_0_data_out = src_data_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_17_reg_944))) begin
        src_data_V_V_TDATA_blk_n = src_data_V_V_0_state[1'd0];
    end else begin
        src_data_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((ap_start == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((1'd0 == tmp_fu_522_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15)) & (1'd0 == tmp_17_fu_573_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state15)) & (1'd0 == tmp_17_fu_573_p2) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8)) & ~((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter3) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8)) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter3) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state8)) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state9))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state10))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state11))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state12))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state13))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_block_state14))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~(~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state35)) & (1'd1 == hard_in_1_2_phi_fu_419_p4) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((~((1'b1 == ap_enable_reg_pp1_iter1) & (1'b1 == ap_block_state35)) & (1'd1 == hard_in_1_2_phi_fu_419_p4) & (1'b1 == ap_enable_reg_pp1_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~(~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_block_state38)) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd0 == tmp_19_fu_726_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((~((1'b1 == ap_enable_reg_pp2_iter1) & (1'b1 == ap_block_state38)) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd0 == tmp_19_fu_726_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if ((1'd1 == tmp_24_fu_747_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if ((fe_status_V_V_0_vld_out == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state10 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state10_ignore_call95 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state11 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state11_ignore_call95 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state12 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state12_ignore_call95 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state13 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state13_ignore_call95 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state14 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state14_ignore_call95 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state15 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state15_ignore_call95 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state35 = ((1'd0 == hard_in_1_2_reg_416) & (1'b0 == hard_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state38 = ((1'd1 == tmp_19_reg_1274) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state8 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state8_ignore_call95 = ((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state9 = (((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out)) | ((1'd1 == tmp_17_reg_944) & (1'b0 == hard_data_V_data_V_0_vld_out)) | ((1'd1 == tmp_17_reg_944) & (1'b0 == src_data_V_V_0_vld_out)));
end

always @ (*) begin
    ap_block_state9_ignore_call95 = (((1'd1 == tmp_17_reg_944) & (1'b0 == error_data_V_data_V_0_vld_out)) | ((1'd1 == tmp_17_reg_944) & (1'b0 == hard_data_V_data_V_0_vld_out)) | ((1'd1 == tmp_17_reg_944) & (1'b0 == src_data_V_V_0_vld_out)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_rst_n_cntrl_aclk_inv = ~ap_rst_n_cntrl_aclk;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_i_1_fu_824_p3 = ((tmp_28_reg_1364[0:0] === 1'b1) ? 32'd0 : b_i_2_reg_1342);

assign b_i_2_fu_758_p2 = (b_i_reg_344 + 32'd1);

assign block_def_cfg_address0 = tmp_15_fu_527_p1;

assign block_def_cnt_address0 = tmp_15_fu_527_p1;

assign def_cfg_1_fu_545_p3 = ((tmp_s_reg_877[0:0] === 1'b1) ? def_cfg_reg_883 : def_cfg_2_fu_164);

assign def_cnt_1_fu_551_p3 = ((tmp_s_reg_877[0:0] === 1'b1) ? def_cnt_reg_888 : def_cnt_2_fu_160);

assign def_i_1_fu_764_p2 = (def_i_reg_332 + 8'd1);

assign def_i_2_fu_817_p3 = ((tmp_28_reg_1364[0:0] === 1'b1) ? p_s_fu_811_p3 : def_i_reg_332);

assign err_cnt_1_fu_710_p2 = (err_cnt_1_trunc_ext_fu_706_p1 + err_cnt_phi_fu_384_p4);

assign err_cnt_1_trunc_ext_fu_706_p1 = reg_518;

assign error_bits_comp_V_7_fu_618_p66 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{grp_fu_506_p3}, {grp_fu_498_p3}}, {grp_fu_490_p3}}, {grp_fu_482_p3}}, {grp_fu_474_p3}}, {grp_fu_466_p3}}, {grp_fu_458_p3}}, {grp_fu_450_p3}}, {tmp_86_reg_1249}}, {tmp_85_reg_1244}}, {tmp_84_reg_1239}}, {tmp_83_reg_1234}}, {tmp_82_reg_1229}}, {tmp_81_reg_1224}}, {tmp_80_reg_1219}}, {tmp_79_reg_1214}}, {tmp_78_reg_1209}}, {tmp_77_reg_1204}}, {tmp_76_reg_1199}}, {tmp_75_reg_1194}}, {tmp_74_reg_1189}}, {tmp_73_reg_1184}}, {tmp_72_reg_1179}}, {tmp_71_reg_1174}}, {tmp_70_reg_1169}}, {tmp_69_reg_1164}}, {tmp_68_reg_1159}}, {tmp_67_reg_1154}}, {tmp_66_reg_1149}}, {tmp_65_reg_1144}}, {tmp_64_reg_1139}}, {tmp_63_reg_1134}}, {tmp_62_reg_1129}}, {tmp_61_reg_1124}}, {tmp_60_reg_1119}}, {tmp_59_reg_1114}}, {tmp_58_reg_1109}}, {tmp_57_reg_1104}}, {tmp_56_reg_1099}}, {tmp_55_reg_1094}}, {tmp_54_reg_1089}}, {tmp_53_reg_1084}}, {tmp_52_reg_1079}}, {tmp_51_reg_1074}}, {tmp_50_reg_1069}}, {tmp_49_reg_1064}}, {tmp_48_reg_1059}}, {tmp_47_reg_1054}}, {tmp_46_reg_1044}}, {tmp_45_reg_1039}}, {tmp_44_reg_1034}}, {tmp_43_reg_1029}}, {tmp_42_reg_1024}}, {tmp_41_reg_1019}}, {tmp_40_reg_1014}}, {tmp_39_reg_1009}}, {tmp_38_reg_989}}, {tmp_37_reg_984}}, {tmp_36_reg_979}}, {tmp_35_reg_974}}, {tmp_34_reg_969}}, {tmp_33_reg_964}}, {tmp_32_reg_959}}, {tmp_31_reg_954}}, {tmp_3_fu_608_p4}};

assign error_data_TREADY = error_data_V_last_V_0_state[1'd1];

assign error_data_V_data_V_0_ack_in = error_data_V_data_V_0_state[1'd1];

assign error_data_V_data_V_0_load_A = (error_data_V_data_V_0_state_cmp_full & ~error_data_V_data_V_0_sel_wr);

assign error_data_V_data_V_0_load_B = (error_data_V_data_V_0_sel_wr & error_data_V_data_V_0_state_cmp_full);

assign error_data_V_data_V_0_sel = error_data_V_data_V_0_sel_rd;

assign error_data_V_data_V_0_state_cmp_full = ((error_data_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign error_data_V_data_V_0_vld_in = error_data_TVALID;

assign error_data_V_data_V_0_vld_out = error_data_V_data_V_0_state[1'd0];

assign error_data_V_last_V_0_vld_in = error_data_TVALID;

assign fe_status_V_V_0_ack_in = fe_status_V_V_0_state[1'd1];

assign fe_status_V_V_0_load_A = (fe_status_V_V_0_state_cmp_full & ~fe_status_V_V_0_sel_wr);

assign fe_status_V_V_0_load_B = (fe_status_V_V_0_sel_wr & fe_status_V_V_0_state_cmp_full);

assign fe_status_V_V_0_sel = fe_status_V_V_0_sel_rd;

assign fe_status_V_V_0_state_cmp_full = ((fe_status_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign fe_status_V_V_0_vld_in = fe_status_V_V_TVALID;

assign fe_status_V_V_0_vld_out = fe_status_V_V_0_state[1'd0];

assign fe_status_V_V_TREADY = fe_status_V_V_0_state[1'd1];

assign grp_fu_450_p3 = error_data_V_data_V_0_data_out[32'd7];

assign grp_fu_458_p3 = error_data_V_data_V_0_data_out[32'd15];

assign grp_fu_466_p3 = error_data_V_data_V_0_data_out[32'd23];

assign grp_fu_474_p3 = error_data_V_data_V_0_data_out[32'd31];

assign grp_fu_482_p3 = error_data_V_data_V_0_data_out[32'd39];

assign grp_fu_490_p3 = error_data_V_data_V_0_data_out[32'd47];

assign grp_fu_498_p3 = error_data_V_data_V_0_data_out[32'd55];

assign grp_fu_506_p3 = error_data_V_data_V_0_data_out[32'd63];

assign grp_num_diff_fu_437_ap_start = ap_reg_grp_num_diff_fu_437_ap_start;

assign hard_bits_V_fu_598_p2 = (hard_data_V_data_V_0_data_out & r_V_fu_592_p3);

assign hard_data_TREADY = hard_data_V_last_V_0_state[1'd1];

assign hard_data_V_data_V_0_ack_in = hard_data_V_data_V_0_state[1'd1];

assign hard_data_V_data_V_0_load_A = (hard_data_V_data_V_0_state_cmp_full & ~hard_data_V_data_V_0_sel_wr);

assign hard_data_V_data_V_0_load_B = (hard_data_V_data_V_0_sel_wr & hard_data_V_data_V_0_state_cmp_full);

assign hard_data_V_data_V_0_sel = hard_data_V_data_V_0_sel_rd;

assign hard_data_V_data_V_0_state_cmp_full = ((hard_data_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign hard_data_V_data_V_0_vld_in = hard_data_TVALID;

assign hard_data_V_data_V_0_vld_out = hard_data_V_data_V_0_state[1'd0];

assign hard_data_V_last_V_0_ack_in = hard_data_V_last_V_0_state[1'd1];

assign hard_data_V_last_V_0_load_A = (hard_data_V_last_V_0_state_cmp_full & ~hard_data_V_last_V_0_sel_wr);

assign hard_data_V_last_V_0_load_B = (hard_data_V_last_V_0_sel_wr & hard_data_V_last_V_0_state_cmp_full);

assign hard_data_V_last_V_0_sel = hard_data_V_last_V_0_sel_rd;

assign hard_data_V_last_V_0_state_cmp_full = ((hard_data_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign hard_data_V_last_V_0_vld_in = hard_data_TVALID;

assign hard_data_V_last_V_0_vld_out = hard_data_V_last_V_0_state[1'd0];

assign i_fu_578_p2 = (j_phi_fu_408_p4 + 32'd128);

assign j_1_fu_731_p2 = (j1_reg_427 + 32'd16);

assign k_address0 = tmp_16_fu_567_p1;

assign mask_V_address0 = tmp_16_fu_567_p1;

assign n_address0 = tmp_16_fu_567_p1;

assign p_2_fu_696_p2 = (error_bits_comp_V_7_fu_618_p66 & r_V_reg_1049);

assign p_Result_s_30_fu_802_p1 = p_Result_s_fu_792_p4;

assign p_Result_s_fu_792_p4 = {{fe_status_V_V_0_data_out[23:18]}};

assign p_s_fu_811_p3 = ((tmp_30_reg_1376[0:0] === 1'b1) ? 8'd0 : def_i_1_reg_1348);

assign r_V_fu_592_p3 = ((tmp_18_reg_994[0:0] === 1'b1) ? 128'd340282366920938463463374607431768211455 : mask_int_V_reg_939);

assign rerr_cnt_1_fu_720_p2 = (rerr_cnt_1_trunc_ext_fu_716_p1 + rerr_cnt_reg_392);

assign rerr_cnt_1_trunc_ext_fu_716_p1 = reg_518;

assign src_data_V_V_0_ack_in = src_data_V_V_0_state[1'd1];

assign src_data_V_V_0_load_A = (src_data_V_V_0_state_cmp_full & ~src_data_V_V_0_sel_wr);

assign src_data_V_V_0_load_B = (src_data_V_V_0_sel_wr & src_data_V_V_0_state_cmp_full);

assign src_data_V_V_0_sel = src_data_V_V_0_sel_rd;

assign src_data_V_V_0_state_cmp_full = ((src_data_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_data_V_V_0_vld_in = src_data_V_V_TVALID;

assign src_data_V_V_0_vld_out = src_data_V_V_0_state[1'd0];

assign src_data_V_V_TREADY = src_data_V_V_0_state[1'd1];

assign tmp_15_fu_527_p1 = def_i_reg_332;

assign tmp_16_fu_567_p1 = def_cfg_1_reg_893;

assign tmp_17_fu_573_p2 = ((j_phi_fu_408_p4 < k_int_reg_933) ? 1'b1 : 1'b0);

assign tmp_18_fu_584_p2 = ((i_reg_948 < k_int_reg_933) ? 1'b1 : 1'b0);

assign tmp_19_fu_726_p2 = ((j1_reg_427 < n_int_reg_928) ? 1'b1 : 1'b0);

assign tmp_22_fu_737_p2 = (ber_stats_raw_berr_l_reg_1293 + rerr_cnt_reg_392);

assign tmp_23_fu_742_p2 = (ber_stats_cor_berr_l_reg_1298 + err_cnt_reg_380);

assign tmp_24_fu_747_p2 = ((err_cnt_reg_380 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_25_fu_753_p2 = (ber_stats_cor_blerr_1_reg_1322 + 32'd1);

assign tmp_26_fu_787_p2 = (ber_stats_block_cnt_1_reg_1354 + 32'd1);

assign tmp_27_fu_806_p2 = (ber_stats_iter_cnt_l_reg_1359 + p_Result_s_30_fu_802_p1);

assign tmp_28_fu_770_p2 = ((b_i_2_reg_1342 == def_cnt_1_reg_898) ? 1'b1 : 1'b0);

assign tmp_29_fu_779_p1 = def_i_1_reg_1348;

assign tmp_30_fu_782_p2 = ((tmp_29_fu_779_p1 == num_defs_read_reg_859) ? 1'b1 : 1'b0);

assign tmp_3_fu_608_p4 = {{p_0181_s_fu_168[127:64]}};

assign tmp_fu_522_p2 = ((total_blocks_reg_356 < num_blocks_read_reg_854) ? 1'b1 : 1'b0);

assign tmp_s_fu_533_p2 = ((b_i_reg_344 == 32'd0) ? 1'b1 : 1'b0);

assign total_blocks_1_fu_830_p3 = ((tmp_28_reg_1364[0:0] === 1'b1) ? total_blocks_2_reg_1371 : total_blocks_reg_356);

assign total_blocks_2_fu_774_p2 = (def_cnt_1_reg_898 + total_blocks_reg_356);

always @ (posedge ap_clk) begin
    tmp_16_reg_904[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //ber_stats
