// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XBER_KERNEL_H
#define XBER_KERNEL_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xber_kernel_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Cntrl_BaseAddress;
} XBer_kernel_Config;
#endif

typedef struct {
    u32 Cntrl_BaseAddress;
    u32 IsReady;
} XBer_kernel;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XBer_kernel_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XBer_kernel_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XBer_kernel_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XBer_kernel_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XBer_kernel_Initialize(XBer_kernel *InstancePtr, u16 DeviceId);
XBer_kernel_Config* XBer_kernel_LookupConfig(u16 DeviceId);
int XBer_kernel_CfgInitialize(XBer_kernel *InstancePtr, XBer_kernel_Config *ConfigPtr);
#else
int XBer_kernel_Initialize(XBer_kernel *InstancePtr, const char* InstanceName);
int XBer_kernel_Release(XBer_kernel *InstancePtr);
#endif

void XBer_kernel_Start(XBer_kernel *InstancePtr);
u32 XBer_kernel_IsDone(XBer_kernel *InstancePtr);
u32 XBer_kernel_IsIdle(XBer_kernel *InstancePtr);
u32 XBer_kernel_IsReady(XBer_kernel *InstancePtr);
void XBer_kernel_EnableAutoRestart(XBer_kernel *InstancePtr);
void XBer_kernel_DisableAutoRestart(XBer_kernel *InstancePtr);

void XBer_kernel_Set_fec_type(XBer_kernel *InstancePtr, u32 Data);
u32 XBer_kernel_Get_fec_type(XBer_kernel *InstancePtr);
void XBer_kernel_Set_soft_words_tx(XBer_kernel *InstancePtr, u32 Data);
u32 XBer_kernel_Get_soft_words_tx(XBer_kernel *InstancePtr);
void XBer_kernel_Set_hard_words_tx(XBer_kernel *InstancePtr, u32 Data);
u32 XBer_kernel_Get_hard_words_tx(XBer_kernel *InstancePtr);
void XBer_kernel_Set_num_defs(XBer_kernel *InstancePtr, u32 Data);
u32 XBer_kernel_Get_num_defs(XBer_kernel *InstancePtr);
void XBer_kernel_Set_num_blocks(XBer_kernel *InstancePtr, u32 Data);
u32 XBer_kernel_Get_num_blocks(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_code_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_code_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_code_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_code_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_code_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_code_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_code_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_code_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_code_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_cfg_n_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_n_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_n_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_n_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_n_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_n_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_n_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_n_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_n_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_cfg_k_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_k_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_k_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_k_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_k_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_k_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_k_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_k_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_k_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_cfg_term_on_pass_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_term_on_pass_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_term_on_pass_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_term_on_pass_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_term_on_pass_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_term_on_pass_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_term_on_pass_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_term_on_pass_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_term_on_pass_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_cfg_max_iterations_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_max_iterations_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_max_iterations_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_max_iterations_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_max_iterations_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_max_iterations_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_max_iterations_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_max_iterations_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_max_iterations_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_cfg_crc_type_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_crc_type_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_crc_type_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_crc_type_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_crc_type_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_crc_type_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_crc_type_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_crc_type_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_crc_type_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_cfg_skip_channel_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_skip_channel_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_skip_channel_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_skip_channel_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_skip_channel_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_skip_channel_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_skip_channel_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_skip_channel_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_skip_channel_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_cfg_mod_type_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_mod_type_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_mod_type_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_mod_type_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_mod_type_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_mod_type_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_mod_type_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_mod_type_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_mod_type_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_cfg_snr_V_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_snr_V_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_snr_V_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_snr_V_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_snr_V_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_snr_V_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_snr_V_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_snr_V_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_snr_V_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_cfg_inv_sigma_sq_V_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_inv_sigma_sq_V_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_inv_sigma_sq_V_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_inv_sigma_sq_V_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_inv_sigma_sq_V_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_inv_sigma_sq_V_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_inv_sigma_sq_V_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_inv_sigma_sq_V_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_inv_sigma_sq_V_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_cfg_outputs_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_outputs_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_outputs_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_outputs_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_cfg_outputs_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_cfg_outputs_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_cfg_outputs_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_cfg_outputs_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_cfg_outputs_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_def_cfg_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_def_cfg_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_def_cfg_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_def_cfg_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_def_cfg_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_def_cfg_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_def_cfg_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_def_cfg_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_def_cfg_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Get_block_def_cnt_BaseAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_def_cnt_HighAddress(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_def_cnt_TotalBytes(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_def_cnt_BitWidth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Get_block_def_cnt_Depth(XBer_kernel *InstancePtr);
u32 XBer_kernel_Write_block_def_cnt_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Read_block_def_cnt_Words(XBer_kernel *InstancePtr, int offset, int *data, int length);
u32 XBer_kernel_Write_block_def_cnt_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);
u32 XBer_kernel_Read_block_def_cnt_Bytes(XBer_kernel *InstancePtr, int offset, char *data, int length);

void XBer_kernel_InterruptGlobalEnable(XBer_kernel *InstancePtr);
void XBer_kernel_InterruptGlobalDisable(XBer_kernel *InstancePtr);
void XBer_kernel_InterruptEnable(XBer_kernel *InstancePtr, u32 Mask);
void XBer_kernel_InterruptDisable(XBer_kernel *InstancePtr, u32 Mask);
void XBer_kernel_InterruptClear(XBer_kernel *InstancePtr, u32 Mask);
u32 XBer_kernel_InterruptGetEnabled(XBer_kernel *InstancePtr);
u32 XBer_kernel_InterruptGetStatus(XBer_kernel *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
