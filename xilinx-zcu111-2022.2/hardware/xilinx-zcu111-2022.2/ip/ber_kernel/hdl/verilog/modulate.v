// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module modulate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        modulation_type_dout,
        modulation_type_empty_n,
        modulation_type_read,
        block_size_dout,
        block_size_empty_n,
        block_size_read,
        src_data_V_dout,
        src_data_V_empty_n,
        src_data_V_read,
        mod_data_V_M_real_V_din,
        mod_data_V_M_real_V_full_n,
        mod_data_V_M_real_V_write,
        mod_data_V_M_imag_V_din,
        mod_data_V_M_imag_V_full_n,
        mod_data_V_M_imag_V_write,
        mod_data_last_V_din,
        mod_data_last_V_full_n,
        mod_data_last_V_write,
        modulation_type_out_din,
        modulation_type_out_full_n,
        modulation_type_out_write,
        block_size_out_din,
        block_size_out_full_n,
        block_size_out_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] modulation_type_dout;
input   modulation_type_empty_n;
output   modulation_type_read;
input  [31:0] block_size_dout;
input   block_size_empty_n;
output   block_size_read;
input   src_data_V_dout;
input   src_data_V_empty_n;
output   src_data_V_read;
output  [15:0] mod_data_V_M_real_V_din;
input   mod_data_V_M_real_V_full_n;
output   mod_data_V_M_real_V_write;
output  [15:0] mod_data_V_M_imag_V_din;
input   mod_data_V_M_imag_V_full_n;
output   mod_data_V_M_imag_V_write;
output   mod_data_last_V_din;
input   mod_data_last_V_full_n;
output   mod_data_last_V_write;
output  [31:0] modulation_type_out_din;
input   modulation_type_out_full_n;
output   modulation_type_out_write;
output  [31:0] block_size_out_din;
input   block_size_out_full_n;
output   block_size_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg modulation_type_read;
reg block_size_read;
reg src_data_V_read;
reg mod_data_last_V_din;
reg mod_data_last_V_write;
reg modulation_type_out_write;
reg block_size_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    modulation_type_blk_n;
reg    block_size_blk_n;
reg    src_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_i_reg_401;
reg    mod_data_V_M_real_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] tmp_i_reg_417;
reg   [0:0] ap_reg_pp0_iter4_tmp_i_reg_417;
reg    mod_data_V_M_imag_V_blk_n;
reg    mod_data_last_V_blk_n;
reg   [0:0] tmp_24_i_reg_421;
reg   [0:0] ap_reg_pp0_iter4_tmp_24_i_reg_421;
reg    modulation_type_out_blk_n;
reg    block_size_out_blk_n;
reg   [5:0] p_Val2_s_reg_254;
reg   [31:0] i_i_reg_266;
wire   [31:0] modulation_type_read_read_fu_186_p2;
reg   [31:0] modulation_type_read_reg_378;
reg    ap_block_state1;
reg   [31:0] block_size_read_reg_383;
wire   [8:0] symbol_width_cast_i_fu_310_p1;
reg   [8:0] symbol_width_cast_i_reg_396;
wire   [0:0] exitcond_i_fu_314_p2;
reg    ap_block_state3;
wire    mod_data_V_M_real_V1_status;
reg    ap_predicate_op58_write_state7;
reg    ap_predicate_op60_write_state7;
reg    ap_block_state7;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_reg_401;
wire   [31:0] i_fu_319_p2;
reg   [31:0] i_reg_405;
reg    ap_enable_reg_pp0_iter0;
reg   [5:0] p_Result_s_fu_340_p4;
reg   [5:0] p_Result_s_reg_411;
wire   [0:0] tmp_i_fu_350_p2;
reg   [0:0] ap_reg_pp0_iter2_tmp_i_reg_417;
reg   [0:0] ap_reg_pp0_iter3_tmp_i_reg_417;
wire   [0:0] tmp_24_i_fu_366_p2;
reg   [0:0] ap_reg_pp0_iter2_tmp_24_i_reg_421;
reg   [0:0] ap_reg_pp0_iter3_tmp_24_i_reg_421;
reg   [15:0] tmp_M_real_V_reg_425;
reg   [15:0] tmp_M_imag_V_reg_430;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
wire    grp_modulate_bits_fu_277_ap_start;
wire    grp_modulate_bits_fu_277_ap_done;
wire    grp_modulate_bits_fu_277_ap_idle;
wire    grp_modulate_bits_fu_277_ap_ready;
reg    grp_modulate_bits_fu_277_ap_ce;
wire   [15:0] grp_modulate_bits_fu_277_ap_return_0;
wire   [15:0] grp_modulate_bits_fu_277_ap_return_1;
reg    ap_block_state3_ignore_call0;
reg    ap_block_state7_ignore_call0;
reg   [2:0] symbol_width_i_phi_fu_242_p8;
wire   [2:0] tmp_fu_304_p1;
reg   [5:0] p_Val2_s_phi_fu_258_p4;
reg   [31:0] i_i_phi_fu_270_p4;
reg    ap_reg_grp_modulate_bits_fu_277_ap_start;
reg    mod_data_V_M_real_V1_update;
reg   [7:0] sym_i_1_fu_182;
wire   [7:0] sym_i_fu_355_p2;
wire   [0:0] p_Repl2_s_fu_336_p0;
wire   [31:0] bvh_d_index_fu_328_p1;
wire   [63:0] p_Repl2_s_fu_336_p1;
wire   [8:0] index_assign_cast_i_fu_332_p1;
wire    ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_324;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_reg_grp_modulate_bits_fu_277_ap_start = 1'b0;
end

modulate_bits grp_modulate_bits_fu_277(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_modulate_bits_fu_277_ap_start),
    .ap_done(grp_modulate_bits_fu_277_ap_done),
    .ap_idle(grp_modulate_bits_fu_277_ap_idle),
    .ap_ready(grp_modulate_bits_fu_277_ap_ready),
    .ap_ce(grp_modulate_bits_fu_277_ap_ce),
    .modulation_type(modulation_type_read_reg_378),
    .symbol_V(p_Result_s_reg_411),
    .ap_return_0(grp_modulate_bits_fu_277_ap_return_0),
    .ap_return_1(grp_modulate_bits_fu_277_ap_return_1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'd1 == exitcond_i_fu_314_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & ((32'd0 == modulation_type_read_read_fu_186_p2) | (32'd1 == modulation_type_read_read_fu_186_p2) | (modulation_type_read_read_fu_186_p2 == 32'd2) | (modulation_type_read_read_fu_186_p2 == 32'd3)))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & ~(1'd1 == exitcond_i_fu_314_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & ((32'd0 == modulation_type_read_read_fu_186_p2) | (32'd1 == modulation_type_read_read_fu_186_p2) | (modulation_type_read_read_fu_186_p2 == 32'd2) | (modulation_type_read_read_fu_186_p2 == 32'd3))) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'd1 == exitcond_i_fu_314_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & ((32'd0 == modulation_type_read_read_fu_186_p2) | (32'd1 == modulation_type_read_read_fu_186_p2) | (modulation_type_read_read_fu_186_p2 == 32'd2) | (modulation_type_read_read_fu_186_p2 == 32'd3)))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_modulate_bits_fu_277_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'd1 == tmp_i_fu_350_p2))) begin
            ap_reg_grp_modulate_bits_fu_277_ap_start <= 1'b1;
        end else if ((1'b1 == grp_modulate_bits_fu_277_ap_ready)) begin
            ap_reg_grp_modulate_bits_fu_277_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_401 == 1'd0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        i_i_reg_266 <= i_reg_405;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & ((32'd0 == modulation_type_read_read_fu_186_p2) | (32'd1 == modulation_type_read_read_fu_186_p2) | (modulation_type_read_read_fu_186_p2 == 32'd2) | (modulation_type_read_read_fu_186_p2 == 32'd3)))) begin
        i_i_reg_266 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_i_reg_401))) begin
        p_Val2_s_reg_254 <= p_Result_s_reg_411;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & ((32'd0 == modulation_type_read_read_fu_186_p2) | (32'd1 == modulation_type_read_read_fu_186_p2) | (modulation_type_read_read_fu_186_p2 == 32'd2) | (modulation_type_read_read_fu_186_p2 == 32'd3)))) begin
        p_Val2_s_reg_254 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'd0 == tmp_i_fu_350_p2))) begin
        sym_i_1_fu_182 <= sym_i_fu_355_p2;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & ((32'd0 == modulation_type_read_read_fu_186_p2) | (32'd1 == modulation_type_read_read_fu_186_p2) | (modulation_type_read_read_fu_186_p2 == 32'd2) | (modulation_type_read_read_fu_186_p2 == 32'd3))) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'd1 == tmp_i_fu_350_p2)))) begin
        sym_i_1_fu_182 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        ap_reg_pp0_iter1_exitcond_i_reg_401 <= exitcond_i_reg_401;
        exitcond_i_reg_401 <= exitcond_i_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) begin
        ap_reg_pp0_iter2_tmp_24_i_reg_421 <= tmp_24_i_reg_421;
        ap_reg_pp0_iter2_tmp_i_reg_417 <= tmp_i_reg_417;
        ap_reg_pp0_iter3_tmp_24_i_reg_421 <= ap_reg_pp0_iter2_tmp_24_i_reg_421;
        ap_reg_pp0_iter3_tmp_i_reg_417 <= ap_reg_pp0_iter2_tmp_i_reg_417;
        ap_reg_pp0_iter4_tmp_24_i_reg_421 <= ap_reg_pp0_iter3_tmp_24_i_reg_421;
        ap_reg_pp0_iter4_tmp_i_reg_417 <= ap_reg_pp0_iter3_tmp_i_reg_417;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_size_read_reg_383 <= block_size_dout;
        modulation_type_read_reg_378 <= modulation_type_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        i_reg_405 <= i_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_401 == 1'd0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        p_Result_s_reg_411 <= p_Result_s_fu_340_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & ((32'd0 == modulation_type_read_read_fu_186_p2) | (32'd1 == modulation_type_read_read_fu_186_p2) | (modulation_type_read_read_fu_186_p2 == 32'd2) | (modulation_type_read_read_fu_186_p2 == 32'd3)))) begin
        symbol_width_cast_i_reg_396[2 : 0] <= symbol_width_cast_i_fu_310_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'd1 == tmp_i_fu_350_p2))) begin
        tmp_24_i_reg_421 <= tmp_24_i_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'd1 == ap_reg_pp0_iter3_tmp_i_reg_417))) begin
        tmp_M_imag_V_reg_430 <= grp_modulate_bits_fu_277_ap_return_1;
        tmp_M_real_V_reg_425 <= grp_modulate_bits_fu_277_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_i_reg_401 == 1'd0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        tmp_i_reg_417 <= tmp_i_fu_350_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        block_size_blk_n = block_size_empty_n;
    end else begin
        block_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        block_size_out_blk_n = block_size_out_full_n;
    end else begin
        block_size_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_size_out_write = 1'b1;
    end else begin
        block_size_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_size_read = 1'b1;
    end else begin
        block_size_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3_ignore_call0)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7_ignore_call0))))) begin
        grp_modulate_bits_fu_277_ap_ce = 1'b1;
    end else begin
        grp_modulate_bits_fu_277_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_401 == 1'd0))) begin
        i_i_phi_fu_270_p4 = i_reg_405;
    end else begin
        i_i_phi_fu_270_p4 = i_i_reg_266;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (ap_reg_pp0_iter4_tmp_i_reg_417 == 1'd1))) begin
        mod_data_V_M_imag_V_blk_n = mod_data_V_M_imag_V_full_n;
    end else begin
        mod_data_V_M_imag_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (ap_reg_pp0_iter4_tmp_i_reg_417 == 1'd1) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        mod_data_V_M_real_V1_update = 1'b1;
    end else begin
        mod_data_V_M_real_V1_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (ap_reg_pp0_iter4_tmp_i_reg_417 == 1'd1))) begin
        mod_data_V_M_real_V_blk_n = mod_data_V_M_real_V_full_n;
    end else begin
        mod_data_V_M_real_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter5) & (ap_reg_pp0_iter4_tmp_i_reg_417 == 1'd1) & (1'd1 == ap_reg_pp0_iter4_tmp_24_i_reg_421)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_reg_pp0_iter4_tmp_i_reg_417 == 1'd1) & (1'd0 == ap_reg_pp0_iter4_tmp_24_i_reg_421)))) begin
        mod_data_last_V_blk_n = mod_data_last_V_full_n;
    end else begin
        mod_data_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_condition_324 == 1'b1)) begin
        if ((1'b1 == ap_predicate_op60_write_state7)) begin
            mod_data_last_V_din = 1'd1;
        end else if ((1'b1 == ap_predicate_op58_write_state7)) begin
            mod_data_last_V_din = 1'd0;
        end else begin
            mod_data_last_V_din = 'bx;
        end
    end else begin
        mod_data_last_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_predicate_op58_write_state7) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_predicate_op60_write_state7) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7)))))) begin
        mod_data_last_V_write = 1'b1;
    end else begin
        mod_data_last_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        modulation_type_blk_n = modulation_type_empty_n;
    end else begin
        modulation_type_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        modulation_type_out_blk_n = modulation_type_out_full_n;
    end else begin
        modulation_type_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        modulation_type_out_write = 1'b1;
    end else begin
        modulation_type_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        modulation_type_read = 1'b1;
    end else begin
        modulation_type_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_i_reg_401))) begin
        p_Val2_s_phi_fu_258_p4 = p_Result_s_reg_411;
    end else begin
        p_Val2_s_phi_fu_258_p4 = p_Val2_s_reg_254;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_401 == 1'd0))) begin
        src_data_V_blk_n = src_data_V_empty_n;
    end else begin
        src_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_i_reg_401 == 1'd0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))))) begin
        src_data_V_read = 1'b1;
    end else begin
        src_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (32'd0 == modulation_type_read_read_fu_186_p2)) | ((1'b1 == ap_CS_fsm_state1) & (32'd1 == modulation_type_read_read_fu_186_p2)))) begin
        symbol_width_i_phi_fu_242_p8 = tmp_fu_304_p1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (modulation_type_read_read_fu_186_p2 == 32'd2))) begin
        symbol_width_i_phi_fu_242_p8 = 3'd3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (modulation_type_read_read_fu_186_p2 == 32'd3))) begin
        symbol_width_i_phi_fu_242_p8 = 3'd5;
    end else begin
        symbol_width_i_phi_fu_242_p8 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_block_state1 == 1'b0) & ((32'd0 == modulation_type_read_read_fu_186_p2) | (32'd1 == modulation_type_read_read_fu_186_p2) | (modulation_type_read_read_fu_186_p2 == 32'd2) | (modulation_type_read_read_fu_186_p2 == 32'd3)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_block_state1 == 1'b0) & ~(32'd0 == modulation_type_read_read_fu_186_p2) & ~(32'd1 == modulation_type_read_read_fu_186_p2) & ~(modulation_type_read_read_fu_186_p2 == 32'd2) & ~(modulation_type_read_read_fu_186_p2 == 32'd3))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter5) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (ap_enable_reg_pp0_iter4 == 1'b0)) & ~(~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == exitcond_i_fu_314_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter5) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (ap_enable_reg_pp0_iter4 == 1'b0)) | (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == exitcond_i_fu_314_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == modulation_type_empty_n) | (1'b0 == block_size_empty_n) | (1'b0 == modulation_type_out_full_n) | (1'b0 == block_size_out_full_n));
end

always @ (*) begin
    ap_block_state3 = ((exitcond_i_reg_401 == 1'd0) & (1'b0 == src_data_V_empty_n));
end

always @ (*) begin
    ap_block_state3_ignore_call0 = ((exitcond_i_reg_401 == 1'd0) & (1'b0 == src_data_V_empty_n));
end

always @ (*) begin
    ap_block_state7 = (((ap_reg_pp0_iter4_tmp_i_reg_417 == 1'd1) & (1'b0 == mod_data_V_M_real_V1_status)) | ((1'b0 == mod_data_last_V_full_n) & (1'b1 == ap_predicate_op58_write_state7)) | ((1'b0 == mod_data_last_V_full_n) & (1'b1 == ap_predicate_op60_write_state7)));
end

always @ (*) begin
    ap_block_state7_ignore_call0 = (((ap_reg_pp0_iter4_tmp_i_reg_417 == 1'd1) & (1'b0 == mod_data_V_M_real_V1_status)) | ((1'b0 == mod_data_last_V_full_n) & (1'b1 == ap_predicate_op58_write_state7)) | ((1'b0 == mod_data_last_V_full_n) & (1'b1 == ap_predicate_op60_write_state7)));
end

always @ (*) begin
    ap_condition_324 = ((1'b1 == ap_enable_reg_pp0_iter5) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state3)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (1'b1 == ap_block_state7))));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op58_write_state7 = ((ap_reg_pp0_iter4_tmp_i_reg_417 == 1'd1) & (1'd0 == ap_reg_pp0_iter4_tmp_24_i_reg_421));
end

always @ (*) begin
    ap_predicate_op60_write_state7 = ((ap_reg_pp0_iter4_tmp_i_reg_417 == 1'd1) & (1'd1 == ap_reg_pp0_iter4_tmp_24_i_reg_421));
end

assign block_size_out_din = block_size_dout;

assign bvh_d_index_fu_328_p1 = sym_i_1_fu_182;

assign exitcond_i_fu_314_p2 = ((i_i_phi_fu_270_p4 == block_size_read_reg_383) ? 1'b1 : 1'b0);

assign grp_modulate_bits_fu_277_ap_start = ap_reg_grp_modulate_bits_fu_277_ap_start;

assign i_fu_319_p2 = (i_i_phi_fu_270_p4 + 32'd1);

assign index_assign_cast_i_fu_332_p1 = sym_i_1_fu_182;

assign mod_data_V_M_imag_V_din = tmp_M_imag_V_reg_430;

assign mod_data_V_M_imag_V_write = mod_data_V_M_real_V1_update;

assign mod_data_V_M_real_V1_status = (mod_data_V_M_real_V_full_n & mod_data_V_M_imag_V_full_n);

assign mod_data_V_M_real_V_din = tmp_M_real_V_reg_425;

assign mod_data_V_M_real_V_write = mod_data_V_M_real_V1_update;

assign modulation_type_out_din = modulation_type_dout;

assign modulation_type_read_read_fu_186_p2 = modulation_type_dout;

assign p_Repl2_s_fu_336_p0 = src_data_V_dout;

assign p_Repl2_s_fu_336_p1 = p_Repl2_s_fu_336_p0;

always @ (*) begin
    p_Result_s_fu_340_p4 = p_Val2_s_phi_fu_258_p4;
    p_Result_s_fu_340_p4[bvh_d_index_fu_328_p1] = |(p_Repl2_s_fu_336_p1);
end

assign sym_i_fu_355_p2 = (sym_i_1_fu_182 + 8'd1);

assign symbol_width_cast_i_fu_310_p1 = symbol_width_i_phi_fu_242_p8;

assign tmp_24_i_fu_366_p2 = ((i_reg_405 == block_size_read_reg_383) ? 1'b1 : 1'b0);

assign tmp_fu_304_p1 = modulation_type_dout[2:0];

assign tmp_i_fu_350_p2 = ((index_assign_cast_i_fu_332_p1 == symbol_width_cast_i_reg_396) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    symbol_width_cast_i_reg_396[8:3] <= 6'b000000;
end

endmodule //modulate
