// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_ber_Loop_dup_src (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_ready,
        ap_done,
        ap_continue,
        ap_idle,
        start_out,
        start_write,
        block_cfg_k_dout,
        block_cfg_k_empty_n,
        block_cfg_k_read,
        src_data_g_V_dout,
        src_data_g_V_empty_n,
        src_data_g_V_read,
        src_data_i_V_2_din,
        src_data_i_V_2_full_n,
        src_data_i_V_2_write,
        block_cfg_outputs_dout,
        block_cfg_outputs_empty_n,
        block_cfg_outputs_read,
        src_data_i_V_din,
        src_data_i_V_full_n,
        src_data_i_V_write,
        block_cfg_k_out_din,
        block_cfg_k_out_full_n,
        block_cfg_k_out_write,
        block_cfg_k_out1_din,
        block_cfg_k_out1_full_n,
        block_cfg_k_out1_write,
        block_cfg_outputs_out_din,
        block_cfg_outputs_out_full_n,
        block_cfg_outputs_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_ready;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   start_out;
output   start_write;
input  [31:0] block_cfg_k_dout;
input   block_cfg_k_empty_n;
output   block_cfg_k_read;
input  [0:0] src_data_g_V_dout;
input   src_data_g_V_empty_n;
output   src_data_g_V_read;
output  [0:0] src_data_i_V_2_din;
input   src_data_i_V_2_full_n;
output   src_data_i_V_2_write;
input  [31:0] block_cfg_outputs_dout;
input   block_cfg_outputs_empty_n;
output   block_cfg_outputs_read;
output  [0:0] src_data_i_V_din;
input   src_data_i_V_full_n;
output   src_data_i_V_write;
output  [31:0] block_cfg_k_out_din;
input   block_cfg_k_out_full_n;
output   block_cfg_k_out_write;
output  [31:0] block_cfg_k_out1_din;
input   block_cfg_k_out1_full_n;
output   block_cfg_k_out1_write;
output  [31:0] block_cfg_outputs_out_din;
input   block_cfg_outputs_out_full_n;
output   block_cfg_outputs_out_write;

reg ap_done;
reg ap_idle;
reg block_cfg_k_read;
reg src_data_g_V_read;
reg src_data_i_V_2_write;
reg block_cfg_outputs_read;
reg src_data_i_V_write;
reg block_cfg_k_out_write;
reg block_cfg_k_out1_write;
reg block_cfg_outputs_out_write;

reg    real_start;
reg    real_start_status_reg;
reg    internal_ap_ready;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    start_once_reg;
reg    start_control_reg;
reg    block_cfg_k_blk_n;
reg    src_data_g_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    src_data_i_V_2_blk_n;
reg    block_cfg_outputs_blk_n;
reg    src_data_i_V_blk_n;
reg   [0:0] tmp_7_i_reg_245;
reg    block_cfg_k_out_blk_n;
reg    block_cfg_k_out1_blk_n;
reg    block_cfg_outputs_out_blk_n;
reg   [31:0] i_0_i_i_reg_204;
reg   [31:0] block_cfg_k_read_reg_235;
reg    ap_block_state1;
wire   [7:0] tmp_fu_215_p1;
reg   [7:0] tmp_reg_240;
wire   [0:0] tmp_7_i_fu_219_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond6_i_fu_224_p2;
reg    ap_block_state4;
wire   [31:0] i_fu_229_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 real_start_status_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 start_once_reg = 1'b0;
#0 start_control_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (exitcond6_i_fu_224_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & ~(exitcond6_i_fu_224_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (exitcond6_i_fu_224_p2 == 1'd1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        real_start_status_reg <= 1'b0;
    end else begin
        if ((start_full_n == 1'b1)) begin
            real_start_status_reg <= 1'b0;
        end else if (((1'b0 == start_full_n) & (1'b1 == internal_ap_ready))) begin
            real_start_status_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_control_reg <= 1'b0;
    end else begin
        if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
            start_control_reg <= 1'b1;
        end else if (((1'b1 == start_control_reg) & (1'b1 == start_full_n))) begin
            start_control_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end else if ((1'b0 == ap_start)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond6_i_fu_224_p2))) begin
        i_0_i_i_reg_204 <= i_fu_229_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_0_i_i_reg_204 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_k_read_reg_235 <= block_cfg_k_dout;
        tmp_reg_240 <= tmp_fu_215_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_7_i_reg_245 <= tmp_7_i_fu_219_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        block_cfg_k_blk_n = block_cfg_k_empty_n;
    end else begin
        block_cfg_k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        block_cfg_k_out1_blk_n = block_cfg_k_out1_full_n;
    end else begin
        block_cfg_k_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_k_out1_write = 1'b1;
    end else begin
        block_cfg_k_out1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        block_cfg_k_out_blk_n = block_cfg_k_out_full_n;
    end else begin
        block_cfg_k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_k_out_write = 1'b1;
    end else begin
        block_cfg_k_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_k_read = 1'b1;
    end else begin
        block_cfg_k_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        block_cfg_outputs_blk_n = block_cfg_outputs_empty_n;
    end else begin
        block_cfg_outputs_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == real_start) | (ap_done_reg == 1'b1)))) begin
        block_cfg_outputs_out_blk_n = block_cfg_outputs_out_full_n;
    end else begin
        block_cfg_outputs_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_outputs_out_write = 1'b1;
    end else begin
        block_cfg_outputs_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_outputs_read = 1'b1;
    end else begin
        block_cfg_outputs_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == real_start_status_reg)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        src_data_g_V_blk_n = src_data_g_V_empty_n;
    end else begin
        src_data_g_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)))) begin
        src_data_g_V_read = 1'b1;
    end else begin
        src_data_g_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        src_data_i_V_2_blk_n = src_data_i_V_2_full_n;
    end else begin
        src_data_i_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)))) begin
        src_data_i_V_2_write = 1'b1;
    end else begin
        src_data_i_V_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_7_i_reg_245 == 1'd0))) begin
        src_data_i_V_blk_n = src_data_i_V_full_n;
    end else begin
        src_data_i_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_7_i_reg_245 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)))) begin
        src_data_i_V_write = 1'b1;
    end else begin
        src_data_i_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((ap_block_state1 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~(~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond6_i_fu_224_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state4)) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond6_i_fu_224_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (ap_done_reg == 1'b1) | (1'b0 == block_cfg_k_empty_n) | (1'b0 == block_cfg_outputs_empty_n) | (1'b0 == block_cfg_k_out_full_n) | (1'b0 == block_cfg_k_out1_full_n) | (1'b0 == block_cfg_outputs_out_full_n));
end

always @ (*) begin
    ap_block_state4 = ((1'b0 == src_data_g_V_empty_n) | (1'b0 == src_data_i_V_2_full_n) | ((tmp_7_i_reg_245 == 1'd0) & (1'b0 == src_data_i_V_full_n)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign block_cfg_k_out1_din = block_cfg_k_dout;

assign block_cfg_k_out_din = block_cfg_k_dout;

assign block_cfg_outputs_out_din = block_cfg_outputs_dout;

assign exitcond6_i_fu_224_p2 = ((i_0_i_i_reg_204 == block_cfg_k_read_reg_235) ? 1'b1 : 1'b0);

assign i_fu_229_p2 = (i_0_i_i_reg_204 + 32'd1);

assign src_data_i_V_2_din = src_data_g_V_dout;

assign src_data_i_V_din = src_data_g_V_dout;

assign start_out = real_start;

assign start_write = (ap_start & start_control_reg);

assign tmp_7_i_fu_219_p2 = ((tmp_reg_240 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_fu_215_p1 = block_cfg_outputs_dout[7:0];

endmodule //run_ber_Loop_dup_src
