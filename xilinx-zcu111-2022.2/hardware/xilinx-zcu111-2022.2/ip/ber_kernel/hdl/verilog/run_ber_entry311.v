// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_ber_entry311 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        block_cfg_code,
        block_cfg_n,
        block_cfg_k,
        block_cfg_term_on_pass,
        block_cfg_max_iterations,
        block_cfg_crc_type,
        block_cfg_skip_channel,
        block_cfg_mod_type,
        block_cfg_snr_V,
        block_cfg_inv_sigma_sq_V,
        block_cfg_outputs,
        fec_type,
        soft_words_tx,
        hard_words_tx,
        block_cfg_code_out_din,
        block_cfg_code_out_full_n,
        block_cfg_code_out_write,
        block_cfg_n_out_din,
        block_cfg_n_out_full_n,
        block_cfg_n_out_write,
        block_cfg_k_out_din,
        block_cfg_k_out_full_n,
        block_cfg_k_out_write,
        block_cfg_k_out1_din,
        block_cfg_k_out1_full_n,
        block_cfg_k_out1_write,
        block_cfg_term_on_pass_out_din,
        block_cfg_term_on_pass_out_full_n,
        block_cfg_term_on_pass_out_write,
        block_cfg_max_iterations_out_din,
        block_cfg_max_iterations_out_full_n,
        block_cfg_max_iterations_out_write,
        block_cfg_crc_type_out_din,
        block_cfg_crc_type_out_full_n,
        block_cfg_crc_type_out_write,
        block_cfg_skip_channel_out_din,
        block_cfg_skip_channel_out_full_n,
        block_cfg_skip_channel_out_write,
        block_cfg_mod_type_out_din,
        block_cfg_mod_type_out_full_n,
        block_cfg_mod_type_out_write,
        block_cfg_snr_V_out_din,
        block_cfg_snr_V_out_full_n,
        block_cfg_snr_V_out_write,
        block_cfg_inv_sigma_sq_V_out_din,
        block_cfg_inv_sigma_sq_V_out_full_n,
        block_cfg_inv_sigma_sq_V_out_write,
        block_cfg_outputs_out_din,
        block_cfg_outputs_out_full_n,
        block_cfg_outputs_out_write,
        fec_type_out_din,
        fec_type_out_full_n,
        fec_type_out_write,
        fec_type_out2_din,
        fec_type_out2_full_n,
        fec_type_out2_write,
        soft_words_tx_out_din,
        soft_words_tx_out_full_n,
        soft_words_tx_out_write,
        hard_words_tx_out_din,
        hard_words_tx_out_full_n,
        hard_words_tx_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] block_cfg_code;
input  [31:0] block_cfg_n;
input  [31:0] block_cfg_k;
input  [31:0] block_cfg_term_on_pass;
input  [31:0] block_cfg_max_iterations;
input  [31:0] block_cfg_crc_type;
input  [31:0] block_cfg_skip_channel;
input  [31:0] block_cfg_mod_type;
input  [16:0] block_cfg_snr_V;
input  [16:0] block_cfg_inv_sigma_sq_V;
input  [31:0] block_cfg_outputs;
input  [31:0] fec_type;
input  [31:0] soft_words_tx;
input  [31:0] hard_words_tx;
output  [31:0] block_cfg_code_out_din;
input   block_cfg_code_out_full_n;
output   block_cfg_code_out_write;
output  [31:0] block_cfg_n_out_din;
input   block_cfg_n_out_full_n;
output   block_cfg_n_out_write;
output  [31:0] block_cfg_k_out_din;
input   block_cfg_k_out_full_n;
output   block_cfg_k_out_write;
output  [31:0] block_cfg_k_out1_din;
input   block_cfg_k_out1_full_n;
output   block_cfg_k_out1_write;
output  [31:0] block_cfg_term_on_pass_out_din;
input   block_cfg_term_on_pass_out_full_n;
output   block_cfg_term_on_pass_out_write;
output  [31:0] block_cfg_max_iterations_out_din;
input   block_cfg_max_iterations_out_full_n;
output   block_cfg_max_iterations_out_write;
output  [31:0] block_cfg_crc_type_out_din;
input   block_cfg_crc_type_out_full_n;
output   block_cfg_crc_type_out_write;
output  [31:0] block_cfg_skip_channel_out_din;
input   block_cfg_skip_channel_out_full_n;
output   block_cfg_skip_channel_out_write;
output  [31:0] block_cfg_mod_type_out_din;
input   block_cfg_mod_type_out_full_n;
output   block_cfg_mod_type_out_write;
output  [16:0] block_cfg_snr_V_out_din;
input   block_cfg_snr_V_out_full_n;
output   block_cfg_snr_V_out_write;
output  [16:0] block_cfg_inv_sigma_sq_V_out_din;
input   block_cfg_inv_sigma_sq_V_out_full_n;
output   block_cfg_inv_sigma_sq_V_out_write;
output  [31:0] block_cfg_outputs_out_din;
input   block_cfg_outputs_out_full_n;
output   block_cfg_outputs_out_write;
output  [31:0] fec_type_out_din;
input   fec_type_out_full_n;
output   fec_type_out_write;
output  [31:0] fec_type_out2_din;
input   fec_type_out2_full_n;
output   fec_type_out2_write;
output  [31:0] soft_words_tx_out_din;
input   soft_words_tx_out_full_n;
output   soft_words_tx_out_write;
output  [31:0] hard_words_tx_out_din;
input   hard_words_tx_out_full_n;
output   hard_words_tx_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg block_cfg_code_out_write;
reg block_cfg_n_out_write;
reg block_cfg_k_out_write;
reg block_cfg_k_out1_write;
reg block_cfg_term_on_pass_out_write;
reg block_cfg_max_iterations_out_write;
reg block_cfg_crc_type_out_write;
reg block_cfg_skip_channel_out_write;
reg block_cfg_mod_type_out_write;
reg block_cfg_snr_V_out_write;
reg block_cfg_inv_sigma_sq_V_out_write;
reg block_cfg_outputs_out_write;
reg fec_type_out_write;
reg fec_type_out2_write;
reg soft_words_tx_out_write;
reg hard_words_tx_out_write;

reg    real_start;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    start_once_reg;
reg    block_cfg_code_out_blk_n;
reg    block_cfg_n_out_blk_n;
reg    block_cfg_k_out_blk_n;
reg    block_cfg_k_out1_blk_n;
reg    block_cfg_term_on_pass_out_blk_n;
reg    block_cfg_max_iterations_out_blk_n;
reg    block_cfg_crc_type_out_blk_n;
reg    block_cfg_skip_channel_out_blk_n;
reg    block_cfg_mod_type_out_blk_n;
reg    block_cfg_snr_V_out_blk_n;
reg    block_cfg_inv_sigma_sq_V_out_blk_n;
reg    block_cfg_outputs_out_blk_n;
reg    fec_type_out_blk_n;
reg    fec_type_out2_blk_n;
reg    soft_words_tx_out_blk_n;
reg    hard_words_tx_out_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 start_once_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_code_out_blk_n = block_cfg_code_out_full_n;
    end else begin
        block_cfg_code_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_code_out_write = 1'b1;
    end else begin
        block_cfg_code_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_crc_type_out_blk_n = block_cfg_crc_type_out_full_n;
    end else begin
        block_cfg_crc_type_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_crc_type_out_write = 1'b1;
    end else begin
        block_cfg_crc_type_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_inv_sigma_sq_V_out_blk_n = block_cfg_inv_sigma_sq_V_out_full_n;
    end else begin
        block_cfg_inv_sigma_sq_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_inv_sigma_sq_V_out_write = 1'b1;
    end else begin
        block_cfg_inv_sigma_sq_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_k_out1_blk_n = block_cfg_k_out1_full_n;
    end else begin
        block_cfg_k_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_k_out1_write = 1'b1;
    end else begin
        block_cfg_k_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_k_out_blk_n = block_cfg_k_out_full_n;
    end else begin
        block_cfg_k_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_k_out_write = 1'b1;
    end else begin
        block_cfg_k_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_max_iterations_out_blk_n = block_cfg_max_iterations_out_full_n;
    end else begin
        block_cfg_max_iterations_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_max_iterations_out_write = 1'b1;
    end else begin
        block_cfg_max_iterations_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_mod_type_out_blk_n = block_cfg_mod_type_out_full_n;
    end else begin
        block_cfg_mod_type_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_mod_type_out_write = 1'b1;
    end else begin
        block_cfg_mod_type_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_n_out_blk_n = block_cfg_n_out_full_n;
    end else begin
        block_cfg_n_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_n_out_write = 1'b1;
    end else begin
        block_cfg_n_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_outputs_out_blk_n = block_cfg_outputs_out_full_n;
    end else begin
        block_cfg_outputs_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_outputs_out_write = 1'b1;
    end else begin
        block_cfg_outputs_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_skip_channel_out_blk_n = block_cfg_skip_channel_out_full_n;
    end else begin
        block_cfg_skip_channel_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_skip_channel_out_write = 1'b1;
    end else begin
        block_cfg_skip_channel_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_snr_V_out_blk_n = block_cfg_snr_V_out_full_n;
    end else begin
        block_cfg_snr_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_snr_V_out_write = 1'b1;
    end else begin
        block_cfg_snr_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        block_cfg_term_on_pass_out_blk_n = block_cfg_term_on_pass_out_full_n;
    end else begin
        block_cfg_term_on_pass_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_cfg_term_on_pass_out_write = 1'b1;
    end else begin
        block_cfg_term_on_pass_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        fec_type_out2_blk_n = fec_type_out2_full_n;
    end else begin
        fec_type_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        fec_type_out2_write = 1'b1;
    end else begin
        fec_type_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        fec_type_out_blk_n = fec_type_out_full_n;
    end else begin
        fec_type_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        fec_type_out_write = 1'b1;
    end else begin
        fec_type_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        hard_words_tx_out_blk_n = hard_words_tx_out_full_n;
    end else begin
        hard_words_tx_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        hard_words_tx_out_write = 1'b1;
    end else begin
        hard_words_tx_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == start_full_n)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        soft_words_tx_out_blk_n = soft_words_tx_out_full_n;
    end else begin
        soft_words_tx_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        soft_words_tx_out_write = 1'b1;
    end else begin
        soft_words_tx_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((1'b0 == real_start) | (1'b0 == block_cfg_code_out_full_n) | (1'b0 == block_cfg_n_out_full_n) | (1'b0 == block_cfg_k_out_full_n) | (1'b0 == block_cfg_k_out1_full_n) | (1'b0 == block_cfg_term_on_pass_out_full_n) | (1'b0 == block_cfg_max_iterations_out_full_n) | (1'b0 == block_cfg_crc_type_out_full_n) | (1'b0 == block_cfg_skip_channel_out_full_n) | (1'b0 == block_cfg_mod_type_out_full_n) | (1'b0 == block_cfg_snr_V_out_full_n) | (1'b0 == block_cfg_inv_sigma_sq_V_out_full_n) | (1'b0 == block_cfg_outputs_out_full_n) | (1'b0 == fec_type_out_full_n) | (1'b0 == fec_type_out2_full_n) | (1'b0 == soft_words_tx_out_full_n) | (1'b0 == hard_words_tx_out_full_n) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign block_cfg_code_out_din = block_cfg_code;

assign block_cfg_crc_type_out_din = block_cfg_crc_type;

assign block_cfg_inv_sigma_sq_V_out_din = block_cfg_inv_sigma_sq_V;

assign block_cfg_k_out1_din = block_cfg_k;

assign block_cfg_k_out_din = block_cfg_k;

assign block_cfg_max_iterations_out_din = block_cfg_max_iterations;

assign block_cfg_mod_type_out_din = block_cfg_mod_type;

assign block_cfg_n_out_din = block_cfg_n;

assign block_cfg_outputs_out_din = block_cfg_outputs;

assign block_cfg_skip_channel_out_din = block_cfg_skip_channel;

assign block_cfg_snr_V_out_din = block_cfg_snr_V;

assign block_cfg_term_on_pass_out_din = block_cfg_term_on_pass;

assign fec_type_out2_din = fec_type;

assign fec_type_out_din = fec_type;

assign hard_words_tx_out_din = hard_words_tx;

assign soft_words_tx_out_din = soft_words_tx;

assign start_out = real_start;

endmodule //run_ber_entry311
