// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module modulate_bits (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        modulation_type,
        symbol_V,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] modulation_type;
input  [5:0] symbol_V;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [0:0] BPSK_LUT_M_real_V_address0;
reg    BPSK_LUT_M_real_V_ce0;
wire   [14:0] BPSK_LUT_M_real_V_q0;
wire   [0:0] BPSK_LUT_M_imag_V_address0;
reg    BPSK_LUT_M_imag_V_ce0;
wire   [14:0] BPSK_LUT_M_imag_V_q0;
wire   [1:0] QAM4_LUT_M_real_V_address0;
reg    QAM4_LUT_M_real_V_ce0;
wire   [14:0] QAM4_LUT_M_real_V_q0;
wire   [1:0] QAM4_LUT_M_imag_V_address0;
reg    QAM4_LUT_M_imag_V_ce0;
wire   [14:0] QAM4_LUT_M_imag_V_q0;
wire   [3:0] QAM16_LUT_M_real_V_address0;
reg    QAM16_LUT_M_real_V_ce0;
wire   [14:0] QAM16_LUT_M_real_V_q0;
wire   [3:0] QAM16_LUT_M_imag_V_address0;
reg    QAM16_LUT_M_imag_V_ce0;
wire   [14:0] QAM16_LUT_M_imag_V_q0;
wire   [5:0] QAM64_LUT_M_real_V_address0;
reg    QAM64_LUT_M_real_V_ce0;
wire   [15:0] QAM64_LUT_M_real_V_q0;
wire   [5:0] QAM64_LUT_M_imag_V_address0;
reg    QAM64_LUT_M_imag_V_ce0;
wire   [15:0] QAM64_LUT_M_imag_V_q0;
wire   [0:0] sel_tmp2_fu_182_p2;
reg   [0:0] sel_tmp2_reg_308;
reg   [0:0] ap_reg_pp0_iter1_sel_tmp2_reg_308;
wire   [0:0] sel_tmp4_fu_188_p2;
reg   [0:0] sel_tmp4_reg_314;
reg   [0:0] ap_reg_pp0_iter1_sel_tmp4_reg_314;
wire   [0:0] sel_tmp6_fu_194_p2;
reg   [0:0] sel_tmp6_reg_319;
reg   [0:0] ap_reg_pp0_iter1_sel_tmp6_reg_319;
reg   [14:0] channel_data_M_real_reg_326;
reg   [14:0] channel_data_M_imag_reg_331;
reg   [14:0] channel_data_M_real_1_reg_336;
reg   [14:0] channel_data_M_imag_1_reg_341;
reg   [14:0] channel_data_M_real_2_reg_346;
reg   [14:0] channel_data_M_imag_2_reg_351;
reg   [15:0] channel_data_M_real_4_reg_356;
reg   [15:0] channel_data_M_imag_4_reg_361;
wire   [63:0] tmp_s_fu_150_p1;
wire   [63:0] tmp_1_fu_160_p1;
wire   [63:0] tmp_2_fu_170_p1;
wire   [63:0] tmp_3_fu_176_p1;
wire   [0:0] tmp_fu_146_p1;
wire   [1:0] tmp_7_fu_156_p1;
wire   [3:0] tmp_8_fu_166_p1;
wire   [14:0] newSel_v_fu_206_p3;
wire  signed [15:0] channel_data_M_imag_3_fu_203_p1;
wire   [0:0] or_cond_fu_215_p2;
wire  signed [15:0] newSel_fu_211_p1;
wire   [15:0] newSel1_fu_219_p3;
wire   [14:0] newSel20_v_fu_233_p3;
wire  signed [15:0] channel_data_M_real_3_fu_200_p1;
wire  signed [15:0] newSel3_fu_238_p1;
wire   [15:0] newSel4_fu_242_p3;
wire   [15:0] complex_M_real_V_wr_fu_248_p3;
wire   [15:0] complex_M_imag_V_wr_fu_225_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

modulate_bits_BPSbkb #(
    .DataWidth( 15 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
BPSK_LUT_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(BPSK_LUT_M_real_V_address0),
    .ce0(BPSK_LUT_M_real_V_ce0),
    .q0(BPSK_LUT_M_real_V_q0)
);

modulate_bits_BPSbkb #(
    .DataWidth( 15 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
BPSK_LUT_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(BPSK_LUT_M_imag_V_address0),
    .ce0(BPSK_LUT_M_imag_V_ce0),
    .q0(BPSK_LUT_M_imag_V_q0)
);

modulate_bits_QAMdEe #(
    .DataWidth( 15 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
QAM4_LUT_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(QAM4_LUT_M_real_V_address0),
    .ce0(QAM4_LUT_M_real_V_ce0),
    .q0(QAM4_LUT_M_real_V_q0)
);

modulate_bits_QAMeOg #(
    .DataWidth( 15 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
QAM4_LUT_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(QAM4_LUT_M_imag_V_address0),
    .ce0(QAM4_LUT_M_imag_V_ce0),
    .q0(QAM4_LUT_M_imag_V_q0)
);

modulate_bits_QAMfYi #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
QAM16_LUT_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(QAM16_LUT_M_real_V_address0),
    .ce0(QAM16_LUT_M_real_V_ce0),
    .q0(QAM16_LUT_M_real_V_q0)
);

modulate_bits_QAMg8j #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
QAM16_LUT_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(QAM16_LUT_M_imag_V_address0),
    .ce0(QAM16_LUT_M_imag_V_ce0),
    .q0(QAM16_LUT_M_imag_V_q0)
);

modulate_bits_QAMhbi #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
QAM64_LUT_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(QAM64_LUT_M_real_V_address0),
    .ce0(QAM64_LUT_M_real_V_ce0),
    .q0(QAM64_LUT_M_real_V_q0)
);

modulate_bits_QAMibs #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
QAM64_LUT_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(QAM64_LUT_M_imag_V_address0),
    .ce0(QAM64_LUT_M_imag_V_ce0),
    .q0(QAM64_LUT_M_imag_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) | (ap_ce == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        ap_reg_pp0_iter1_sel_tmp2_reg_308 <= sel_tmp2_reg_308;
        ap_reg_pp0_iter1_sel_tmp4_reg_314 <= sel_tmp4_reg_314;
        ap_reg_pp0_iter1_sel_tmp6_reg_319 <= sel_tmp6_reg_319;
        channel_data_M_imag_1_reg_341 <= QAM4_LUT_M_imag_V_q0;
        channel_data_M_imag_2_reg_351 <= QAM16_LUT_M_imag_V_q0;
        channel_data_M_imag_4_reg_361 <= QAM64_LUT_M_imag_V_q0;
        channel_data_M_imag_reg_331 <= BPSK_LUT_M_imag_V_q0;
        channel_data_M_real_1_reg_336 <= QAM4_LUT_M_real_V_q0;
        channel_data_M_real_2_reg_346 <= QAM16_LUT_M_real_V_q0;
        channel_data_M_real_4_reg_356 <= QAM64_LUT_M_real_V_q0;
        channel_data_M_real_reg_326 <= BPSK_LUT_M_real_V_q0;
        sel_tmp2_reg_308 <= sel_tmp2_fu_182_p2;
        sel_tmp4_reg_314 <= sel_tmp4_fu_188_p2;
        sel_tmp6_reg_319 <= sel_tmp6_fu_194_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        BPSK_LUT_M_imag_V_ce0 = 1'b1;
    end else begin
        BPSK_LUT_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        BPSK_LUT_M_real_V_ce0 = 1'b1;
    end else begin
        BPSK_LUT_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        QAM16_LUT_M_imag_V_ce0 = 1'b1;
    end else begin
        QAM16_LUT_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        QAM16_LUT_M_real_V_ce0 = 1'b1;
    end else begin
        QAM16_LUT_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        QAM4_LUT_M_imag_V_ce0 = 1'b1;
    end else begin
        QAM4_LUT_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        QAM4_LUT_M_real_V_ce0 = 1'b1;
    end else begin
        QAM4_LUT_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        QAM64_LUT_M_imag_V_ce0 = 1'b1;
    end else begin
        QAM64_LUT_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        QAM64_LUT_M_real_V_ce0 = 1'b1;
    end else begin
        QAM64_LUT_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0)) | (~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_idle_pp0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b0 == ap_start) & (1'b1 == ap_enable_reg_pp0_iter0)) & (ap_ce == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_idle_pp0_0to1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BPSK_LUT_M_imag_V_address0 = tmp_s_fu_150_p1;

assign BPSK_LUT_M_real_V_address0 = tmp_s_fu_150_p1;

assign QAM16_LUT_M_imag_V_address0 = tmp_2_fu_170_p1;

assign QAM16_LUT_M_real_V_address0 = tmp_2_fu_170_p1;

assign QAM4_LUT_M_imag_V_address0 = tmp_1_fu_160_p1;

assign QAM4_LUT_M_real_V_address0 = tmp_1_fu_160_p1;

assign QAM64_LUT_M_imag_V_address0 = tmp_3_fu_176_p1;

assign QAM64_LUT_M_real_V_address0 = tmp_3_fu_176_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = complex_M_real_V_wr_fu_248_p3;

assign ap_return_1 = complex_M_imag_V_wr_fu_225_p3;

assign channel_data_M_imag_3_fu_203_p1 = $signed(channel_data_M_imag_2_reg_351);

assign channel_data_M_real_3_fu_200_p1 = $signed(channel_data_M_real_2_reg_346);

assign complex_M_imag_V_wr_fu_225_p3 = ((or_cond_fu_215_p2[0:0] === 1'b1) ? newSel_fu_211_p1 : newSel1_fu_219_p3);

assign complex_M_real_V_wr_fu_248_p3 = ((or_cond_fu_215_p2[0:0] === 1'b1) ? newSel3_fu_238_p1 : newSel4_fu_242_p3);

assign newSel1_fu_219_p3 = ((ap_reg_pp0_iter1_sel_tmp2_reg_308[0:0] === 1'b1) ? channel_data_M_imag_3_fu_203_p1 : channel_data_M_imag_4_reg_361);

assign newSel20_v_fu_233_p3 = ((ap_reg_pp0_iter1_sel_tmp6_reg_319[0:0] === 1'b1) ? channel_data_M_real_reg_326 : channel_data_M_real_1_reg_336);

assign newSel3_fu_238_p1 = $signed(newSel20_v_fu_233_p3);

assign newSel4_fu_242_p3 = ((ap_reg_pp0_iter1_sel_tmp2_reg_308[0:0] === 1'b1) ? channel_data_M_real_3_fu_200_p1 : channel_data_M_real_4_reg_356);

assign newSel_fu_211_p1 = $signed(newSel_v_fu_206_p3);

assign newSel_v_fu_206_p3 = ((ap_reg_pp0_iter1_sel_tmp6_reg_319[0:0] === 1'b1) ? channel_data_M_imag_reg_331 : channel_data_M_imag_1_reg_341);

assign or_cond_fu_215_p2 = (ap_reg_pp0_iter1_sel_tmp6_reg_319 | ap_reg_pp0_iter1_sel_tmp4_reg_314);

assign sel_tmp2_fu_182_p2 = ((modulation_type == 32'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_188_p2 = ((modulation_type == 32'd1) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_194_p2 = ((modulation_type == 32'd0) ? 1'b1 : 1'b0);

assign tmp_1_fu_160_p1 = tmp_7_fu_156_p1;

assign tmp_2_fu_170_p1 = tmp_8_fu_166_p1;

assign tmp_3_fu_176_p1 = symbol_V;

assign tmp_7_fu_156_p1 = symbol_V[1:0];

assign tmp_8_fu_166_p1 = symbol_V[3:0];

assign tmp_fu_146_p1 = symbol_V[0:0];

assign tmp_s_fu_150_p1 = tmp_fu_146_p1;

endmodule //modulate_bits
