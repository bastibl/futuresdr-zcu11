// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gen_hard_words (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        k_dout,
        k_empty_n,
        k_read,
        hard_words_tx_dout,
        hard_words_tx_empty_n,
        hard_words_tx_read,
        hard_words_TDATA,
        hard_words_TVALID,
        hard_words_TREADY,
        hard_words_TLAST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] k_dout;
input   k_empty_n;
output   k_read;
input  [31:0] hard_words_tx_dout;
input   hard_words_tx_empty_n;
output   hard_words_tx_read;
output  [7:0] hard_words_TDATA;
output   hard_words_TVALID;
input   hard_words_TREADY;
output  [0:0] hard_words_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg k_read;
reg hard_words_tx_read;
reg hard_words_TVALID;
reg[0:0] hard_words_TLAST;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    k_blk_n;
reg    hard_words_tx_blk_n;
reg    hard_words_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_i_fu_108_p2;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_25_i_reg_153;
reg   [31:0] i_i_reg_97;
reg   [31:0] size_reg_128;
reg    ap_block_state1;
reg   [31:0] hard_words_tx_read_reg_134;
reg    ap_sig_ioackin_hard_words_TREADY;
reg    ap_block_state2_io;
wire   [0:0] tmp_i_68_fu_113_p2;
reg   [0:0] tmp_i_68_reg_143;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_block_state5_io;
wire   [31:0] i_fu_118_p2;
reg   [31:0] i_reg_147;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_25_i_fu_124_p2;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] i_i_phi_fu_101_p4;
reg    ap_reg_ioackin_hard_words_TREADY;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_hard_words_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)) & (1'd0 == tmp_i_68_fu_113_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_io == 1'b0) & (tmp_i_fu_108_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)) & ~(1'd0 == tmp_i_68_fu_113_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_io == 1'b0) & (tmp_i_fu_108_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)) & (1'd0 == tmp_i_68_fu_113_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_io == 1'b0) & (tmp_i_fu_108_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_hard_words_TREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_108_p2 == 1'd1) & (ap_block_state2_io == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (tmp_25_i_reg_153 == 1'd0) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == tmp_25_i_reg_153) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io))))) begin
            ap_reg_ioackin_hard_words_TREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_108_p2 == 1'd1) & (1'b1 == hard_words_TREADY)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (tmp_25_i_reg_153 == 1'd0) & (1'b1 == hard_words_TREADY)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == tmp_25_i_reg_153) & (1'b1 == hard_words_TREADY)))) begin
            ap_reg_ioackin_hard_words_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_block_state2_io == 1'b0) & (tmp_i_fu_108_p2 == 1'd0))) begin
        i_i_reg_97 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)) & (1'd1 == tmp_i_68_reg_143) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_i_reg_97 <= i_reg_147;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        hard_words_tx_read_reg_134 <= hard_words_tx_dout;
        size_reg_128 <= k_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_i_68_fu_113_p2))) begin
        i_reg_147 <= i_fu_118_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)) & (1'd1 == tmp_i_68_reg_143))) begin
        tmp_25_i_reg_153 <= tmp_25_i_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)))) begin
        tmp_i_68_reg_143 <= tmp_i_68_fu_113_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_hard_words_TREADY)) begin
        ap_sig_ioackin_hard_words_TREADY = hard_words_TREADY;
    end else begin
        ap_sig_ioackin_hard_words_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_108_p2 == 1'd1)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (tmp_25_i_reg_153 == 1'd0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == tmp_25_i_reg_153)))) begin
        hard_words_TDATA_blk_n = hard_words_TREADY;
    end else begin
        hard_words_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == tmp_25_i_reg_153))) begin
        hard_words_TLAST = 1'd0;
    end else if ((((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_108_p2 == 1'd1)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (tmp_25_i_reg_153 == 1'd0)))) begin
        hard_words_TLAST = 1'd1;
    end else begin
        hard_words_TLAST = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (tmp_i_fu_108_p2 == 1'd1) & (1'b0 == ap_reg_ioackin_hard_words_TREADY)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (tmp_25_i_reg_153 == 1'd0) & (1'b0 == ap_reg_ioackin_hard_words_TREADY)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == tmp_25_i_reg_153) & (1'b0 == ap_reg_ioackin_hard_words_TREADY)))) begin
        hard_words_TVALID = 1'b1;
    end else begin
        hard_words_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        hard_words_tx_blk_n = hard_words_tx_empty_n;
    end else begin
        hard_words_tx_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        hard_words_tx_read = 1'b1;
    end else begin
        hard_words_tx_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_i_68_reg_143) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_i_phi_fu_101_p4 = i_reg_147;
    end else begin
        i_i_phi_fu_101_p4 = i_i_reg_97;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        k_blk_n = k_empty_n;
    end else begin
        k_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        k_read = 1'b1;
    end else begin
        k_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((ap_block_state1 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_i_fu_108_p2 == 1'd1) & (ap_block_state2_io == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if (((ap_block_state2_io == 1'b0) & (tmp_i_fu_108_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~(~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_i_68_fu_113_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & ~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)) & (ap_enable_reg_pp0_iter1 == 1'b0)) | (~((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == tmp_i_68_fu_113_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == k_empty_n) | (1'b0 == hard_words_tx_empty_n));
end

always @ (*) begin
    ap_block_state2_io = ((tmp_i_fu_108_p2 == 1'd1) & (1'b0 == ap_sig_ioackin_hard_words_TREADY));
end

always @ (*) begin
    ap_block_state5_io = (((tmp_25_i_reg_153 == 1'd0) & (1'b0 == ap_sig_ioackin_hard_words_TREADY)) | ((1'd1 == tmp_25_i_reg_153) & (1'b0 == ap_sig_ioackin_hard_words_TREADY)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign hard_words_TDATA = 8'd16;

assign i_fu_118_p2 = (i_i_phi_fu_101_p4 + 32'd128);

assign tmp_25_i_fu_124_p2 = ((i_reg_147 < size_reg_128) ? 1'b1 : 1'b0);

assign tmp_i_68_fu_113_p2 = ((i_i_phi_fu_101_p4 < size_reg_128) ? 1'b1 : 1'b0);

assign tmp_i_fu_108_p2 = ((hard_words_tx_read_reg_134 == 32'd0) ? 1'b1 : 1'b0);

endmodule //gen_hard_words
