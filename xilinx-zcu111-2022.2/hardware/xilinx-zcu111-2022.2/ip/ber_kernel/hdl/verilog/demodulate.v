// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module demodulate (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        modulation_type_dout,
        modulation_type_empty_n,
        modulation_type_read,
        block_size_dout,
        block_size_empty_n,
        block_size_read,
        inv_sigma_sq_V_dout,
        inv_sigma_sq_V_empty_n,
        inv_sigma_sq_V_read,
        chan_data_V_M_real_s_dout,
        chan_data_V_M_real_s_empty_n,
        chan_data_V_M_real_s_read,
        chan_data_V_M_imag_s_dout,
        chan_data_V_M_imag_s_empty_n,
        chan_data_V_M_imag_s_read,
        soft_data_V_V_din,
        soft_data_V_V_full_n,
        soft_data_V_V_write,
        block_size_out_din,
        block_size_out_full_n,
        block_size_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state26 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] modulation_type_dout;
input   modulation_type_empty_n;
output   modulation_type_read;
input  [31:0] block_size_dout;
input   block_size_empty_n;
output   block_size_read;
input  [16:0] inv_sigma_sq_V_dout;
input   inv_sigma_sq_V_empty_n;
output   inv_sigma_sq_V_read;
input  [18:0] chan_data_V_M_real_s_dout;
input   chan_data_V_M_real_s_empty_n;
output   chan_data_V_M_real_s_read;
input  [18:0] chan_data_V_M_imag_s_dout;
input   chan_data_V_M_imag_s_empty_n;
output   chan_data_V_M_imag_s_read;
output  [15:0] soft_data_V_V_din;
input   soft_data_V_V_full_n;
output   soft_data_V_V_write;
output  [31:0] block_size_out_din;
input   block_size_out_full_n;
output   block_size_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg modulation_type_read;
reg block_size_read;
reg inv_sigma_sq_V_read;
reg soft_data_V_V_write;
reg block_size_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    modulation_type_blk_n;
reg    block_size_blk_n;
reg    inv_sigma_sq_V_blk_n;
reg    chan_data_V_M_real_s_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_i_70_reg_566;
reg    chan_data_V_M_imag_s_blk_n;
reg    soft_data_V_V_blk_n;
reg    ap_enable_reg_pp0_iter21;
reg   [0:0] exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter20_exitcond_i_reg_557;
reg    block_size_out_blk_n;
reg   [7:0] sym_i_i_reg_271;
reg   [31:0] i_i_reg_282;
wire   [31:0] modulation_type_read_read_fu_192_p2;
reg   [31:0] modulation_type_read_reg_484;
reg    ap_block_state1;
reg   [31:0] block_size_read_reg_489;
reg   [16:0] inv_sigma_sq_V_read_reg_494;
wire   [2:0] tmp_fu_316_p1;
wire   [0:0] tmp_i_fu_320_p2;
reg   [0:0] tmp_i_reg_542;
wire    ap_CS_fsm_state2;
wire   [8:0] symbol_bits_cast_i_fu_325_p1;
reg   [8:0] symbol_bits_cast_i_reg_547;
wire    ap_CS_fsm_state3;
wire   [16:0] inv_sigma_sq_mod_V_1_fu_334_p3;
reg   [16:0] inv_sigma_sq_mod_V_1_reg_552;
wire   [0:0] exitcond_i_fu_340_p2;
wire    chan_data_V_M_real_s0_status;
reg    ap_block_state5;
reg    ap_block_state25;
reg   [0:0] ap_reg_pp0_iter1_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter2_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter3_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter4_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter5_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter6_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter7_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter8_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter9_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter10_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter11_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter12_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter13_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter14_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter15_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter16_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter17_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter18_exitcond_i_reg_557;
reg   [0:0] ap_reg_pp0_iter19_exitcond_i_reg_557;
wire   [31:0] i_fu_345_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_i_70_fu_351_p2;
reg   [0:0] ap_reg_pp0_iter1_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter2_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter3_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter4_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter5_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter6_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter7_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter8_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter9_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter10_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter11_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter12_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter13_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter14_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter15_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter16_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter17_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter18_tmp_i_70_reg_566;
reg   [0:0] ap_reg_pp0_iter19_tmp_i_70_reg_566;
wire   [2:0] tmp_12_fu_357_p1;
reg   [2:0] tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter1_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter2_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter3_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter4_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter5_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter6_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter7_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter8_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter9_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter10_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter11_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter12_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter13_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter14_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter15_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter16_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter17_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter18_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter19_tmp_12_reg_570;
reg   [2:0] ap_reg_pp0_iter20_tmp_12_reg_570;
wire   [7:0] sym_i_1_fu_376_p3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
wire    grp_operator_s_fu_293_ap_start;
wire    grp_operator_s_fu_293_ap_done;
wire    grp_operator_s_fu_293_ap_idle;
wire    grp_operator_s_fu_293_ap_ready;
reg    grp_operator_s_fu_293_ap_ce;
wire   [15:0] grp_operator_s_fu_293_ap_return_0;
wire   [15:0] grp_operator_s_fu_293_ap_return_1;
wire   [15:0] grp_operator_s_fu_293_ap_return_2;
wire   [15:0] grp_operator_s_fu_293_ap_return_3;
wire   [15:0] grp_operator_s_fu_293_ap_return_4;
wire   [15:0] grp_operator_s_fu_293_ap_return_5;
reg    ap_block_state5_ignore_call3;
reg    ap_block_state25_ignore_call3;
reg   [1:0] p_i_reg_233;
reg   [2:0] symbol_bits_i_reg_254;
reg    ap_reg_grp_operator_s_fu_293_ap_start;
reg    chan_data_V_M_real_s0_update;
wire   [15:0] p_Val2_s_fu_466_p8;
reg   [15:0] llr_0_V_1_fu_168;
reg   [15:0] llr_1_V_1_fu_172;
reg   [15:0] llr_2_V_1_fu_176;
reg   [15:0] llr_3_V_1_fu_180;
reg   [15:0] llr_4_V_1_fu_184;
reg   [15:0] llr_5_V_1_fu_188;
wire   [16:0] inv_sigma_sq_mod_V_fu_329_p2;
wire   [8:0] tmp_26_cast_i_fu_361_p1;
wire   [0:0] tmp_27_i_fu_365_p2;
wire   [7:0] sym_i_fu_370_p2;
wire    ap_CS_fsm_state26;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_reg_grp_operator_s_fu_293_ap_start = 1'b0;
end

operator_s grp_operator_s_fu_293(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_operator_s_fu_293_ap_start),
    .ap_done(grp_operator_s_fu_293_ap_done),
    .ap_idle(grp_operator_s_fu_293_ap_idle),
    .ap_ready(grp_operator_s_fu_293_ap_ready),
    .ap_ce(grp_operator_s_fu_293_ap_ce),
    .mod_type_V(p_i_reg_233),
    .sym_M_real_V(chan_data_V_M_real_s_dout),
    .sym_M_imag_V(chan_data_V_M_imag_s_dout),
    .inv_sigma_sq_V(inv_sigma_sq_mod_V_1_reg_552),
    .ap_return_0(grp_operator_s_fu_293_ap_return_0),
    .ap_return_1(grp_operator_s_fu_293_ap_return_1),
    .ap_return_2(grp_operator_s_fu_293_ap_return_2),
    .ap_return_3(grp_operator_s_fu_293_ap_return_3),
    .ap_return_4(grp_operator_s_fu_293_ap_return_4),
    .ap_return_5(grp_operator_s_fu_293_ap_return_5)
);

ber_kernel_mux_63CeG #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 3 ),
    .dout_WIDTH( 16 ))
ber_kernel_mux_63CeG_U126(
    .din1(llr_0_V_1_fu_168),
    .din2(llr_1_V_1_fu_172),
    .din3(llr_2_V_1_fu_176),
    .din4(llr_3_V_1_fu_180),
    .din5(llr_4_V_1_fu_184),
    .din6(llr_5_V_1_fu_188),
    .din7(ap_reg_pp0_iter20_tmp_12_reg_570),
    .dout(p_Val2_s_fu_466_p8)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (1'd1 == exitcond_i_fu_340_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & ~(1'd1 == exitcond_i_fu_340_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (1'd1 == exitcond_i_fu_340_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter21 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_operator_s_fu_293_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == tmp_i_70_fu_351_p2))) begin
            ap_reg_grp_operator_s_fu_293_ap_start <= 1'b1;
        end else if ((1'b1 == grp_operator_s_fu_293_ap_ready)) begin
            ap_reg_grp_operator_s_fu_293_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_i_fu_340_p2))) begin
        i_i_reg_282 <= i_fu_345_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_i_reg_282 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & (32'd0 == modulation_type_read_read_fu_192_p2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & (modulation_type_read_read_fu_192_p2 == 32'd1)))) begin
        p_i_reg_233 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & (modulation_type_read_read_fu_192_p2 == 32'd2))) begin
        p_i_reg_233 <= 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & (32'd3 == modulation_type_read_read_fu_192_p2))) begin
        p_i_reg_233 <= 2'd2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_i_fu_340_p2))) begin
        sym_i_i_reg_271 <= sym_i_1_fu_376_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sym_i_i_reg_271 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & (32'd0 == modulation_type_read_read_fu_192_p2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & (modulation_type_read_read_fu_192_p2 == 32'd1)))) begin
        symbol_bits_i_reg_254 <= tmp_fu_316_p1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & (modulation_type_read_read_fu_192_p2 == 32'd2))) begin
        symbol_bits_i_reg_254 <= 3'd3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0) & (32'd3 == modulation_type_read_read_fu_192_p2))) begin
        symbol_bits_i_reg_254 <= 3'd5;
    end
end

always @ (posedge ap_clk) begin
    if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25)))) begin
        ap_reg_pp0_iter10_exitcond_i_reg_557 <= ap_reg_pp0_iter9_exitcond_i_reg_557;
        ap_reg_pp0_iter10_tmp_12_reg_570 <= ap_reg_pp0_iter9_tmp_12_reg_570;
        ap_reg_pp0_iter10_tmp_i_70_reg_566 <= ap_reg_pp0_iter9_tmp_i_70_reg_566;
        ap_reg_pp0_iter11_exitcond_i_reg_557 <= ap_reg_pp0_iter10_exitcond_i_reg_557;
        ap_reg_pp0_iter11_tmp_12_reg_570 <= ap_reg_pp0_iter10_tmp_12_reg_570;
        ap_reg_pp0_iter11_tmp_i_70_reg_566 <= ap_reg_pp0_iter10_tmp_i_70_reg_566;
        ap_reg_pp0_iter12_exitcond_i_reg_557 <= ap_reg_pp0_iter11_exitcond_i_reg_557;
        ap_reg_pp0_iter12_tmp_12_reg_570 <= ap_reg_pp0_iter11_tmp_12_reg_570;
        ap_reg_pp0_iter12_tmp_i_70_reg_566 <= ap_reg_pp0_iter11_tmp_i_70_reg_566;
        ap_reg_pp0_iter13_exitcond_i_reg_557 <= ap_reg_pp0_iter12_exitcond_i_reg_557;
        ap_reg_pp0_iter13_tmp_12_reg_570 <= ap_reg_pp0_iter12_tmp_12_reg_570;
        ap_reg_pp0_iter13_tmp_i_70_reg_566 <= ap_reg_pp0_iter12_tmp_i_70_reg_566;
        ap_reg_pp0_iter14_exitcond_i_reg_557 <= ap_reg_pp0_iter13_exitcond_i_reg_557;
        ap_reg_pp0_iter14_tmp_12_reg_570 <= ap_reg_pp0_iter13_tmp_12_reg_570;
        ap_reg_pp0_iter14_tmp_i_70_reg_566 <= ap_reg_pp0_iter13_tmp_i_70_reg_566;
        ap_reg_pp0_iter15_exitcond_i_reg_557 <= ap_reg_pp0_iter14_exitcond_i_reg_557;
        ap_reg_pp0_iter15_tmp_12_reg_570 <= ap_reg_pp0_iter14_tmp_12_reg_570;
        ap_reg_pp0_iter15_tmp_i_70_reg_566 <= ap_reg_pp0_iter14_tmp_i_70_reg_566;
        ap_reg_pp0_iter16_exitcond_i_reg_557 <= ap_reg_pp0_iter15_exitcond_i_reg_557;
        ap_reg_pp0_iter16_tmp_12_reg_570 <= ap_reg_pp0_iter15_tmp_12_reg_570;
        ap_reg_pp0_iter16_tmp_i_70_reg_566 <= ap_reg_pp0_iter15_tmp_i_70_reg_566;
        ap_reg_pp0_iter17_exitcond_i_reg_557 <= ap_reg_pp0_iter16_exitcond_i_reg_557;
        ap_reg_pp0_iter17_tmp_12_reg_570 <= ap_reg_pp0_iter16_tmp_12_reg_570;
        ap_reg_pp0_iter17_tmp_i_70_reg_566 <= ap_reg_pp0_iter16_tmp_i_70_reg_566;
        ap_reg_pp0_iter18_exitcond_i_reg_557 <= ap_reg_pp0_iter17_exitcond_i_reg_557;
        ap_reg_pp0_iter18_tmp_12_reg_570 <= ap_reg_pp0_iter17_tmp_12_reg_570;
        ap_reg_pp0_iter18_tmp_i_70_reg_566 <= ap_reg_pp0_iter17_tmp_i_70_reg_566;
        ap_reg_pp0_iter19_exitcond_i_reg_557 <= ap_reg_pp0_iter18_exitcond_i_reg_557;
        ap_reg_pp0_iter19_tmp_12_reg_570 <= ap_reg_pp0_iter18_tmp_12_reg_570;
        ap_reg_pp0_iter19_tmp_i_70_reg_566 <= ap_reg_pp0_iter18_tmp_i_70_reg_566;
        ap_reg_pp0_iter20_exitcond_i_reg_557 <= ap_reg_pp0_iter19_exitcond_i_reg_557;
        ap_reg_pp0_iter20_tmp_12_reg_570 <= ap_reg_pp0_iter19_tmp_12_reg_570;
        ap_reg_pp0_iter2_exitcond_i_reg_557 <= ap_reg_pp0_iter1_exitcond_i_reg_557;
        ap_reg_pp0_iter2_tmp_12_reg_570 <= ap_reg_pp0_iter1_tmp_12_reg_570;
        ap_reg_pp0_iter2_tmp_i_70_reg_566 <= ap_reg_pp0_iter1_tmp_i_70_reg_566;
        ap_reg_pp0_iter3_exitcond_i_reg_557 <= ap_reg_pp0_iter2_exitcond_i_reg_557;
        ap_reg_pp0_iter3_tmp_12_reg_570 <= ap_reg_pp0_iter2_tmp_12_reg_570;
        ap_reg_pp0_iter3_tmp_i_70_reg_566 <= ap_reg_pp0_iter2_tmp_i_70_reg_566;
        ap_reg_pp0_iter4_exitcond_i_reg_557 <= ap_reg_pp0_iter3_exitcond_i_reg_557;
        ap_reg_pp0_iter4_tmp_12_reg_570 <= ap_reg_pp0_iter3_tmp_12_reg_570;
        ap_reg_pp0_iter4_tmp_i_70_reg_566 <= ap_reg_pp0_iter3_tmp_i_70_reg_566;
        ap_reg_pp0_iter5_exitcond_i_reg_557 <= ap_reg_pp0_iter4_exitcond_i_reg_557;
        ap_reg_pp0_iter5_tmp_12_reg_570 <= ap_reg_pp0_iter4_tmp_12_reg_570;
        ap_reg_pp0_iter5_tmp_i_70_reg_566 <= ap_reg_pp0_iter4_tmp_i_70_reg_566;
        ap_reg_pp0_iter6_exitcond_i_reg_557 <= ap_reg_pp0_iter5_exitcond_i_reg_557;
        ap_reg_pp0_iter6_tmp_12_reg_570 <= ap_reg_pp0_iter5_tmp_12_reg_570;
        ap_reg_pp0_iter6_tmp_i_70_reg_566 <= ap_reg_pp0_iter5_tmp_i_70_reg_566;
        ap_reg_pp0_iter7_exitcond_i_reg_557 <= ap_reg_pp0_iter6_exitcond_i_reg_557;
        ap_reg_pp0_iter7_tmp_12_reg_570 <= ap_reg_pp0_iter6_tmp_12_reg_570;
        ap_reg_pp0_iter7_tmp_i_70_reg_566 <= ap_reg_pp0_iter6_tmp_i_70_reg_566;
        ap_reg_pp0_iter8_exitcond_i_reg_557 <= ap_reg_pp0_iter7_exitcond_i_reg_557;
        ap_reg_pp0_iter8_tmp_12_reg_570 <= ap_reg_pp0_iter7_tmp_12_reg_570;
        ap_reg_pp0_iter8_tmp_i_70_reg_566 <= ap_reg_pp0_iter7_tmp_i_70_reg_566;
        ap_reg_pp0_iter9_exitcond_i_reg_557 <= ap_reg_pp0_iter8_exitcond_i_reg_557;
        ap_reg_pp0_iter9_tmp_12_reg_570 <= ap_reg_pp0_iter8_tmp_12_reg_570;
        ap_reg_pp0_iter9_tmp_i_70_reg_566 <= ap_reg_pp0_iter8_tmp_i_70_reg_566;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))))) begin
        ap_reg_pp0_iter1_exitcond_i_reg_557 <= exitcond_i_reg_557;
        ap_reg_pp0_iter1_tmp_12_reg_570 <= tmp_12_reg_570;
        ap_reg_pp0_iter1_tmp_i_70_reg_566 <= tmp_i_70_reg_566;
        exitcond_i_reg_557 <= exitcond_i_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_size_read_reg_489 <= block_size_dout;
        inv_sigma_sq_V_read_reg_494 <= inv_sigma_sq_V_dout;
        modulation_type_read_reg_484 <= modulation_type_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inv_sigma_sq_mod_V_1_reg_552 <= inv_sigma_sq_mod_V_1_fu_334_p3;
        symbol_bits_cast_i_reg_547[2 : 0] <= symbol_bits_cast_i_fu_325_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (1'd1 == ap_reg_pp0_iter19_tmp_i_70_reg_566) & (1'b1 == ap_enable_reg_pp0_iter20))) begin
        llr_0_V_1_fu_168 <= grp_operator_s_fu_293_ap_return_0;
        llr_1_V_1_fu_172 <= grp_operator_s_fu_293_ap_return_1;
        llr_2_V_1_fu_176 <= grp_operator_s_fu_293_ap_return_2;
        llr_3_V_1_fu_180 <= grp_operator_s_fu_293_ap_return_3;
        llr_4_V_1_fu_184 <= grp_operator_s_fu_293_ap_return_4;
        llr_5_V_1_fu_188 <= grp_operator_s_fu_293_ap_return_5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (1'd0 == exitcond_i_fu_340_p2))) begin
        tmp_12_reg_570 <= tmp_12_fu_357_p1;
        tmp_i_70_reg_566 <= tmp_i_70_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_i_reg_542 <= tmp_i_fu_320_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_CS_fsm_state26))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter13) & (1'b0 == ap_enable_reg_pp0_iter14) & (1'b0 == ap_enable_reg_pp0_iter15) & (1'b0 == ap_enable_reg_pp0_iter16) & (1'b0 == ap_enable_reg_pp0_iter17) & (1'b0 == ap_enable_reg_pp0_iter18) & (1'b0 == ap_enable_reg_pp0_iter19) & (1'b0 == ap_enable_reg_pp0_iter20) & (1'b0 == ap_enable_reg_pp0_iter21))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        block_size_blk_n = block_size_empty_n;
    end else begin
        block_size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        block_size_out_blk_n = block_size_out_full_n;
    end else begin
        block_size_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_size_out_write = 1'b1;
    end else begin
        block_size_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        block_size_read = 1'b1;
    end else begin
        block_size_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_i_70_reg_566 == 1'd1))) begin
        chan_data_V_M_imag_s_blk_n = chan_data_V_M_imag_s_empty_n;
    end else begin
        chan_data_V_M_imag_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_i_70_reg_566 == 1'd1) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))))) begin
        chan_data_V_M_real_s0_update = 1'b1;
    end else begin
        chan_data_V_M_real_s0_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_i_70_reg_566 == 1'd1))) begin
        chan_data_V_M_real_s_blk_n = chan_data_V_M_real_s_empty_n;
    end else begin
        chan_data_V_M_real_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5_ignore_call3)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25_ignore_call3))))) begin
        grp_operator_s_fu_293_ap_ce = 1'b1;
    end else begin
        grp_operator_s_fu_293_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        inv_sigma_sq_V_blk_n = inv_sigma_sq_V_empty_n;
    end else begin
        inv_sigma_sq_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        inv_sigma_sq_V_read = 1'b1;
    end else begin
        inv_sigma_sq_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (ap_done_reg == 1'b1)))) begin
        modulation_type_blk_n = modulation_type_empty_n;
    end else begin
        modulation_type_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_block_state1 == 1'b0))) begin
        modulation_type_read = 1'b1;
    end else begin
        modulation_type_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter21) & (ap_reg_pp0_iter20_exitcond_i_reg_557 == 1'd0))) begin
        soft_data_V_V_blk_n = soft_data_V_V_full_n;
    end else begin
        soft_data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter21) & (ap_reg_pp0_iter20_exitcond_i_reg_557 == 1'd0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))))) begin
        soft_data_V_V_write = 1'b1;
    end else begin
        soft_data_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_block_state1 == 1'b0) & ~(32'd0 == modulation_type_read_read_fu_192_p2) & ~(modulation_type_read_read_fu_192_p2 == 32'd1) & ~(modulation_type_read_read_fu_192_p2 == 32'd2) & ~(32'd3 == modulation_type_read_read_fu_192_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else if (((ap_block_state1 == 1'b0) & ((32'd3 == modulation_type_read_read_fu_192_p2) | (modulation_type_read_read_fu_192_p2 == 32'd2) | (32'd0 == modulation_type_read_read_fu_192_p2) | (modulation_type_read_read_fu_192_p2 == 32'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter21) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (ap_enable_reg_pp0_iter20 == 1'b0)) & ~(~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == exitcond_i_fu_340_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter21) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (ap_enable_reg_pp0_iter20 == 1'b0)) | (~(((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_block_state5)) | ((1'b1 == ap_enable_reg_pp0_iter21) & (1'b1 == ap_block_state25))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd1 == exitcond_i_fu_340_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (ap_done_reg == 1'b1) | (1'b0 == modulation_type_empty_n) | (1'b0 == block_size_empty_n) | (1'b0 == inv_sigma_sq_V_empty_n) | (1'b0 == block_size_out_full_n));
end

always @ (*) begin
    ap_block_state25 = ((ap_reg_pp0_iter20_exitcond_i_reg_557 == 1'd0) & (1'b0 == soft_data_V_V_full_n));
end

always @ (*) begin
    ap_block_state25_ignore_call3 = ((ap_reg_pp0_iter20_exitcond_i_reg_557 == 1'd0) & (1'b0 == soft_data_V_V_full_n));
end

always @ (*) begin
    ap_block_state5 = ((tmp_i_70_reg_566 == 1'd1) & (1'b0 == chan_data_V_M_real_s0_status));
end

always @ (*) begin
    ap_block_state5_ignore_call3 = ((tmp_i_70_reg_566 == 1'd1) & (1'b0 == chan_data_V_M_real_s0_status));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign block_size_out_din = block_size_dout;

assign chan_data_V_M_imag_s_read = chan_data_V_M_real_s0_update;

assign chan_data_V_M_real_s0_status = (chan_data_V_M_real_s_empty_n & chan_data_V_M_imag_s_empty_n);

assign chan_data_V_M_real_s_read = chan_data_V_M_real_s0_update;

assign exitcond_i_fu_340_p2 = ((i_i_reg_282 == block_size_read_reg_489) ? 1'b1 : 1'b0);

assign grp_operator_s_fu_293_ap_start = ap_reg_grp_operator_s_fu_293_ap_start;

assign i_fu_345_p2 = (i_i_reg_282 + 32'd1);

assign inv_sigma_sq_mod_V_1_fu_334_p3 = ((tmp_i_reg_542[0:0] === 1'b1) ? inv_sigma_sq_mod_V_fu_329_p2 : inv_sigma_sq_V_read_reg_494);

assign inv_sigma_sq_mod_V_fu_329_p2 = inv_sigma_sq_V_read_reg_494 << 17'd1;

assign modulation_type_read_read_fu_192_p2 = modulation_type_dout;

assign soft_data_V_V_din = p_Val2_s_fu_466_p8;

assign sym_i_1_fu_376_p3 = ((tmp_27_i_fu_365_p2[0:0] === 1'b1) ? 8'd0 : sym_i_fu_370_p2);

assign sym_i_fu_370_p2 = (8'd1 + sym_i_i_reg_271);

assign symbol_bits_cast_i_fu_325_p1 = symbol_bits_i_reg_254;

assign tmp_12_fu_357_p1 = sym_i_i_reg_271[2:0];

assign tmp_26_cast_i_fu_361_p1 = sym_i_i_reg_271;

assign tmp_27_i_fu_365_p2 = ((tmp_26_cast_i_fu_361_p1 == symbol_bits_cast_i_reg_547) ? 1'b1 : 1'b0);

assign tmp_fu_316_p1 = modulation_type_dout[2:0];

assign tmp_i_70_fu_351_p2 = ((sym_i_i_reg_271 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_i_fu_320_p2 = ((modulation_type_read_reg_484 == 32'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    symbol_bits_cast_i_reg_547[8:3] <= 6'b000000;
end

endmodule //demodulate
