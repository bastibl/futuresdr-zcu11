-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_ber_Loop_dup_cha is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    chan_data_g_V_M_real_V_dout : IN STD_LOGIC_VECTOR (18 downto 0);
    chan_data_g_V_M_real_V_empty_n : IN STD_LOGIC;
    chan_data_g_V_M_real_V_read : OUT STD_LOGIC;
    chan_data_g_V_M_imag_V_dout : IN STD_LOGIC_VECTOR (18 downto 0);
    chan_data_g_V_M_imag_V_empty_n : IN STD_LOGIC;
    chan_data_g_V_M_imag_V_read : OUT STD_LOGIC;
    chan_data_i_V_M_real_V_din : OUT STD_LOGIC_VECTOR (18 downto 0);
    chan_data_i_V_M_real_V_full_n : IN STD_LOGIC;
    chan_data_i_V_M_real_V_write : OUT STD_LOGIC;
    chan_data_i_V_M_imag_V_din : OUT STD_LOGIC_VECTOR (18 downto 0);
    chan_data_i_V_M_imag_V_full_n : IN STD_LOGIC;
    chan_data_i_V_M_imag_V_write : OUT STD_LOGIC;
    block_cfg_outputs_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_outputs_empty_n : IN STD_LOGIC;
    block_cfg_outputs_read : OUT STD_LOGIC;
    chan_data_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    chan_data_last_V_empty_n : IN STD_LOGIC;
    chan_data_last_V_read : OUT STD_LOGIC );
end;


architecture behav of run_ber_Loop_dup_cha is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal chan_data_g_V_M_real_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal chan_data_g_V_M_imag_V_blk_n : STD_LOGIC;
    signal chan_data_i_V_M_real_V_blk_n : STD_LOGIC;
    signal chan_data_i_V_M_imag_V_blk_n : STD_LOGIC;
    signal block_cfg_outputs_blk_n : STD_LOGIC;
    signal chan_data_last_V_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal chan_data_g_V_M_real_V0_update : STD_LOGIC;
    signal chan_data_g_V_M_real_V0_status : STD_LOGIC;
    signal chan_data_i_V_M_real_V1_status : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal chan_data_i_V_M_real_V1_update : STD_LOGIC;
    signal tmp_5_read_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_state1, ap_block_state2, tmp_5_read_fu_162_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((ap_block_state1 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_block_state2 = ap_const_boolean_0) and (tmp_5_read_fu_162_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_block_state2 = ap_const_boolean_0) and (tmp_5_read_fu_162_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, block_cfg_outputs_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = block_cfg_outputs_empty_n));
    end process;


    ap_block_state2_assign_proc : process(chan_data_last_V_empty_n, chan_data_g_V_M_real_V0_status, chan_data_i_V_M_real_V1_status)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = chan_data_g_V_M_real_V0_status) or (ap_const_logic_0 = chan_data_i_V_M_real_V1_status) or (ap_const_logic_0 = chan_data_last_V_empty_n));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_outputs_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_outputs_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_outputs_blk_n <= block_cfg_outputs_empty_n;
        else 
            block_cfg_outputs_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_cfg_outputs_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_outputs_read <= ap_const_logic_1;
        else 
            block_cfg_outputs_read <= ap_const_logic_0;
        end if; 
    end process;


    chan_data_g_V_M_imag_V_blk_n_assign_proc : process(chan_data_g_V_M_imag_V_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            chan_data_g_V_M_imag_V_blk_n <= chan_data_g_V_M_imag_V_empty_n;
        else 
            chan_data_g_V_M_imag_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_data_g_V_M_imag_V_read <= chan_data_g_V_M_real_V0_update;
    chan_data_g_V_M_real_V0_status <= (chan_data_g_V_M_real_V_empty_n and chan_data_g_V_M_imag_V_empty_n);

    chan_data_g_V_M_real_V0_update_assign_proc : process(ap_CS_fsm_state2, ap_block_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2 = ap_const_boolean_0))) then 
            chan_data_g_V_M_real_V0_update <= ap_const_logic_1;
        else 
            chan_data_g_V_M_real_V0_update <= ap_const_logic_0;
        end if; 
    end process;


    chan_data_g_V_M_real_V_blk_n_assign_proc : process(chan_data_g_V_M_real_V_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            chan_data_g_V_M_real_V_blk_n <= chan_data_g_V_M_real_V_empty_n;
        else 
            chan_data_g_V_M_real_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_data_g_V_M_real_V_read <= chan_data_g_V_M_real_V0_update;

    chan_data_i_V_M_imag_V_blk_n_assign_proc : process(chan_data_i_V_M_imag_V_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            chan_data_i_V_M_imag_V_blk_n <= chan_data_i_V_M_imag_V_full_n;
        else 
            chan_data_i_V_M_imag_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_data_i_V_M_imag_V_din <= chan_data_g_V_M_imag_V_dout;
    chan_data_i_V_M_imag_V_write <= chan_data_i_V_M_real_V1_update;
    chan_data_i_V_M_real_V1_status <= (chan_data_i_V_M_real_V_full_n and chan_data_i_V_M_imag_V_full_n);

    chan_data_i_V_M_real_V1_update_assign_proc : process(ap_CS_fsm_state2, ap_block_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2 = ap_const_boolean_0))) then 
            chan_data_i_V_M_real_V1_update <= ap_const_logic_1;
        else 
            chan_data_i_V_M_real_V1_update <= ap_const_logic_0;
        end if; 
    end process;


    chan_data_i_V_M_real_V_blk_n_assign_proc : process(chan_data_i_V_M_real_V_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            chan_data_i_V_M_real_V_blk_n <= chan_data_i_V_M_real_V_full_n;
        else 
            chan_data_i_V_M_real_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_data_i_V_M_real_V_din <= chan_data_g_V_M_real_V_dout;
    chan_data_i_V_M_real_V_write <= chan_data_i_V_M_real_V1_update;

    chan_data_last_V_blk_n_assign_proc : process(chan_data_last_V_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            chan_data_last_V_blk_n <= chan_data_last_V_empty_n;
        else 
            chan_data_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    chan_data_last_V_read_assign_proc : process(ap_CS_fsm_state2, ap_block_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2 = ap_const_boolean_0))) then 
            chan_data_last_V_read <= ap_const_logic_1;
        else 
            chan_data_last_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_5_read_fu_162_p2 <= chan_data_last_V_dout;
end behav;
