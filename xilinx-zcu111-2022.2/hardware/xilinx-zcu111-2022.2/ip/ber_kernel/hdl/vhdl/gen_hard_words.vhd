-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gen_hard_words is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    k_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    k_empty_n : IN STD_LOGIC;
    k_read : OUT STD_LOGIC;
    hard_words_tx_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    hard_words_tx_empty_n : IN STD_LOGIC;
    hard_words_tx_read : OUT STD_LOGIC;
    hard_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    hard_words_TVALID : OUT STD_LOGIC;
    hard_words_TREADY : IN STD_LOGIC;
    hard_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of gen_hard_words is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal k_blk_n : STD_LOGIC;
    signal hard_words_tx_blk_n : STD_LOGIC;
    signal hard_words_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_25_i_reg_153 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_reg_97 : STD_LOGIC_VECTOR (31 downto 0);
    signal size_reg_128 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal hard_words_tx_read_reg_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_hard_words_TREADY : STD_LOGIC;
    signal ap_block_state2_io : BOOLEAN;
    signal tmp_i_68_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_68_reg_143 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_io : BOOLEAN;
    signal i_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_25_i_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_i_phi_fu_101_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_hard_words_TREADY : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_0 = tmp_i_68_fu_113_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2_io = ap_const_boolean_0) and (tmp_i_fu_108_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))) and not((ap_const_lv1_0 = tmp_i_68_fu_113_p2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2_io = ap_const_boolean_0) and (tmp_i_fu_108_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_0 = tmp_i_68_fu_113_p2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2_io = ap_const_boolean_0) and (tmp_i_fu_108_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_hard_words_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_hard_words_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_108_p2 = ap_const_lv1_1) and (ap_block_state2_io = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (tmp_25_i_reg_153 = ap_const_lv1_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = tmp_25_i_reg_153) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io)))))) then 
                    ap_reg_ioackin_hard_words_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_1 = hard_words_TREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (tmp_25_i_reg_153 = ap_const_lv1_0) and (ap_const_logic_1 = hard_words_TREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = tmp_25_i_reg_153) and (ap_const_logic_1 = hard_words_TREADY)))) then 
                    ap_reg_ioackin_hard_words_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_block_state2_io = ap_const_boolean_0) and (tmp_i_fu_108_p2 = ap_const_lv1_0))) then 
                i_i_reg_97 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_1 = tmp_i_68_reg_143) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_i_reg_97 <= i_reg_147;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then
                hard_words_tx_read_reg_134 <= hard_words_tx_dout;
                size_reg_128 <= k_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_1 = tmp_i_68_fu_113_p2))) then
                i_reg_147 <= i_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_lv1_1 = tmp_i_68_reg_143))) then
                tmp_25_i_reg_153 <= tmp_25_i_fu_124_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))))) then
                tmp_i_68_reg_143 <= tmp_i_68_fu_113_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, tmp_i_fu_108_p2, ap_enable_reg_pp0_iter2, ap_block_state1, ap_block_state2_io, tmp_i_68_fu_113_p2, ap_block_state5_io, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((ap_block_state1 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_i_fu_108_p2 = ap_const_lv1_1) and (ap_block_state2_io = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_block_state2_io = ap_const_boolean_0) and (tmp_i_fu_108_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_i_68_fu_113_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_boolean_1 = ap_block_state5_io))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = tmp_i_68_fu_113_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, k_empty_n, hard_words_tx_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = k_empty_n) or (ap_const_logic_0 = hard_words_tx_empty_n));
    end process;


    ap_block_state2_io_assign_proc : process(tmp_i_fu_108_p2, ap_sig_ioackin_hard_words_TREADY)
    begin
                ap_block_state2_io <= ((tmp_i_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_hard_words_TREADY));
    end process;


    ap_block_state5_io_assign_proc : process(tmp_25_i_reg_153, ap_sig_ioackin_hard_words_TREADY)
    begin
                ap_block_state5_io <= (((tmp_25_i_reg_153 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_hard_words_TREADY)) or ((ap_const_lv1_1 = tmp_25_i_reg_153) and (ap_const_logic_0 = ap_sig_ioackin_hard_words_TREADY)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_hard_words_TREADY_assign_proc : process(hard_words_TREADY, ap_reg_ioackin_hard_words_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_hard_words_TREADY)) then 
            ap_sig_ioackin_hard_words_TREADY <= hard_words_TREADY;
        else 
            ap_sig_ioackin_hard_words_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    hard_words_TDATA <= ap_const_lv8_10;

    hard_words_TDATA_blk_n_assign_proc : process(hard_words_TREADY, ap_CS_fsm_state2, tmp_i_fu_108_p2, ap_enable_reg_pp0_iter2, tmp_25_i_reg_153)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_108_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (tmp_25_i_reg_153 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = tmp_25_i_reg_153)))) then 
            hard_words_TDATA_blk_n <= hard_words_TREADY;
        else 
            hard_words_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hard_words_TLAST_assign_proc : process(ap_CS_fsm_state2, tmp_i_fu_108_p2, ap_enable_reg_pp0_iter2, tmp_25_i_reg_153)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = tmp_25_i_reg_153))) then 
            hard_words_TLAST <= ap_const_lv1_0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_108_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (tmp_25_i_reg_153 = ap_const_lv1_0)))) then 
            hard_words_TLAST <= ap_const_lv1_1;
        else 
            hard_words_TLAST <= "X";
        end if; 
    end process;


    hard_words_TVALID_assign_proc : process(ap_CS_fsm_state2, tmp_i_fu_108_p2, ap_enable_reg_pp0_iter2, tmp_25_i_reg_153, ap_reg_ioackin_hard_words_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_i_fu_108_p2 = ap_const_lv1_1) and (ap_const_logic_0 = ap_reg_ioackin_hard_words_TREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (tmp_25_i_reg_153 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_hard_words_TREADY)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = tmp_25_i_reg_153) and (ap_const_logic_0 = ap_reg_ioackin_hard_words_TREADY)))) then 
            hard_words_TVALID <= ap_const_logic_1;
        else 
            hard_words_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    hard_words_tx_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, hard_words_tx_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            hard_words_tx_blk_n <= hard_words_tx_empty_n;
        else 
            hard_words_tx_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hard_words_tx_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            hard_words_tx_read <= ap_const_logic_1;
        else 
            hard_words_tx_read <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_118_p2 <= std_logic_vector(unsigned(i_i_phi_fu_101_p4) + unsigned(ap_const_lv32_80));

    i_i_phi_fu_101_p4_assign_proc : process(i_i_reg_97, tmp_i_68_reg_143, ap_CS_fsm_pp0_stage0, i_reg_147, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = tmp_i_68_reg_143) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            i_i_phi_fu_101_p4 <= i_reg_147;
        else 
            i_i_phi_fu_101_p4 <= i_i_reg_97;
        end if; 
    end process;


    k_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, k_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            k_blk_n <= k_empty_n;
        else 
            k_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    k_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            k_read <= ap_const_logic_1;
        else 
            k_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_25_i_fu_124_p2 <= "1" when (unsigned(i_reg_147) < unsigned(size_reg_128)) else "0";
    tmp_i_68_fu_113_p2 <= "1" when (unsigned(i_i_phi_fu_101_p4) < unsigned(size_reg_128)) else "0";
    tmp_i_fu_108_p2 <= "1" when (hard_words_tx_read_reg_134 = ap_const_lv32_0) else "0";
end behav;
