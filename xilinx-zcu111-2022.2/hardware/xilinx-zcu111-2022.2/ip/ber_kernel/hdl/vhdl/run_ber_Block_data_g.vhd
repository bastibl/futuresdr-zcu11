-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_ber_Block_data_g is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    block_cfg_code_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_code_empty_n : IN STD_LOGIC;
    block_cfg_code_read : OUT STD_LOGIC;
    fec_type_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fec_type_empty_n : IN STD_LOGIC;
    fec_type_read : OUT STD_LOGIC;
    block_cfg_crc_type_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_crc_type_empty_n : IN STD_LOGIC;
    block_cfg_crc_type_read : OUT STD_LOGIC;
    block_cfg_term_on_pass_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_term_on_pass_empty_n : IN STD_LOGIC;
    block_cfg_term_on_pass_read : OUT STD_LOGIC;
    block_cfg_max_iterations_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    block_cfg_max_iterations_empty_n : IN STD_LOGIC;
    block_cfg_max_iterations_read : OUT STD_LOGIC;
    fe_ctrl_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    fe_ctrl_V_V_TVALID : OUT STD_LOGIC;
    fe_ctrl_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of run_ber_Block_data_g is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal block_cfg_code_blk_n : STD_LOGIC;
    signal fec_type_blk_n : STD_LOGIC;
    signal block_cfg_crc_type_blk_n : STD_LOGIC;
    signal block_cfg_term_on_pass_blk_n : STD_LOGIC;
    signal block_cfg_max_iterations_blk_n : STD_LOGIC;
    signal fe_ctrl_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal fec_type_read_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal block_cfg_crc_type_r_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cfg_term_on_pa_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_139_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_214 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_6_fu_143_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_reg_220 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_i_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_reg_225 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_17_i_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_reg_230 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_i_reg_235 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_fe_ctrl_V_V_TREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_fe_ctrl_V_V_TREADY : STD_LOGIC;
    signal tmp_18_i_fu_162_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_i_fu_168_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_1_in_i_fu_175_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_21_i_fu_182_p6 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_fe_ctrl_V_V_TREADY = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_fe_ctrl_V_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_fe_ctrl_V_V_TREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    if ((ap_sig_ioackin_fe_ctrl_V_V_TREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_fe_ctrl_V_V_TREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = fe_ctrl_V_V_TREADY)) then 
                        ap_reg_ioackin_fe_ctrl_V_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then
                block_cfg_crc_type_r_reg_204 <= block_cfg_crc_type_dout;
                block_cfg_term_on_pa_reg_209 <= block_cfg_term_on_pass_dout;
                fec_type_read_reg_199 <= fec_type_dout;
                tmp_6_reg_220 <= tmp_6_fu_143_p1;
                tmp_reg_214 <= tmp_fu_139_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_16_i_reg_225 <= tmp_16_i_fu_147_p2;
                tmp_17_i_reg_230 <= tmp_17_i_fu_152_p2;
                tmp_19_i_reg_235 <= tmp_19_i_fu_157_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_state1, ap_sig_ioackin_fe_ctrl_V_V_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((ap_block_state1 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((ap_sig_ioackin_fe_ctrl_V_V_TREADY = ap_const_logic_1)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, block_cfg_code_empty_n, fec_type_empty_n, block_cfg_crc_type_empty_n, block_cfg_term_on_pass_empty_n, block_cfg_max_iterations_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = block_cfg_code_empty_n) or (ap_const_logic_0 = fec_type_empty_n) or (ap_const_logic_0 = block_cfg_crc_type_empty_n) or (ap_const_logic_0 = block_cfg_term_on_pass_empty_n) or (ap_const_logic_0 = block_cfg_max_iterations_empty_n));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, ap_sig_ioackin_fe_ctrl_V_V_TREADY)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_fe_ctrl_V_V_TREADY = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, ap_sig_ioackin_fe_ctrl_V_V_TREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_sig_ioackin_fe_ctrl_V_V_TREADY = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_fe_ctrl_V_V_TREADY_assign_proc : process(fe_ctrl_V_V_TREADY, ap_reg_ioackin_fe_ctrl_V_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_fe_ctrl_V_V_TREADY)) then 
            ap_sig_ioackin_fe_ctrl_V_V_TREADY <= fe_ctrl_V_V_TREADY;
        else 
            ap_sig_ioackin_fe_ctrl_V_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;


    block_cfg_code_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_code_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_code_blk_n <= block_cfg_code_empty_n;
        else 
            block_cfg_code_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_cfg_code_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_code_read <= ap_const_logic_1;
        else 
            block_cfg_code_read <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_crc_type_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_crc_type_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_crc_type_blk_n <= block_cfg_crc_type_empty_n;
        else 
            block_cfg_crc_type_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_cfg_crc_type_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_crc_type_read <= ap_const_logic_1;
        else 
            block_cfg_crc_type_read <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_max_iterations_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_max_iterations_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_max_iterations_blk_n <= block_cfg_max_iterations_empty_n;
        else 
            block_cfg_max_iterations_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_cfg_max_iterations_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_max_iterations_read <= ap_const_logic_1;
        else 
            block_cfg_max_iterations_read <= ap_const_logic_0;
        end if; 
    end process;


    block_cfg_term_on_pass_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, block_cfg_term_on_pass_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            block_cfg_term_on_pass_blk_n <= block_cfg_term_on_pass_empty_n;
        else 
            block_cfg_term_on_pass_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    block_cfg_term_on_pass_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            block_cfg_term_on_pass_read <= ap_const_logic_1;
        else 
            block_cfg_term_on_pass_read <= ap_const_logic_0;
        end if; 
    end process;

    fe_ctrl_V_V_TDATA <= std_logic_vector(resize(unsigned(tmp_21_i_fu_182_p6),32));

    fe_ctrl_V_V_TDATA_blk_n_assign_proc : process(fe_ctrl_V_V_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            fe_ctrl_V_V_TDATA_blk_n <= fe_ctrl_V_V_TREADY;
        else 
            fe_ctrl_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fe_ctrl_V_V_TVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_fe_ctrl_V_V_TREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_fe_ctrl_V_V_TREADY))) then 
            fe_ctrl_V_V_TVALID <= ap_const_logic_1;
        else 
            fe_ctrl_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    fec_type_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fec_type_empty_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))))) then 
            fec_type_blk_n <= fec_type_empty_n;
        else 
            fec_type_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fec_type_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_block_state1 = ap_const_boolean_0))) then 
            fec_type_read <= ap_const_logic_1;
        else 
            fec_type_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_1_in_i_fu_175_p3 <= 
        tmp_18_i_fu_162_p3 when (tmp_16_i_reg_225(0) = '1') else 
        tmp_20_i_fu_168_p3;
    tmp_16_i_fu_147_p2 <= "1" when (fec_type_read_reg_199 = ap_const_lv32_1) else "0";
    tmp_17_i_fu_152_p2 <= "0" when (block_cfg_crc_type_r_reg_204 = ap_const_lv32_0) else "1";
    tmp_18_i_fu_162_p3 <= (tmp_17_i_reg_230 & tmp_reg_214);
    tmp_19_i_fu_157_p2 <= "0" when (block_cfg_term_on_pa_reg_209 = ap_const_lv32_0) else "1";
    tmp_20_i_fu_168_p3 <= (ap_const_lv1_0 & tmp_reg_214);
    tmp_21_i_fu_182_p6 <= ((((tmp_6_reg_220 & ap_const_lv1_0) & tmp_19_i_reg_235) & ap_const_lv2_1) & p_Val2_1_in_i_fu_175_p3);
    tmp_6_fu_143_p1 <= block_cfg_max_iterations_dout(6 - 1 downto 0);
    tmp_fu_139_p1 <= block_cfg_code_dout(13 - 1 downto 0);
end behav;
