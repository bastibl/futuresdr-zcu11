-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity modulate_bits is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    modulation_type : IN STD_LOGIC_VECTOR (31 downto 0);
    symbol_V : IN STD_LOGIC_VECTOR (5 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of modulate_bits is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal BPSK_LUT_M_real_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal BPSK_LUT_M_real_V_ce0 : STD_LOGIC;
    signal BPSK_LUT_M_real_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal BPSK_LUT_M_imag_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal BPSK_LUT_M_imag_V_ce0 : STD_LOGIC;
    signal BPSK_LUT_M_imag_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal QAM4_LUT_M_real_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal QAM4_LUT_M_real_V_ce0 : STD_LOGIC;
    signal QAM4_LUT_M_real_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal QAM4_LUT_M_imag_V_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal QAM4_LUT_M_imag_V_ce0 : STD_LOGIC;
    signal QAM4_LUT_M_imag_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal QAM16_LUT_M_real_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal QAM16_LUT_M_real_V_ce0 : STD_LOGIC;
    signal QAM16_LUT_M_real_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal QAM16_LUT_M_imag_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal QAM16_LUT_M_imag_V_ce0 : STD_LOGIC;
    signal QAM16_LUT_M_imag_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal QAM64_LUT_M_real_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal QAM64_LUT_M_real_V_ce0 : STD_LOGIC;
    signal QAM64_LUT_M_real_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal QAM64_LUT_M_imag_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal QAM64_LUT_M_imag_V_ce0 : STD_LOGIC;
    signal QAM64_LUT_M_imag_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp2_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_sel_tmp2_reg_308 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_sel_tmp4_reg_314 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_sel_tmp6_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal channel_data_M_real_reg_326 : STD_LOGIC_VECTOR (14 downto 0);
    signal channel_data_M_imag_reg_331 : STD_LOGIC_VECTOR (14 downto 0);
    signal channel_data_M_real_1_reg_336 : STD_LOGIC_VECTOR (14 downto 0);
    signal channel_data_M_imag_1_reg_341 : STD_LOGIC_VECTOR (14 downto 0);
    signal channel_data_M_real_2_reg_346 : STD_LOGIC_VECTOR (14 downto 0);
    signal channel_data_M_imag_2_reg_351 : STD_LOGIC_VECTOR (14 downto 0);
    signal channel_data_M_real_4_reg_356 : STD_LOGIC_VECTOR (15 downto 0);
    signal channel_data_M_imag_4_reg_361 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_150_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_146_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_156_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_8_fu_166_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal newSel_v_fu_206_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal channel_data_M_imag_3_fu_203_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_cond_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_211_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel1_fu_219_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel20_v_fu_233_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal channel_data_M_real_3_fu_200_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel3_fu_238_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal newSel4_fu_242_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal complex_M_real_V_wr_fu_248_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal complex_M_imag_V_wr_fu_225_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component modulate_bits_BPSbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component modulate_bits_QAMdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component modulate_bits_QAMeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component modulate_bits_QAMfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component modulate_bits_QAMg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component modulate_bits_QAMhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component modulate_bits_QAMibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    BPSK_LUT_M_real_V_U : component modulate_bits_BPSbkb
    generic map (
        DataWidth => 15,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => BPSK_LUT_M_real_V_address0,
        ce0 => BPSK_LUT_M_real_V_ce0,
        q0 => BPSK_LUT_M_real_V_q0);

    BPSK_LUT_M_imag_V_U : component modulate_bits_BPSbkb
    generic map (
        DataWidth => 15,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => BPSK_LUT_M_imag_V_address0,
        ce0 => BPSK_LUT_M_imag_V_ce0,
        q0 => BPSK_LUT_M_imag_V_q0);

    QAM4_LUT_M_real_V_U : component modulate_bits_QAMdEe
    generic map (
        DataWidth => 15,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => QAM4_LUT_M_real_V_address0,
        ce0 => QAM4_LUT_M_real_V_ce0,
        q0 => QAM4_LUT_M_real_V_q0);

    QAM4_LUT_M_imag_V_U : component modulate_bits_QAMeOg
    generic map (
        DataWidth => 15,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => QAM4_LUT_M_imag_V_address0,
        ce0 => QAM4_LUT_M_imag_V_ce0,
        q0 => QAM4_LUT_M_imag_V_q0);

    QAM16_LUT_M_real_V_U : component modulate_bits_QAMfYi
    generic map (
        DataWidth => 15,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => QAM16_LUT_M_real_V_address0,
        ce0 => QAM16_LUT_M_real_V_ce0,
        q0 => QAM16_LUT_M_real_V_q0);

    QAM16_LUT_M_imag_V_U : component modulate_bits_QAMg8j
    generic map (
        DataWidth => 15,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => QAM16_LUT_M_imag_V_address0,
        ce0 => QAM16_LUT_M_imag_V_ce0,
        q0 => QAM16_LUT_M_imag_V_q0);

    QAM64_LUT_M_real_V_U : component modulate_bits_QAMhbi
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => QAM64_LUT_M_real_V_address0,
        ce0 => QAM64_LUT_M_real_V_ce0,
        q0 => QAM64_LUT_M_real_V_q0);

    QAM64_LUT_M_imag_V_U : component modulate_bits_QAMibs
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => QAM64_LUT_M_imag_V_address0,
        ce0 => QAM64_LUT_M_imag_V_ce0,
        q0 => QAM64_LUT_M_imag_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or (ap_ce = ap_const_logic_0))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or (ap_ce = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1))) then
                ap_reg_pp0_iter1_sel_tmp2_reg_308 <= sel_tmp2_reg_308;
                ap_reg_pp0_iter1_sel_tmp4_reg_314 <= sel_tmp4_reg_314;
                ap_reg_pp0_iter1_sel_tmp6_reg_319 <= sel_tmp6_reg_319;
                channel_data_M_imag_1_reg_341 <= QAM4_LUT_M_imag_V_q0;
                channel_data_M_imag_2_reg_351 <= QAM16_LUT_M_imag_V_q0;
                channel_data_M_imag_4_reg_361 <= QAM64_LUT_M_imag_V_q0;
                channel_data_M_imag_reg_331 <= BPSK_LUT_M_imag_V_q0;
                channel_data_M_real_1_reg_336 <= QAM4_LUT_M_real_V_q0;
                channel_data_M_real_2_reg_346 <= QAM16_LUT_M_real_V_q0;
                channel_data_M_real_4_reg_356 <= QAM64_LUT_M_real_V_q0;
                channel_data_M_real_reg_326 <= BPSK_LUT_M_real_V_q0;
                sel_tmp2_reg_308 <= sel_tmp2_fu_182_p2;
                sel_tmp4_reg_314 <= sel_tmp4_fu_188_p2;
                sel_tmp6_reg_319 <= sel_tmp6_fu_194_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter0, ap_ce, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    BPSK_LUT_M_imag_V_address0 <= tmp_s_fu_150_p1(1 - 1 downto 0);

    BPSK_LUT_M_imag_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1))) then 
            BPSK_LUT_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            BPSK_LUT_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    BPSK_LUT_M_real_V_address0 <= tmp_s_fu_150_p1(1 - 1 downto 0);

    BPSK_LUT_M_real_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1))) then 
            BPSK_LUT_M_real_V_ce0 <= ap_const_logic_1;
        else 
            BPSK_LUT_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    QAM16_LUT_M_imag_V_address0 <= tmp_2_fu_170_p1(4 - 1 downto 0);

    QAM16_LUT_M_imag_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1))) then 
            QAM16_LUT_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            QAM16_LUT_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    QAM16_LUT_M_real_V_address0 <= tmp_2_fu_170_p1(4 - 1 downto 0);

    QAM16_LUT_M_real_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1))) then 
            QAM16_LUT_M_real_V_ce0 <= ap_const_logic_1;
        else 
            QAM16_LUT_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    QAM4_LUT_M_imag_V_address0 <= tmp_1_fu_160_p1(2 - 1 downto 0);

    QAM4_LUT_M_imag_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1))) then 
            QAM4_LUT_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            QAM4_LUT_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    QAM4_LUT_M_real_V_address0 <= tmp_1_fu_160_p1(2 - 1 downto 0);

    QAM4_LUT_M_real_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1))) then 
            QAM4_LUT_M_real_V_ce0 <= ap_const_logic_1;
        else 
            QAM4_LUT_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    QAM64_LUT_M_imag_V_address0 <= tmp_3_fu_176_p1(6 - 1 downto 0);

    QAM64_LUT_M_imag_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1))) then 
            QAM64_LUT_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            QAM64_LUT_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    QAM64_LUT_M_real_V_address0 <= tmp_3_fu_176_p1(6 - 1 downto 0);

    QAM64_LUT_M_real_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1))) then 
            QAM64_LUT_M_real_V_ce0 <= ap_const_logic_1;
        else 
            QAM64_LUT_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_ce)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or (not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_idle_pp0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not(((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and (ap_ce = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_0to1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= complex_M_real_V_wr_fu_248_p3;
    ap_return_1 <= complex_M_imag_V_wr_fu_225_p3;
        channel_data_M_imag_3_fu_203_p1 <= std_logic_vector(resize(signed(channel_data_M_imag_2_reg_351),16));

        channel_data_M_real_3_fu_200_p1 <= std_logic_vector(resize(signed(channel_data_M_real_2_reg_346),16));

    complex_M_imag_V_wr_fu_225_p3 <= 
        newSel_fu_211_p1 when (or_cond_fu_215_p2(0) = '1') else 
        newSel1_fu_219_p3;
    complex_M_real_V_wr_fu_248_p3 <= 
        newSel3_fu_238_p1 when (or_cond_fu_215_p2(0) = '1') else 
        newSel4_fu_242_p3;
    newSel1_fu_219_p3 <= 
        channel_data_M_imag_3_fu_203_p1 when (ap_reg_pp0_iter1_sel_tmp2_reg_308(0) = '1') else 
        channel_data_M_imag_4_reg_361;
    newSel20_v_fu_233_p3 <= 
        channel_data_M_real_reg_326 when (ap_reg_pp0_iter1_sel_tmp6_reg_319(0) = '1') else 
        channel_data_M_real_1_reg_336;
        newSel3_fu_238_p1 <= std_logic_vector(resize(signed(newSel20_v_fu_233_p3),16));

    newSel4_fu_242_p3 <= 
        channel_data_M_real_3_fu_200_p1 when (ap_reg_pp0_iter1_sel_tmp2_reg_308(0) = '1') else 
        channel_data_M_real_4_reg_356;
        newSel_fu_211_p1 <= std_logic_vector(resize(signed(newSel_v_fu_206_p3),16));

    newSel_v_fu_206_p3 <= 
        channel_data_M_imag_reg_331 when (ap_reg_pp0_iter1_sel_tmp6_reg_319(0) = '1') else 
        channel_data_M_imag_1_reg_341;
    or_cond_fu_215_p2 <= (ap_reg_pp0_iter1_sel_tmp6_reg_319 or ap_reg_pp0_iter1_sel_tmp4_reg_314);
    sel_tmp2_fu_182_p2 <= "1" when (modulation_type = ap_const_lv32_2) else "0";
    sel_tmp4_fu_188_p2 <= "1" when (modulation_type = ap_const_lv32_1) else "0";
    sel_tmp6_fu_194_p2 <= "1" when (modulation_type = ap_const_lv32_0) else "0";
    tmp_1_fu_160_p1 <= std_logic_vector(resize(unsigned(tmp_7_fu_156_p1),64));
    tmp_2_fu_170_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_166_p1),64));
    tmp_3_fu_176_p1 <= std_logic_vector(resize(unsigned(symbol_V),64));
    tmp_7_fu_156_p1 <= symbol_V(2 - 1 downto 0);
    tmp_8_fu_166_p1 <= symbol_V(4 - 1 downto 0);
    tmp_fu_146_p1 <= symbol_V(1 - 1 downto 0);
    tmp_s_fu_150_p1 <= std_logic_vector(resize(unsigned(tmp_fu_146_p1),64));
end behav;
